return (function(...)
	local II111 = {"\078\075\081\108\054\082\066\061";"\074\074\102\053\049\074\078\069\120\105\081\102\065\098\079\069";"\079\077\088\107\054\077\074\066\099\120\117\061";"\121\085\070\110";"\054\103\101\115\079\077\069\057\068\070\066\061";"\114\077\072\103\118\083\098\107\051\112\081\112\051\049\061\061","\078\082\078\080\079\053\081\087\043\117\061\061","\116\099\085\078";"\114\077\050\071\050\112\117\071\118\103\118\103\118\086\061\061","\090\103\069\080\118\112\050\070\079\077\069\111\118\070\074\107","\054\103\101\057\118\049\061\061","\068\103\101\115\090\115\086\061","\066\098\074\050\065\107\069\053\120\105\102\102\065\098\074\050","\121\099\082\088\121\099\099\057\121\068\082\104\121\054\084\050\121\104\085\099\121\121\085\053\121\054\043\084\121\116\103\107","\122\073\113\083\118\103\118\077\078\098\068\105\072\083\088\054\121\054\057\116\116\119\116\057\116\068\056\081\121\097\057\080\120\120\113\111","\074\053\069\052\078\107\074\066\065\053\069\065\074\053\108\106\066\105\078\081\065\053\066\061";"\072\115\090\061","\121\100\056\048\121\097\077\052\121\104\103\104\121\121\111\109","\118\077\088\115\090\077\113\108\043\066\105\087\118\077\066\061";"\054\082\101\070\118\082\069\083\079\077\088\087\054\086\061\061";"\121\080\043\070\121\118\056\112\121\048\084\077\121\068\047\078\116\122\070\087\121\068\103\056\082\047\043\104\086\057\103\073\083\057\103\055\088\051\099\115\088\043\084\072\100\047\099\071\055\056\067\088\084\085\112\080\086\081\067\097\083\099\067\103\089\104\078\079\104\056\112\097\100\110\114\088\075\119\083\097\086\048\115\088\083\122\120\098\087\121\076\075\088\118\075\097\055\100\106\088\080\081\067\075\103\097\065\097\083\099\067\088\084\068\104\083\086\122\122\119\056\075\113\083\118\103\068\071\050\077\118\103\050\112\112\103\100\099\065\088\084\080\067\097\086\110\076\088\083\116\100\088\075\119\083\075\103\116\110\103\097\122\114\098\057\104\100\080\085\100\114\080\085\048\120\075\057\085\079\056\065\105\072\065\121\080\043\070\121\097\103\072\116\119\043\103\121\068\047\078\110\110\111\102\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\116\068\119\085\078\053\087\088\083\116\115\088\088\119\065\088\080\119\075\080\100\104\115\088\089\122\054\097\108\116\100\088\084\085\083\080\086\122\075\103\084\116\075\088\084\085\112\080\086\081\067\097\083\099\067\103\089\104\065\083\086\122\081\109\090\086\061\061","\051\083\053\111\051\083\053\111\114\073\049\061";"\068\120\074\111\068\066\121\108\054\082\074\112\052\066\049\061","\052\053\074\102\065\069\101\065\074\053\069\066\074\074\072\114\078\098\088\052\066\105\078\066\049\066\121\104";"\078\069\081\081\065\098\055\081\065\098\079\114\074\098\069\050\074\066\066\061","\066\077\101\071\079\120\102\072\054\070\078\088\065\077\088\115\079\053\105\088\054\075\066\061";"\078\070\074\107\074\120\072\108\068\103\113\088\078\103\101\087\118\117\061\061";"\119\117\061\061","\068\075\074\107\079\077\101\057","\072\115\090\076\072\049\061\061","\121\068\099\071\121\068\099\086\121\099\056\108\121\118\116\052","\118\082\078\080\079\077\081\087\043\117\061\061";"\052\053\074\102\065\069\101\049\065\053\069\118\078\074\081\114\074\053\069\050\078\066\121\066\066\071\061\061";"\078\070\074\107\049\075\074\103\118\088\081\088\054\082\069\080\054\088\078\080\054\082\066\061";"\121\118\099\079\121\048\057\056\116\068\043\051\116\099\070\066\121\100\051\074\116\122\070\087\121\100\056\107";"\066\077\101\080\090\070\101\057";"\090\070\074\107\079\077\088\057\118\071\061\061","\104\070\072\108\090\076\049\086";"\121\068\085\086\116\068\056\114\116\122\070\087\121\100\056\107\104\086\097\119\114\077\072\103\118\083\117\071\118\103\068\071\050\051\084\072\100\047\099\071\055\051\082\106\100\047\052\110\080\043\082\098\103\057\103\117\084\043\047\109\083\051\082\071\108\057\099\050\084\043\043\069\080\047\052\048\084\047\103\079\097\057\103\108\057\057\082\116\083\047\052\109\103\051\082\069\084\051\052\101\087\047\043\066\085\051\047\109\103\086\097\113\104\084\112\098\057\122\076\075\086\099\076\097\083\099\067\103\089\104\049\119\050\084\048\086\121\068\085\086\116\068\056\114\116\122\070\087\121\100\056\107\056\083\050\057\122\051\043\104\086\057\103\073\083\057\103\055\088\051\099\115\088\043\084\072\100\047\099\071\055\051\047\109\086\120\113\111","\078\070\074\107\078\077\074\084\079\082\118\103\066\103\074\055\068\082\088\057\074\077\088\055\118\049\061\061","\116\068\056\081\121\097\057\080\121\104\084\119\121\104\084\117\121\104\084\085\121\080\082\050\121\080\099\121\121\121\057\057\121\085\056\073";"\090\076\078\087\090\053\118\087\054\077\113\087\079\071\061\061","\050\083\074\122\121\104\047\057\121\080\084\114\121\054\057\116\116\119\116\057\082\047\052\101\087\047\043\066\085\051\084\118\085\047\043\047\080\051\043\055\084\043\043\116\080\105\107\116","\074\107\069\052\065\053\101\112\052\071\061\061","\068\082\072\107\099\082\101\057\099\070\074\121","\079\077\069\084";"\068\075\074\107\079\077\101\057\074\077\074\055\090\077\113\108\079\077\066\061";"\068\082\118\107\118\120\081\072\068\082\072\111\054\071\061\061";"\078\070\074\107\066\103\069\057\118\070\066\061";"\099\120\072\077\090\103\088\088\054\103\049\061","\074\070\074\108\090\077\101\057";"\121\080\111\087","\090\077\069\111\079\073\098\113\079\077\069\111\118\070\074\107";"\116\122\043\085\121\068\085\097\121\080\082\078\121\104\085\116","\090\103\069\057\118\077\101\055","\104\070\072\089\099\082\072\100\122\053\081\108\079\073\078\089\118\082\079\111\054\076\074\057\118\069\078\121\090\077\066\113\056\084\101\083\054\077\088\083\099\111\102\056\068\120\078\107\054\077\074\103\099\082\074\089\118\053\118\111\068\082\105\088\052\103\101\080\054\098\081\105\079\073\078\087\054\086\061\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\065\098\061","\099\120\078\088\054\066\088\098";"\116\104\043\115\116\104\043\112";"\066\070\074\057\118\069\079\097\099\120\072\071\118\120\122\061";"\116\122\043\085\121\068\085\097\121\104\084\051\121\121\057\057\121\085\056\073\121\104\085\052\121\068\085\097\110\110\111\050\121\085\047\066\121\099\099\056\116\104\043\079\121\116\099\110\116\104\047\073\116\104\047\090\116\122\043\085\121\068\085\097\116\118\070\086\116\104\047\078\121\121\057\057\121\085\056\073\110\110\111\050\121\054\103\070\121\080\052\110\121\068\043\110\056\057\052\048\083\043\103\117\084\043\099\104\085\043\043\054\100\057\099\086\108\047\052\116\098\057\082\119\085\051\047\109\083\051\082\067\108\043\103\108\057\047\099\081\084\047\082\119\085\051\043\075\057\047\082\119\085\051\082\122\089\051\099\066\057\047\082\073\057\047\052\101\083\043\043\101\100\057\047\109\083\051\099\081\083\043\082\109\086\051\082\075\084\047\084\073\085\057\082\119\085\051\099\066\057\047\082\073\057\071\061\061","\078\070\074\107\052\120\078\088\054\066\088\057\118\103\109\061","\066\086\061\061","\066\077\074\107","\121\118\111\097\116\122\077\119\121\099\052\080\121\116\085\120\121\068\047\083\116\104\116\065\121\068\043\116\121\097\084\049\121\068\085\114\121\080\099\101\121\100\051\074\121\097\085\117\116\122\051\101\121\104\047\108\121\097\077\087\121\068\047\119\121\121\057\057\121\085\056\073\121\116\070\081\121\104\047\108\121\097\077\087","\056\084\101\105\090\070\066\086\050\065\049\061","\079\073\081\080\118\070\079\088\090\098\072\108\054\077\113\084\068\082\072\100";"\054\082\101\105\090\070\074\087\079\103\074\111";"\078\070\074\107\049\070\101\057\118\103\088\075","\121\097\084\068\116\099\103\089","\118\077\074\084\079\082\118\103\065\103\069\055\118\066\072\081\078\117\061\061","\066\076\078\108\090\075\078\052\079\082\048\061","\048\048\056\049\114\077\072\103\118\103\068\071\050\112\117\071\050\117\061\061";"\090\077\113\108\043\082\074\111","\116\118\084\114\121\104\111\072\121\097\116\075\121\068\084\070\121\099\116\106\121\054\043\111\121\110\057\106\121\068\084\054\121\054\057\116\110\110\111\099\056\057\084\076\075\047\103\099\083\047\099\122\098\052\067\088\086\118\115\103\100\099\104\097\055\121\067\080\103\097\109\087\116\068\056\112\121\118\077\101\116\104\043\114\116\118\085\106\104\047\082\072\083\047\082\119\085\043\099\066\057\047\082\073\057\111\067\080\108\048\076\097\087\054\076\075\088\068\115\080\075\099\122\087\121\054\111\117\121\099\043\104\049\066\101\069\104\047\082\102\075\051\099\055\097\098\069\106\078\043\047\109\086\049\061\061","\066\103\074\075\099\120\072\107\118\120\081\104\118\120\088\112\068\082\113\089\068\103\069\083\099\071\061\061";"\104\070\072\089\099\082\072\100\122\069\102\082\066\069\081\088\068\082\078\121\078\077\088\108\054\077\101\075\078\082\121\107\118\120\081\056\068\120\078\107\054\077\074\056\079\120\078\107\054\070\048\061";"\054\103\069\055\118\120\102\089\068\120\078\088\072\071\061\061";"\065\049\061\061","\122\056\117\086\082\071\061\061";"\052\053\074\102\065\069\101\065\074\053\069\066\074\074\072\114\049\074\074\066\065\107\108\069\049\066\071\061","\054\103\069\055\118\120\102\089\068\120\078\088\066\070\108\087\079\107\074\057\118\082\105\080\118\120\050\061";"\074\077\069\055\090\077\074\111\122\053\078\088\079\077\074\083\079\077\074\098\122\049\061\061";"\065\077\069\115\079\053\069\083\079\077\088\087\054\086\061\061","\052\053\074\102\065\069\101\077\052\074\081\065\074\069\078\102\065\098\055\114\074\098\069\050\074\066\066\061";"\052\082\121\107\118\120\081\103\068\082\072\088\120\069\078\087\054\070\113\107\099\120\102\115\120\069\074\081\104\074\078\087\054\070\113\107\099\120\117\055\049\103\101\111\118\077\074\111";"\066\105\078\102\074\069\074\065\120\107\069\065\066\107\088\065\074\069\074\051\052\074\078\056\074\074\078\066\065\107\048\061";"\081\120\113\111\048\048\056\078","\054\082\101\070\118\082\072\087\054\082\105\108\054\103\049\061","\065\066\069\081\065\088\078\102\065\098\089\061","\121\118\056\112\116\118\070\084\121\068\111\069";"\118\075\074\057\068\076\078\080\054\070\048\061","\090\103\069\080\118\112\053\107\079\077\069\111\118\070\074\107";"\090\103\069\080\118\112\122\070\079\077\069\111\118\070\074\107","\090\103\069\080\118\112\053\048\079\077\069\111\118\070\074\107","\090\070\055\080\054\077\113\066\043\120\102\088";"\090\103\069\080\118\112\072\107\068\120\081\075\118\120\049\061";"\068\070\108\088\090\076\049\111","\065\105\118\069\066\098\108\069\049\066\113\114\074\098\069\050\074\066\066\061";"\079\077\074\048\079\069\078\121\090\077\066\061";"\104\056\112\098\087\119\065\088\100\100\050\116\122\117\061\061";"\066\098\074\050\065\107\069\053\120\105\080\106\065\098\074\065","\118\075\074\089\054\053\121\108\054\082\066\061";"\065\077\069\115\079\069\074\115\068\082\081\089\118\066\088\098","\049\082\078\085\079\120\072\107\066\076\102\088\054\077\113\078\079\082\074\105\118\074\079\080\054\103\078\087\079\071\061\061";"\114\077\072\103\118\103\068\071\050\112\117\071\050\051\052\048\057\047\082\119\085\051\082\109\086\051\099\117\085\075\113\111","\074\107\069\050\052\071\061\061","\121\118\099\079\121\110\085\084","\052\053\074\102\065\069\101\106\054\098\069\107\079\077\069\083\099\071\061\061","\065\082\101\070\118\066\069\083\079\077\088\087\054\098\118\111\068\082\105\088";"\072\115\068\061";"\121\099\047\110\121\097\056\085\121\080\099\121\121\054\111\106\121\104\084\116\121\118\056\078\121\068\103\072\116\104\047\054\121\104\084\117\121\085\116\105\116\104\043\079\121\116\099\110\121\068\047\115\116\104\070\089\110\110\111\050\121\104\084\117\121\116\043\072\121\116\043\110\121\068\085\097\121\080\099\121\121\054\111\106\121\099\047\110\121\097\103\047\121\097\056\085\121\048\103\080\048\048\056\056\121\099\099\056\121\080\116\090\116\068\051\101\121\104\084\072\116\068\056\081\121\097\057\080\110\110\111\050\121\054\056\077\121\104\111\099\121\068\047\085\116\068\056\081\121\097\057\080\121\068\103\072\121\080\099\121\121\121\057\057\121\085\056\073\048\048\056\056","\049\076\081\088\068\120\078\105\090\103\066\061";"\048\048\056\049\114\077\072\103\118\083\117\071\118\103\068\071\050\117\061\061";"\090\103\074\089\054\070\069\098","\104\070\072\108\090\076\049\086\082\076\078\108\090\103\079\088\079\112\105\117\079\077\069\111\118\070\074\107\120\052\117\061","\121\104\084\098\121\085\111\108\121\097\085\117\116\122\051\101\121\104\103\104\116\118\043\107\110\110\111\050\121\121\052\113\121\104\085\051\121\110\070\078\121\110\057\090\121\054\057\070\116\104\047\114\121\068\047\119\121\116\084\104\121\054\085\106\116\104\047\049\116\119\077\050\121\116\070\081\121\068\116\114\121\118\057\086\110\110\111\050\121\104\084\117\116\122\084\089\121\104\111\099\121\080\111\081\050\056\048\111\121\116\043\052\116\122\043\115\050\056\048\115\072\043\043\075\098\057\103\120\055\051\103\099\088\051\082\110\055\057\084\067\075\047\047\109\083\051\052\101\087\047\043\066\085\051\099\055\080\051\103\117\084\043\103\108\057\043\047\109\083\051\052\109\103\057\052\101\087\047\043\066\085\051\103\084\108\051\084\087\057\047\099\082\087\043\099\115\088\043\099\119\086\051\084\112\087\043\099\082\057\043\082\109\083\047\047\109\083\051\082\057\083\051\082\069\085\051\099\070\084\051\103\118\080\051\052\048\080\051\099\089\097\043\099\082\087\043\099\115\088\043\103\120\055\051\103\099\088\051\043\099\108\051\082\110\055\057\084\067\075\047\099\120\055\057\103\120\055\051\047\109\083\051\099\090\086\051\082\098\080\047\082\050\088\057\099\119\086\051\084\112\087\043\082\047\085\057\043\051\100\047\099\074\084\051\043\051\108\047\051\117\086\086\097\119\114\077\072\103\118\083\117\071\118\103\068\071\050\051\082\087\057\043\052\116\083\057\084\047\098\047\082\073\057\057\084\102\083\051\052\048\103\057\047\109\083\051\103\117\084\043\099\104\085\043\099\055\080\051\103\117\084\043\103\108\057\043\082\071\108\057\099\068\083\057\099\068\087\057\099\106\098\051\103\100\103\053\078\049\066\047\047\109\083\051\082\087\057\043\052\116\083\057\099\111\057\047\043\082\088\047\084\102\083\051\052\048\103\057\047\109\083\051\099\055\080\051\103\117\084\043\103\108\057\043\099\090\084\043\082\106\100\047\084\112\087\043\082\087\087\051\084\073\055\051\084\065\075\043\103\073\083\047\099\070\084\051\084\117\088\047\084\067\108\047\082\067\085\047\047\109\083\051\084\087\055\047\099\086\057\043\099\072\100\057\084\073\085\057\082\076\089\043\099\122\103\051\099\082\088\047\099\120\055\057\103\074\087\047\103\117\084\043\099\104\085\043\051\117\086\075\113\111";"\049\082\072\107\099\082\101\057\052\077\069\115\078\077\101\057\118\049\061\061","\068\070\069\057\049\120\078\107\068\082\072\100";"\121\048\103\075","\049\103\069\083\099\070\078\111\054\076\102\066\118\082\105\071\054\077\069\107\118\049\061\061","\052\098\101\081\065\088\067\103\084\081\083\088\075\104\097\061","\090\103\069\080\118\112\050\113\079\077\069\111\118\070\074\107";"\079\070\101\076\068\082\072\107\099\082\101\057";"\104\076\074\115\118\052\102\054\049\077\072\105\090\075\072\087\090\088\107\086\116\081\056\097\116\118\085\077\116\068\119\085\116\118\051\102\121\048\119\048\121\054\111\121\056\086\061\061","\066\076\102\088\054\077\113\081\118\069\078\087\066\103\069\057\099\071\061\061","\043\103\108\066\074\071\061\061","\065\070\121\069\118\077\088\107\078\103\101\083\079\120\072\050\054\076\072\107","\078\070\069\055\118\066\105\088\054\075\074\056\079\120\078\107\054\070\121\066\118\082\105\071\054\077\069\107\118\049\061\061","\072\115\090\076\072\071\061\061","\118\070\113\087\079\103\074\115","\116\118\111\117\116\119\099\102\121\097\103\104\121\068\085\097\121\080\051\072\121\104\070\090\121\080\043\070\110\110\111\050\121\068\057\047\116\068\056\081\121\080\085\056\121\068\077\090\121\068\077\090\121\085\070\084\116\104\047\049\116\119\077\050\048\048\056\056\112\049\100\088\083\116\067\098\057\116\120\098\087\054\067\075\088\119\083\088\089\122\067\080\088\119\110\075\103\121\083\080\103\110\054\087\087\122\086\071\110\110\111\081\121\054\047\100\121\097\070\076\116\118\052\057\121\068\084\073\121\097\070\084\104\047\099\122\088\057\084\117\108\043\052\101\087\047\043\066\085\069\087\103\103\097\104\088\086\118\113\079\121\099\116\106\116\104\047\054\116\119\077\050\121\068\084\073\121\097\070\084\048\048\056\056\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\121\099\116\106\116\119\116\047\121\110\070\057\051\086\097\087\090\075\074\057\122\069\078\087\118\070\079\089\118\074\102\108\079\120\072\088\119\056\088\109\090\086\061\061";"\090\076\078\108\054\103\072\088";"\068\103\069\115\118\049\061\061";"\072\115\090\105";"\052\053\074\102\065\069\101\065\074\053\069\066\074\074\072\114\065\053\101\120\052\053\074\102\065\117\061\061";"\116\068\056\081\121\097\057\080\116\122\043\085\121\068\085\097\121\118\056\112\121\121\085\053\116\099\051\114\121\048\103\080";"\054\082\069\048\066\103\069\057\118\070\066\061","\068\103\101\087\054\077\074\108\054\086\061\061";"\090\103\069\080\118\117\061\061";"\114\077\072\103\118\083\117\071\118\103\068\071\050\056\050\061";"\119\049\061\061";"\072\115\068\105","\043\066\101\103\090\071\061\061";"\104\076\081\088\054\077\101\108\118\117\061\061","\078\082\078\080\079\117\061\061";"\090\103\069\080\118\112\050\076\079\077\069\111\118\070\074\107","\090\103\069\080\118\112\122\111\079\077\069\111\118\070\074\107","\116\099\082\057\121\121\052\097","\121\068\085\086\116\068\056\114\116\122\070\087\121\100\056\107","\065\066\101\082\078\074\101\122\078\066\069\050\120\105\072\049\078\066\113\050\066\071\061\061","\120\117\061\061";"\121\068\111\110\121\104\047\079\121\068\084\120\116\119\077\097";"\104\076\081\105\054\084\102\115\118\075\086\101\078\070\074\107\049\105\118\108\090\084\086\075\066\070\101\105\054\103\078\114\078\082\121\108\068\103\113\088\066\107\118\068\081\111\098\110\056\084\101\083\054\070\121\115\054\070\113\088\122\069\072\087\079\082\121\098\120\107\074\057\068\082\081\089\118\074\072\077\082\056\117\071\056\084\101\105\090\070\066\086\050\065\117\119\104\076\074\115\118\052\117\113\050\071\097\087\079\120\072\088\122\112\053\107\056\086\061\061","\052\053\074\102\065\053\074\052","\072\107\107\061";"\090\077\069\111\079\073\098\061";"\065\117\061\061","\090\120\074\088\079\082\074\098","\052\069\102\049","\106\074\107\061","\090\103\069\080\118\112\108\107\068\120\081\075\118\120\049\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\065\090\061","\104\076\078\108\090\103\079\088\079\056\102\117\079\077\069\111\118\070\074\107";"\121\099\082\088\121\080\070\090\121\054\056\066","\054\082\101\098\118\049\061\061";"\043\107\113\088\118\075\049\086\118\077\101\076\054\075\107\101\050\083\066\071\106\120\055\050\118\082\118\107\122\073\074\071\114\049\061\061","\099\077\074\080\118\070\108\107";"\114\077\072\103\118\098\118\077\072\107\049\071\049\043\082\069\085\051\082\054\097\057\099\111\057\047\043\082\088\076\113\111";"\090\076\102\088\054\077\113\065\079\082\081\051\068\082\105\088";"\090\076\078\111\099\082\121\075","\054\103\069\055\118\120\102\089\068\120\078\088\050\115\068\061","\052\107\074\118\120\107\074\102\074\053\088\051\078\071\061\061";"\054\082\101\105\090\070\074\087\079\103\074\111\079\077\069\111\118\070\074\107";"\090\103\069\080\118\112\053\076\079\077\069\111\118\070\074\107","\090\070\108\087\079\082\113\098\118\120\081\115\050\086\061\061","\118\070\113\087\079\103\074\115\050\086\061\061","\116\068\056\081\121\097\057\080\121\099\052\099\121\104\084\085\121\100\119\110\121\121\099\120\121\100\051\074\121\080\111\087\121\080\103\116\116\122\051\101\121\100\119\110\121\121\099\120";"\066\103\074\103\090\103\074\115\099\053\069\083\079\077\088\087\054\086\061\061","\114\077\072\103\118\083\117\071\050\112\102\103\118\086\061\061";"\116\068\056\099\121\121\052\097\121\048\051\055\121\068\085\054\121\054\043\088\121\116\084\104\121\048\119\048\116\122\070\087\116\104\085\100\116\104\116\121","\090\077\101\076\118\120\081\107\043\120\102\088";"\074\077\074\048\079\073\074\111\118\049\061\061","\118\103\069\083\079\077\101\080\054\086\061\061","\049\082\113\089\099\082\069\057\068\070\066\061";"\068\070\101\057\054\103\074\083\079\077\074\098";"\054\082\101\057\079\077\086\061";"\068\075\074\103\118\088\118\108\054\073\074\088","\121\068\047\115\121\116\043\110";"\079\082\121\080\079\117\061\061";"\079\077\074\048\079\073\074\111\118\049\061\061","\054\082\050\113\050\083\050\061";"\065\098\101\065\074\053\069\051\049\107\074\065";"\121\097\103\065\121\054\111\117\121\068\082\115\116\118\043\055\121\104\047\108\121\097\077\087\121\080\070\108";"\072\043\043\116\080\111\117\086\122\117\061\061";"\104\070\069\115\090\070\088\115\079\056\102\117\079\077\069\111\118\070\074\107";"\090\077\074\107\079\077\069\111\118\070\074\107";"\090\103\069\080\118\112\053\113\079\077\069\111\118\070\074\107";"\052\107\074\118\120\105\072\066\049\074\081\066\049\074\078\066\049\066\072\104";"\121\097\119\097\121\121\085\053\121\100\051\074\121\080\111\087\121\054\111\116\121\054\085\103\121\099\052\085\121\104\070\051\104\051\099\120\097\051\099\115\088\043\082\057\083\051\099\122\098\112\053\071\052\051\052\067\100\057\099\068\075\111\053\061","\099\082\072\087\054\086\061\061","\121\054\084\057\121\068\085\080","\066\105\078\102\074\069\074\065\120\105\081\069\066\107\074\066\078\053\074\077\049\074\074\050\074\117\061\061","\106\065\107\101\106\065\107\101\106\065\107\101\106\065\107\101\106\065\107\101\106\065\107\101\106\065\107\101\106\065\107\061";"\116\122\043\085\121\068\085\097\121\068\070\073\121\110\085\075\121\104\070\067\121\121\052\097\110\110\111\050\121\116\057\118\121\118\111\097\121\080\047\049\121\104\084\085\121\118\111\071\121\080\099\121\110\110\111\050\116\122\043\085\121\068\085\097\121\099\047\110\121\097\103\047\121\097\056\085\121\048\103\080\121\080\052\110\121\068\043\110\110\110\111\050\121\097\084\082\116\122\056\069\116\122\043\085\121\068\085\097\116\068\056\081\121\097\057\080\121\068\103\072\121\080\099\121\121\097\056\085\121\048\103\080\116\104\047\054\116\119\077\050\121\080\052\110\121\068\043\110\048\048\056\056\121\080\111\081\121\104\084\081\121\116\043\072\121\099\047\110\121\097\056\085\121\080\099\121\121\054\111\106\110\110\111\099\056\086\097\119\056\075\113\083\118\103\068\071\050\077\118\103\050\112\117\113\104\057\082\051\075\047\082\090\089\051\084\101\100\051\082\090\084\051\047\109\083\051\082\090\085\051\082\051\075\047\082\090\089\051\084\101\100\051\082\090\084\051\099\049\075\051\043\107\097\086\097\111\104\057\043\075\057\047\082\119\085\051\099\049\075\051\043\107\097\057\047\109\083\051\082\049\098\043\082\081\083\043\043\075\057\047\082\119\085\051\043\053\055\057\082\049\083\057\082\106\089\047\084\101\100\051\099\049\075\051\043\107\097\086\097\115\104\057\084\073\085\057\082\119\085\051\103\117\084\043\099\104\085\043\082\081\083\043\099\082\057\043\099\074\083\051\082\087\057\043\043\054\100\057\099\086\108\047\051\117\086\086\097\119\121\118\111\097\116\119\116\047\121\110\070\057\116\099\077\105\116\118\070\084\121\068\047\087\116\104\047\054\116\119\077\050\116\119\116\047\121\110\070\057\048\048\056\049\116\104\070\089\121\118\111\122\121\099\047\110\121\097\056\085\104\047\043\075\057\047\082\119\085\051\082\087\057\047\099\117\085\057\047\109\083\051\103\112\087\043\052\048\083\043\103\117\084\043\082\122\103\043\082\106\085\057\099\049\075\051\043\107\097\057\082\081\083\043\099\082\057\043\043\054\100\057\099\086\108\047\051\117\098\052\117\061","\122\111\106\097\080\097\073\080\108\048\076\103\088\100\112\103\084\118\106\088\087\122\117\089\122\051\084\087\055\047\082\090\085\051\084\057\087\057\043\101\100\057\103\073\083\051\103\079\097\057\103\073\083\043\099\082\089\051\082\104\087\057\103\117\084\043\052\067\097\043\099\102\100\047\099\079\097\052\053\061";"\104\076\113\083\118\103\068\071\050\077\118\103\050\112\117\100";"\079\077\069\111\118\070\074\107\052\082\121\103\054\071\061\061","\043\082\074\108\090\086\061\061","\066\105\078\102\074\069\074\065\120\047\082\071\083\047\099\117\085\057\043\122\108\057\082\106\098\049\061\061";"\054\103\074\088\118\069\102\089\068\120\088\088\090\098\069\105\090\103\053\061";"\121\054\111\117\121\118\056\087\121\118\056\051\121\118\099\079\116\122\070\087";"\078\098\088\052\066\105\078\050\052\074\072\066","\114\077\072\103\118\098\068\105\051\053\072\056\049\049\061\061","\078\103\101\089\054\077\101\076\078\075\081\108\054\082\066\061";"\090\076\078\087\090\053\105\087\079\103\088\057\118\071\061\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\115\117\061","\072\047\043\116\080\111\117\086\122\117\061\061";"\090\077\101\076\118\120\081\112\054\076\072\107","\074\107\108\081\066\105\102\069\066\086\061\061","\118\077\074\084\079\082\118\103\049\075\088\049\054\077\069\121\118\120\122\061","\065\105\118\069\066\098\113\102\082\049\061\061","\049\066\086\061";"\066\070\108\087\090\075\078\112\054\077\069\115\090\107\121\108\054\082\066\061","\078\070\074\107\052\120\078\088\054\066\072\087\054\070\113\098\054\076\079\057","\090\077\101\076\118\120\081\055\068\120\086\061","\106\049\061\061","\065\070\121\112\054\077\088\083\099\071\061\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\065\049\061","\054\077\101\115\079\117\061\061";"\118\077\069\121";"\118\076\072\105\068\086\061\061","\119\071\061\061","\104\076\074\115\118\052\102\054\049\073\102\089\068\120\088\088\090\088\107\086\116\068\056\099\121\121\052\097\121\048\051\055\121\068\085\054\121\054\043\088\121\116\084\104\121\048\119\048\116\122\070\087\056\086\061\061","\066\105\078\102\066\088\078\102\074\074\078\106\066\088\074\051","\054\103\069\055\118\120\102\089\068\120\078\088\050\065\050\061","\066\105\078\102\074\069\074\065\120\047\043\122\108\057\082\106\098\043\082\082\075\043\084\072\100\071\061\061","\090\103\069\080\118\112\069\107\068\120\081\075\118\120\049\061";"\079\077\069\084\118\075\081\108\054\082\066\061","\090\076\078\108\054\103\049\061";"\066\070\074\107\052\077\074\108\054\053\069\055\054\076\074\057\079\117\061\061","\052\107\074\118\120\107\069\074\074\053\101\056\049\074\078\066\065\053\066\061";"\043\071\061\061","\065\070\121\050\118\082\069\070\118\049\061\061","\104\076\081\105\054\084\102\115\118\075\086\101\078\070\074\107\049\105\118\108\090\084\086\075\066\070\101\105\054\103\078\114\078\082\121\108\068\103\113\088\078\120\081\111\054\076\081\065\090\077\074\088\068\070\086\075\119\065\089\119\104\070\072\087\054\075\072\087\054\077\066\086\066\070\101\105\054\103\078\114\078\082\121\108\068\103\113\088\078\120\081\111\054\076\081\065\090\077\074\088\068\070\086\086\050\117\097\061";"\104\076\072\107\068\120\081\107\068\120\078\107\068\082\072\100","\056\075\113\083\118\103\068\071\050\077\118\103\050\112\112\080\103\099\065\098\057\097\054\075\089\110\087\075\057\121\067\075\087\104\100\075\075\122\073\075\103\097\065\080\100\118\065\103\089\121\120\103\089\104\065\088\083\116\067\098\057\116\120\097\108\116\100\088\084\085\083\088\098\122\106\088\088\080\076\087\087\122\115\097\087\121\075\080\108\048\115\088\083\116\067\098\057\116\120\080\086\122\075\103\084\116\075\098\087\099\112\097\080\097\073\088\088\080\076\075\103\097\065\103\089\104\065\087\087\122\115\075\084\099\075\075\098\122\054\097\086\068\115\098\057\081\100\103\088\116\112\103\088\068\083\087\087\122\069\109\090\086\061\061","\065\070\121\069\054\075\078\088\090\086\061\061","\065\077\101\075";"\090\103\069\080\118\112\122\076\079\077\069\111\118\070\074\107";"\066\098\074\050\065\107\069\053\120\105\081\102\052\066\049\061","";"\052\069\072\077\065\049\061\061";"\090\103\069\080\118\112\122\048\079\077\069\111\118\070\074\107";"\072\115\090\107";"\116\081\056\097";"\121\097\047\049\121\116\052\116\110\110\111\099";"\052\069\074\051\074\053\074\052";"\079\077\081\083";"\065\082\101\070\118\066\055\088\043\120\050\061";"\066\070\074\057\118\053\072\097\068\120\078\072\090\070\090\061";"\116\119\077\117\121\097\056\075\121\048\057\056\121\097\056\052","\066\098\074\077\066\098\074\065\052\069\101\066\049\074\081\073\078\074\078\065","\043\105\055\101";"\104\070\069\097\068\070\069\115\079\117\061\061","\116\068\056\081\121\104\084\055\121\121\057\057\121\085\056\073";"\121\054\056\077\116\122\043\085\121\068\085\097\121\068\084\054\121\054\057\116\121\080\111\089\116\122\077\050\121\104\084\099\121\121\057\048\121\068\082\115\121\121\085\053\121\080\099\101\121\100\051\074\116\118\084\114\121\068\084\120\121\099\116\106\110\110\111\050\121\054\103\070\121\104\116\079\121\085\111\108\121\080\052\047\121\068\082\088\121\068\085\097\121\104\070\090\121\080\070\108\050\043\051\117\086\065\104\075\100\068\075\098\087\068\076\075\087\099\110\083\086\122\122\119\056\057\082\103\086\057\099\043\075\051\052\048\083\043\103\090\086\051\084\103\086\043\084\073\085\057\082\119\085\051\082\122\103\047\082\110\057\057\082\057\083\047\047\109\083\051\082\069\089\047\103\120\100\043\099\055\080\051\103\117\084\043\103\108\057\043\082\072\089\047\082\106\100\047\051\117\086\086\097\119\114\077\072\103\118\083\117\071\118\103\068\071\050\051\043\066\089\043\052\116\083\098\069\105\079\077\108\087\052\077\074\089\090\051\082\090\085\051\084\067\098\051\084\108\083\051\099\120\055\057\047\109\083\051\084\103\086\043\099\081\080\047\084\108\083\051\099\081\084\047\082\119\085\051\099\082\087\043\099\115\088\043\043\054\057\051\082\087\057\043\082\054\089\051\103\099\087\057\047\109\083\051\099\081\086\051\052\110\080\043\082\106\100\047\052\110\080\043\052\101\087\047\043\066\085\051\043\113\057\047\052\109\087\051\052\048\084\047\103\079\097\057\043\099\108\051\082\057\083\047\099\119\084\057\099\082\087\043\099\115\088\043\082\119\085\051\052\101\075\051\099\106\098\057\082\069\080\043\099\081\080\047\084\108\083\051\103\068\075\047\082\122\088\071\097\119\122\047\099\054\087\047\099\072\097\057\052\048\084\047\103\079\097\057\043\099\108\073\108\048\043\073\083\098\057\104\100\097\080\097\073\103\084\099\114\097\097\068\115\075\103\097\065\088\084\085\083\098\087\118\115\088\098\122\076\075\080\110\117\119\104\070\072\108\090\076\049\111\122\073\108\048\043\073\108\109\090\086\061\061";"\121\054\047\100\116\104\070\089";"\049\076\081\088\068\120\078\088\065\082\069\083\090\103\109\061","\114\077\072\103\118\083\068\121\049\107\072\077\050\117\061\061","\052\107\074\118\120\105\072\066\065\105\102\102\074\069\078\102\049\107\089\061","\074\074\072\069\078\098\101\106\078\117\061\061","\065\066\069\051\049\049\061\061","\104\076\081\105\054\084\102\065\118\120\078\112\054\070\121\103\099\082\090\097\122\088\072\066\049\074\078\074\066\105\067\075\103\116\110\103\097\122\114\098\057\080\104\088\084\085\086\084\104\056\102\103\068\082\113\115\118\052\098\110\056\084\101\071\122\051\103\117\086\047\082\078\087\043\084\076\075\047\103\099\083\047\099\122\098\049\097\061","\118\077\074\115\068\071\061\061","\090\103\069\080\118\112\118\107\068\120\081\075\118\120\049\061","\078\070\069\055\118\066\118\087\054\075\078\122\099\082\079\097\054\077\088\075\099\073\078\065\054\082\069\089\054\117\061\061";"\065\066\101\082\078\066\108\069\049\066\113\104\078\074\088\065","\121\118\056\051\116\068\056\117","\068\103\101\115\090\115\053\061";"\121\100\051\074","\099\120\078\088\054\065\097\097\081\082\049\100\119\052\048\100\081\074\089\097\104\084\089\080\081\074\107\061","\066\070\069\070\118\082\078\050\068\120\072\107\074\077\069\111\118\070\074\107","\049\107\069\051\120\107\069\112\074\053\088\106\065\086\061\061","\052\077\074\108\054\053\108\088\054\073\102\065\118\120\078\107\099\082\121\075\078\075\081\108\054\082\066\061","\066\105\078\102\074\069\074\065\120\047\084\073\085\057\082\119\085\051\052\048\084\047\103\080\100\117\061\061","\074\082\121\080\079\053\108\108\090\107\081\105\118\103\118\056\043\074\102\089\068\120\088\088\090\086\061\061";"\068\075\074\107\079\077\101\057\074\070\088\098\079\077\086\061";"\068\103\101\115\090\115\050\061";"\066\098\105\066\074\117\061\061";"\054\070\113\098\079\103\069\089\079\082\066\061","\118\077\074\084\079\082\118\103\065\103\069\055\118\049\061\061","\121\068\070\106\121\068\085\080\121\080\052\110\121\068\043\110";"\068\082\072\107\099\120\118\088","\074\082\121\080\079\053\081\105\118\103\068\061";"\052\117\061\061","\066\105\078\102\074\069\074\065\120\047\099\122\103\051\082\090\057\057\082\049\083\043\043\075\089\117\061\061";"\114\073\104\083\086\081\053\061";"\079\077\074\048\079\117\061\061";"\066\098\108\050\074\117\061\061","\054\103\069\055\118\120\102\089\068\120\078\088\050\065\117\061";"\090\103\069\080\118\112\081\107\068\120\081\075\118\120\049\061";"\052\069\078\077\065\049\061\061","\066\053\069\051\078\066\113\114\049\107\101\051\078\098\088\073";"\116\104\070\089\121\118\111\122\121\099\047\110\121\097\056\085","\104\076\072\107\054\076\102\083\068\120\072\107\099\082\121\075";"\114\077\072\103\118\098\118\077\072\107\049\071\049\043\043\054\100\057\099\086\108\047\052\109\103\051\082\069\084\117\061\061";"\121\097\084\068\121\080\099\120\121\048\085\070\121\097\056\102\116\118\052\118\116\119\047\087\121\121\085\053\121\068\085\097\121\104\070\090\052\066\049\116","\068\120\078\107\068\082\072\100";"\050\049\061\061";"\079\070\088\071\118\049\061\061","\074\082\121\080\079\053\108\108\090\107\078\088\068\075\074\103\118\098\081\121\066\077\113\108\043\082\074\111","\066\098\074\077\066\098\074\065\052\069\101\081\065\088\072\049\078\066\072\066";"\066\105\078\102\074\069\074\065\120\107\105\106\066\098\074\122\078\066\069\050\049\088\074\066\074\053\101\051";"\099\120\072\112\054\077\069\115\090\070\088\083","\054\103\069\055\118\120\102\089\068\120\078\088\050\049\061\061","\066\105\078\102\074\069\074\065\120\107\081\050\049\066\072\104\065\053\088\065\074\117\061\061";"\121\100\119\110\121\121\099\120","\118\103\101\083\079\120\050\061";"\074\120\072\088\078\120\069\105\099\120\102\055\118\082\121\107\065\082\069\083\090\103\109\061","\052\066\121\082\074\069\088\049\078\074\101\120\078\066\069\049\065\107\121\072\049\066\088\051\052\053\069\051\078\117\061\061";"\090\077\069\111\079\073\098\097\081\082\049\080";"\052\053\078\077\065\049\061\061","\121\048\111\051","\074\077\069\084\066\077\069\057\118\082\113\050\054\070\072\108\079\077\088\087\054\086\061\061","\121\121\057\057\121\085\056\073\121\100\119\110\121\121\099\120\110\110\111\050\121\104\111\068\121\068\082\122\121\110\057\118\121\054\070\065\121\068\103\072\121\121\057\057\121\085\056\073\121\097\084\082\116\122\056\069\121\054\070\065\121\068\103\072\121\080\082\050\121\104\085\116\121\121\085\053\121\121\057\057\121\085\056\073\121\068\085\086\116\119\077\117\110\110\111\050\121\104\084\110\116\119\099\102\121\121\052\097\121\104\085\051\121\118\070\103\121\068\082\104\121\104\084\065\116\118\043\097\121\100\119\110\121\121\099\120\121\097\084\082\116\122\056\069\121\048\103\121\121\099\116\099\121\048\116\080\121\099\116\070\121\100\119\110\121\121\099\120\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\121\068\047\087\121\104\057\088\116\068\056\081\121\097\057\080\121\054\070\065\121\068\103\072\049\098\101\065\066\047\047\109\083\051\082\071\108\057\052\109\103\051\082\069\084\051\043\110\103\082\081\087\090\076\106\075\103\097\065\075\103\116\110\103\097\122\114\088\084\085\112\097\097\068\117\119\056\057\082\103\086\057\099\043\075\051\084\067\103\051\084\057\087\057\043\101\100\057\052\116\108\057\082\050\057\047\052\067\075\043\082\122\088\047\084\108\085\051\047\109\083\051\082\122\103\043\082\049\083\051\099\120\055\057\082\122\080\051\082\057\103\057\043\054\100\057\099\086\108\047\099\122\088\057\084\117\108\043\082\050\057\047\052\067\075\043\082\122\088\047\084\108\085\051\084\067\103\047\084\108\083\051\082\119\097\051\084\108\086\051\047\109\083\051\099\087\088\051\082\103\086\088\078\102\066\043\082\106\083\051\082\055\098\051\099\111\057\047\043\082\088\105\072\065\074\051\082\052\083\051\099\122\103\051\082\083\085\105\065\087\087\122\115\088\083\116\067\098\057\116\120\088\089\122\118\065\066\047\082\052\083\051\099\122\103\051\082\083\085\047\082\119\097\051\082\069\080\043\082\050\057\047\052\067\075\043\047\109\083\051\082\071\108\057\082\106\085\057\043\110\103\043\084\067\103\043\052\048\080\051\052\048\085\057\052\116\057\057\082\119\097\051\084\108\086\051\047\109\086\120\113\111";"\104\076\117\086\121\054\111\117\121\099\043\104\049\066\101\069\056\086\061\061";"\066\098\074\050\065\107\069\053\120\105\081\106\066\105\078\069\066\086\061\061";"\090\103\069\057\099\107\121\087","\068\103\101\115\090\115\098\061";"\054\082\069\107\068\070\086\061","\121\104\070\067\121\121\052\097\121\080\111\117\116\122\085\056\121\121\111\102\116\081\051\079\116\068\043\106\121\097\084\082\121\104\070\051\121\110\085\075\121\100\119\110\121\121\099\120\121\100\051\074\121\080\111\087\110\110\111\050\121\080\111\117\121\054\056\106\116\104\047\073\116\068\043\106\121\085\084\108\121\054\111\106\121\080\070\088\116\104\047\054\116\119\077\050\121\100\119\110\121\121\099\120\110\110\111\050\116\099\119\053\121\100\082\104\121\068\085\086\116\119\077\117\116\118\084\122\121\068\056\109\072\115\066\088\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\121\100\119\110\121\121\099\120\116\118\084\122\121\068\056\109\116\119\116\108\121\116\116\120\121\080\099\121\121\054\111\106\110\110\111\099\121\085\047\066\121\099\099\056\121\121\057\057\121\085\056\073\116\118\111\117\116\119\099\102\121\100\119\110\121\121\099\120\050\065\117\071\116\119\077\117\116\068\043\106\110\110\111\050\050\043\043\116\080\047\099\115\088\043\099\090\100\115\090\105\121\048\119\121\110\110\111\050\050\057\043\116\080\115\053\071\050\051\043\056\057\043\047\109\083\112\106\075\057\085\090\113\050\083\112\075\086\100\075\083\086\122\104\097\100\085\073\075\100\080\114\088\075\068\114\098\057\122\076\097\086\122\106\097\103\118\073\103\103\100\065\088\108\110\087\083\086\122\122\119\056\057\043\090\086\043\084\065\075\043\099\097\097\043\082\109\083\047\047\109\103\083\053\071\050\056\097\071\104\083\090\105\106\065\090\105\119\112\073\075\057\085\090\080\056\057\099\086\108\047\082\073\108\057\099\097\097\043\082\109\083\047\047\109\103\083\053\071\050\056\097\113\050\112\117\088\106\065\053\071\050\051\047\109\084\112\104\075\057\085\114\087\087\122\098\119\116\104\047\073\116\068\043\106\121\085\084\108\121\054\111\106\110\110\111\099\050\065\117\071\119\083\053\057\050\083\066\101\050\065\122\105\110\110\111\122\050\047\043\116\080\047\047\109\084\120\113\111\056\086\080\109\068\070\118\103\078\098\068\076\078\112\102\102\121\104\084\116\121\104\085\077\116\104\116\047\121\068\084\071\121\110\119\047\121\116\077\057\121\100\119\110\121\121\099\120\110\110\111\050\116\119\047\076\121\054\056\101\121\068\047\087\116\122\051\101\121\099\052\099\121\121\085\053\121\068\057\047\116\068\056\081\121\118\056\053\121\110\085\075\121\100\119\110\121\121\099\120\121\100\051\074\121\080\111\087\110\110\111\102\114\073\122\061","\054\082\121\108\050\065\122\115";"\090\103\074\107\079\120\081\057\122\117\061\061";"\054\103\074\088\118\053\069\105\090\103\069\081\118\117\061\061";"\074\120\072\088\066\076\102\088\054\077\113\078\079\082\074\105\118\074\079\080\054\103\078\087\079\071\061\061";"\090\103\074\089\068\120\078\080\079\103\074\066\054\071\061\061";"\068\070\113\108\090\076\072\080\068\071\061\061","\114\077\072\103\118\098\118\077\072\107\049\071\049\043\084\067\108\047\103\073\083\076\113\111","\122\111\050\083\122\047\099\056\085\051\043\099\108\051\082\057\083\047\052\101\083\043\043\101\100\057\099\110\097\043\052\116\108\084\071\086\116\119\047\076\121\068\084\086\116\118\103\098\121\104\084\072\121\121\052\097\121\121\085\053\121\099\116\106\104\051\043\066\085\051\099\079\080\043\082\122\103\047\082\110\057\057\084\102\083\051\052\048\103\057\082\057\083\111\053\083\122\111\050\083";"\121\054\043\103\121\116\043\110","\118\103\088\057\118\117\061\061";"\114\077\072\103\118\098\118\077\078\098\118\077\078\086\061\061","\043\105\074\071\122\077\078\087\079\070\121\101\106\065\053\071\050\112\105\110\074\120\117\086\079\120\102\101\043\107\078\087\079\070\048\086\118\077\101\076\054\075\107\101\050\083\117\071\106\120\055\053\054\076\079\057\122\073\074\071\114\049\061\061";"\121\054\043\103\116\104\070\089\072\112\120\088\057\085\068\061";"\049\070\069\057\074\120\072\088\049\082\072\107\099\082\101\057";"\068\076\081\088\068\120\078\088","\078\070\074\107\052\120\078\088\054\066\072\087\079\082\121\107";"\104\070\069\115\090\070\088\115\079\056\102\071\118\120\049\061","\066\053\113\102\082\066\074\052\120\105\081\102\052\066\078\114\052\066\049\061","\121\118\099\079\116\081\051\079","\090\076\102\088\054\077\113\081\118\117\061\061";"\049\070\101\055\054\082\069\057\118\053\055\088\043\120\050\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\065\086\061";"\052\053\074\102\065\069\101\065\074\053\069\066\074\074\072\114\078\098\088\052\066\105\078\066\049\074\081\073\078\074\049\061";"\078\070\074\107\074\120\072\108\068\103\113\088\074\070\069\107\118\120\122\061","\043\103\108\112\065\086\061\061";"\078\103\088\057\118\053\081\108\118\107\118\111\118\082\074\065\090\077\069\083\118\049\061\061";"\049\105\081\069\049\074\078\069\066\107\074\112\074\074\081\069";"\122\117\061\061";"\052\053\108\056\078\086\061\061";"\052\120\078\088\054\049\061\061";"\116\068\043\072\116\104\070\101\121\121\082\050\116\118\070\084","\099\077\074\108\054\077\074\111";"\049\098\069\066\074\053\113\069\078\105\081\106\074\066\121\053\066\071\061\061","\078\120\069\105\099\120\102\055\118\082\121\107\050\065\049\061";"\121\054\056\106\121\097\056\085\121\104\103\114\121\104\070\067\121\121\052\097\121\048\084\077\121\068\047\078\121\097\085\117\116\122\051\101","\052\074\102\050\049\071\061\061","\074\066\088\072\118\082\121\105\049\075\074\107\079\077\101\057\066\076\078\111\118\120\078\083\099\069\078\088\054\120\102\089\068\120\078\088";"\104\076\117\086\116\122\043\085\121\068\085\097\116\068\043\072\116\104\070\101\121\121\082\050\116\118\070\084\056\086\061\061";"\104\070\072\089\118\082\069\111\079\077\069\111\118\070\074\107";"\114\069\049\111\050\115\068\048\072\115\053\116\050\065\049\116\050\065\078\109\079\117\061\061","\121\097\085\117\116\122\051\101\121\116\070\081\121\110\085\075\116\068\056\081\121\097\057\080","\090\103\069\080\118\112\050\111\079\077\069\111\118\070\074\107";"\065\077\069\115\079\069\078\080\054\082\066\061";"\074\071\061\061","\049\120\074\107\054\107\072\087\054\082\081\108\079\069\118\108\054\073\074\088","\052\053\074\102\065\069\101\065\074\053\069\066\074\074\072\114\065\098\101\052\065\066\069\122\078\066\069\050";"\121\054\056\106\121\097\056\085","\104\071\061\061";"\090\103\074\107\068\082\088\089";"\078\070\074\107\049\070\101\057\079\077\069\080\054\103\074\111\052\120\078\088\054\066\072\087\054\070\113\098\054\076\079\057";"\054\103\074\048\079\073\102\087\090\071\061\061";"\074\053\101\049","\068\070\108\108\054\103\079\088\066\076\078\108\054\103\072\088","\066\117\061\061","\066\070\074\107\079\077\088\057\118\107\088\107\118\082\105\115","\068\070\069\057\052\082\121\107\118\120\081\111\079\120\102\107","\049\075\074\080\054\077\078\074\054\103\088\107\052\082\121\103\054\071\061\061";"\114\077\072\103\118\098\118\077\078\083\066\070\051\043\099\104\087\057\082\106\088\075\113\111","\049\075\074\107\079\077\101\057";"\050\047\043\116\080\111\117\086\122\117\061\061","\078\098\081\069\120\105\078\081\066\117\061\061";"\106\065\107\101\106\065\107\101\106\065\107\101\106\065\107\101\106\065\107\101\106\065\107\101\106\065\107\101\106\065\107\101";"\056\084\101\105\090\070\066\086\050\065\117\061";"\054\103\069\055\118\120\102\089\068\120\078\088\072\112\117\061","\116\104\043\114\116\118\085\106\051\086\061\061","\052\107\074\118\120\107\105\106\074\066\121\066";"\052\053\074\102\065\069\101\077\052\074\081\065\074\069\102\052\065\105\078\069\049\105\078\114\074\098\069\050\074\066\066\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\115\050\061","\090\077\074\111\068\070\074\057\079\117\061\061";"\118\075\081\108\054\082\066\061";"\049\070\113\108\090\076\072\056\079\082\118\103\065\077\088\115\079\117\061\061","\043\105\072\071\068\082\072\088\114\049\061\061","\054\103\069\055\118\120\102\089\068\120\078\088\050\083\098\061","\116\104\043\114\116\118\085\106\121\097\084\078","\081\082\049\088\118\056\074\098\106\111\074\098\106\111\074\098\106\111\074\098\106\111\074\098\106\111\074\098\106\071\061\061";"\116\068\056\099\121\121\052\097\121\048\051\055\121\068\085\054\121\054\043\088\121\116\084\104\121\048\119\048\116\122\070\087\116\054\111\086\121\085\056\073";"\099\077\074\108\054\073\078\097","\120\107\113\072\074\117\061\061";"\078\070\074\107\066\076\078\108\079\073\074\115\065\075\074\055\068\103\074\111","\079\077\069\084\068\075\078\057","\054\077\074\075\090\115\122\061","\099\077\088\107\066\103\074\083\079\117\061\061";"\078\070\074\107\066\103\069\080\118\069\074\057\099\120\049\061";"\078\069\081\074\052\066\049\061";"\066\070\074\107\049\070\101\057\118\103\088\075","\090\077\113\108\043\082\074\111\066\103\069\083\118\066\088\098";"\052\053\086\113\050\083\072\066\068\082\122\061";"\116\099\082\057\121\100\056\107";"\066\098\074\077\066\098\074\065\052\069\101\066\065\107\101\050\074\053\088\049";"\121\100\051\074\121\080\111\087\119\117\061\061","\116\122\070\087\121\100\056\107","\068\082\118\100";"\066\070\069\070\118\082\078\050\068\120\072\107\074\077\088\055\118\049\061\061";"\068\120\074\111\068\066\121\108\054\082\074\112\052\066\049\111","\116\068\056\081\121\097\057\080\121\118\099\079\121\100\056\107";"\121\118\043\090\116\119\077\117";"\065\074\117\111","\078\070\074\107\066\076\102\088\054\077\113\056\054\070\101\100\090\071\061\061";"\106\065\107\061";"\116\099\082\071\121\118\051\102\104\047\082\098\080\047\099\119\086\051\084\112\087\043\082\090\085\117\061\061","\078\070\074\107\049\082\072\107\079\082\069\089\066\070\072\108\054\077\066\061","\054\075\074\055\068\103\074\111","\054\082\069\048","\114\077\072\103\118\098\118\077\072\107\049\071\049\049\061\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\115\098\061";"\099\077\074\108\054\073\078\097\054\082\069\048","\049\088\074\077\078\088\101\120\049\074\078\112\052\117\061\061";"\066\098\074\112\049\066\113\112\120\107\108\069\049\066\113\065";"\079\070\055\088\043\049\061\061","\121\085\070\103\121\118\103\097";"\078\066\069\066\052\066\121\073\120\105\072\066\049\074\078\074\066\071\061\061";"\116\099\070\066\121\100\051\074\121\121\052\090\116\118\070\084\121\068\111\069","\052\053\074\102\065\069\101\065\074\053\069\066\074\074\072\114\049\066\101\069";"\066\098\069\050\074\056\105\054","\090\103\069\080\118\112\049\071\079\077\069\111\118\070\074\107";"\099\120\072\072\054\076\118\080\054\103\090\061","\116\054\057\078\121\118\056\072\121\068\070\074";"\052\066\121\082\074\069\088\049\078\074\101\120\078\066\069\049\065\107\048\061","\052\071\061\061";"\099\120\078\088\054\066\121\108\054\082\066\061";"\052\098\101\081\065\098\081\102\074\069\078\050\078\049\061\061","\065\077\069\115\079\069\074\115\068\082\081\089\118\066\118\087\054\070\078\081\118\117\061\061";"\066\105\078\102\074\069\074\065\120\047\082\067\085\047\103\117\075\047\099\082\087\043\099\115\088\049\061\061","\049\074\074\066\065\105\101\077\065\107\113\050\065\105\090\061","\054\103\088\089\122\077\105\115\118\071\061\061","\079\120\072\088\049\076\081\080\079\117\061\061","\104\076\117\086\121\068\077\090\121\085\070\084\116\104\043\114\116\118\085\106\121\097\084\078\056\086\061\061";"\078\117\061\061";"\066\105\078\102\074\069\074\065\120\047\043\104\086\057\103\073\083\057\103\055\088\051\099\115\088\043\084\072\100\047\099\071\055\117\061\061";"\066\070\074\107\074\073\081\108\068\070\055\080\054\103\090\061","\090\103\069\080\118\053\088\083\054\070\048\061";"\121\054\111\117\121\099\043\104\049\066\101\069","\121\110\085\115\121\068\082\104\116\081\056\097\121\048\116\054\121\080\099\087";"\118\077\074\089\068\120\088\066\099\082\105\088";"\118\103\101\083\079\120\072\107\068\120\081\075\118\120\049\061";"\120\070\081\108\090\070\074\122\118\082\069\089\049\082\105\087\079\082\121\107","\066\077\101\071\079\120\102\072\054\076\081\088\065\077\074\070\118\082\113\050\099\120\072\107\065\082\074\057\079\049\061\061","\078\069\081\081\065\098\055\081\065\098\079\114\066\105\078\102\074\069\074\065";"\090\073\081\088\079\103\088\087\079\120\072\049\054\076\079\088\090\086\061\061";"\121\054\047\100\116\068\056\114\116\104\070\089\121\118\111\122\121\099\047\110\121\097\056\085";"\090\076\102\088\054\077\113\065\090\077\113\080\079\117\061\061";"\114\077\118\103\118\103\068\071\050\112\117\071\052\082\121\070\068\082\113\080\118\056\102\083\068\082\113\089\122\073\078\087\122\053\079\088\079\069\072\071\118\082\113\089\052\082\121\103\054\111\102\103\054\076\122\086\090\076\102\088\054\077\113\081\078\112\097\086\114\073\122\061";"\066\098\069\050\074\056\105\079";"\072\083\068\061";"\043\053\101\103\090\071\061\061","\066\107\108\102\065\066\069\051";"\052\053\074\102\065\069\101\065\074\053\069\066\074\074\072\114\065\105\118\069\066\098\108\069\049\066\071\061";"\065\070\121\066\068\082\081\049\090\103\074\115\090\070\074\098";"\116\122\052\113\121\097\084\068\121\118\056\051\110\110\111\050\121\054\070\065\116\122\043\085\121\054\043\113\116\119\077\117\116\068\043\106\121\097\084\082\116\122\056\069\116\081\051\079\116\068\043\106\121\104\070\051\121\104\085\051\121\080\043\070\116\122\043\085\121\068\085\097\121\118\099\079\121\100\056\107\110\110\111\122\121\099\099\056\121\080\116\090\116\122\051\050\121\068\111\069\121\080\111\081\116\099\070\066\121\100\051\074\121\080\103\070\121\100\056\107\104\047\103\079\097\057\082\050\108\043\043\055\084\043\099\115\088\043\082\048\084\051\082\122\055\057\103\117\097\051\043\081\085\043\047\109\084\043\051\117\086\057\043\081\085\043\043\049\108\057\084\102\083\051\052\048\103\057\099\090\100\051\084\057\087\057\043\101\100\057\099\120\097\051\099\074\084\051\047\109\086\049\097\119\114\077\072\103\118\083\117\071\118\103\068\071\050\051\043\109\057\057\043\090\086\043\084\057\087\057\043\101\100\057\052\048\057\057\084\065\075\043\103\073\083\047\052\101\083\057\052\116\083\083\066\071\081\043\084\053\089\043\099\122\103\051\084\073\085\057\082\119\085\051\082\082\075\043\099\071\055\073\113\111","\054\103\069\055\118\120\102\089\068\120\078\088\050\115\049\061";"\078\070\074\107\065\120\088\122\118\082\069\089\049\082\105\087\079\082\121\107";"\116\118\084\111\121\085\070\084\121\080\085\056\121\116\099\110","\116\081\056\097\116\118\085\077\116\068\119\085\116\118\051\102\121\048\119\048\121\054\111\121\116\104\085\100\116\104\116\121","\066\070\074\107\078\077\074\084\079\082\079\066\118\120\108\107","\078\120\069\105\099\120\102\055\118\082\121\107\050\065\117\061";"\121\068\070\106\121\068\085\080\121\099\116\086\121\048\103\080";"\054\103\069\055\118\120\102\089\068\120\078\088\050\083\068\061","\068\070\101\055\054\082\069\057\118\053\055\088\043\049\061\061","\079\077\069\084\054\077\066\061","\121\048\057\056\121\080\085\107";"\099\082\049\061";"\121\068\116\114\121\118\111\071\116\104\070\089\121\118\111\122\121\121\085\053\121\080\043\070\121\068\056\118\110\110\111\050\116\068\043\073\121\121\052\097\121\054\047\100\116\068\056\114\116\104\070\089\121\118\111\122\121\080\099\121\121\054\111\106\110\110\111\050\121\054\057\116\116\119\116\057\121\104\084\072\116\119\099\102\121\068\057\047\116\068\056\081\121\085\070\098\116\099\077\121\110\110\111\050\121\121\111\104\116\104\082\076\121\080\070\088\116\118\070\043\121\104\085\116\121\054\043\088\121\080\051\072\121\104\070\090\048\048\056\056";"\054\103\069\055\118\120\102\089\068\120\078\088\050\065\066\061","\065\077\069\115\079\053\078\088\090\070\050\061","\104\076\081\105\054\084\102\077\054\070\113\089\054\076\079\074\054\103\088\107\119\056\079\071\054\077\069\121\118\120\122\075\119\049\061\061";"\074\098\069\050\074\066\074\114\121\104\047\079\121\118\077\101\116\119\077\117\116\068\043\106";"\121\048\057\056\116\068\043\051\116\099\070\066\121\100\051\074\116\122\070\087\121\100\056\107";"\056\084\101\105\090\070\066\086\050\065\050\061";"\121\097\077\084\121\099\052\072\121\097\103\117\121\080\111\081\121\110\111\116\121\121\111\102\121\068\056\109";"\104\076\081\105\054\084\102\074\052\066\074\111\090\103\101\111\090\107\118\111\068\082\105\088\051\098\072\089\118\082\069\111\119\056\098\119\104\076\081\105\054\084\102\065\118\120\078\112\074\103\069\111\119\056\079\065\054\076\074\057\118\069\101\069\054\103\069\084\054\077\074\065\078\088\086\075\104\073\072\103\043\056\098\110\056\084\101\111\079\082\048\086\066\070\074\107\049\105\118\108\090\084\086\075\066\070\101\105\054\103\078\114\078\082\121\108\068\103\113\088\078\120\081\111\054\076\081\065\090\077\074\088\068\070\086\075\104\073\072\103\043\056\098\110\056\086\061\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\115\090\061";"\068\103\074\103\054\076\081\088\065\082\069\083\090\103\109\061";"\116\054\057\078\121\080\057\090\121\121\047\115\121\118\111\083\121\085\116\067","\049\074\074\066\065\107\118\106\065\053\113\106\074\071\061\061","\049\070\069\115\079\069\072\071\118\082\113\089\049\075\088\051\068\082\105\088";"\079\073\088\071\118\049\061\061";"\052\066\121\082\074\069\088\049\078\074\109\111\052\069\079\069\049\074\102\106\065\086\061\061";"\068\103\101\115\090\115\053\071","\099\120\072\071\054\076\079\088\090\086\061\061";"\079\103\088\115\099\082\081\089\118\049\061\061";"\068\070\101\057\068\070\069\107";"\121\068\082\115\116\118\043\055\121\104\047\108\121\097\077\087\116\118\070\084\121\080\070\067";"\054\103\069\055\118\120\102\089\068\120\078\088\050\083\117\061";"\121\118\057\084\116\118\084\114";"\079\103\074\111\090\070\088\087\054\086\061\061";"\078\070\074\107\049\082\072\107\099\082\101\057\052\070\074\121","\066\105\078\102\074\069\074\065\120\107\069\074\074\053\101\081\065\088\078\069\066\088\081\074\066\069\049\061","\090\076\078\087\090\077\072\108\090\076\078\080\054\103\090\061";"\121\121\057\057\121\085\056\073","\090\103\069\080\118\112\050\115\079\077\069\111\118\070\074\107";"\049\103\069\083\099\107\078\111\054\076\102\066\118\082\105\071\054\077\069\107\118\049\061\061","\114\073\122\061","\120\075\081\108\099\082\049\097\081\082\049\100\119\052\049\061";"\072\115\090\105\072\049\061\061";"\078\098\122\061","\079\082\121\071\068\082\072\100";"\052\120\072\081\079\077\074\055\049\070\101\087\054\077\078\087\079\070\048\061","\068\103\101\115\090\115\068\061";"\052\120\072\077\054\076\081\083\118\066\069\106\078\049\061\061","\052\053\074\102\065\069\101\102\049\105\078\081\065\107\121\114\052\107\074\118\066\071\061\061";"\043\070\049\086\118\077\101\076\054\075\107\101\050\065\117\071\050\112\105\110\118\056\102\105\090\073\107\061","\116\081\056\097\116\118\085\077\116\068\119\085\116\118\051\102\121\048\119\048\121\054\111\121\116\054\111\086\121\085\056\073","\081\082\049\088\118\056\074\098\106\111\074\098\106\111\074\098\106\111\074\098\106\071\061\061";"\078\070\074\107\074\082\121\080\079\053\081\105\118\103\118\051\079\082\107\061","\121\054\056\077\116\068\056\081\121\097\057\080\116\118\084\114\121\068\047\104\121\068\085\086\121\068\082\088\121\104\111\068\121\068\082\122\121\100\119\110\121\121\099\120\121\100\084\069\121\068\070\074\110\110\111\050\121\116\111\089\121\104\084\117\121\080\043\070\116\118\043\107\121\099\047\121\121\104\057\082\121\104\057\089\121\104\047\079\121\097\085\098\110\110\111\102\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\121\099\082\101\121\118\047\116\121\068\047\104\121\110\057\122\121\104\085\051\121\104\084\072\121\097\056\074\065\105\065\098\057\097\068\089\121\068\047\087\121\104\057\088\121\054\056\077\116\118\111\117\116\119\099\102\121\048\103\121\121\068\084\100\121\068\082\115\121\048\082\075\121\121\085\053\116\118\084\114\121\068\047\104\121\068\085\086\121\068\082\088\121\104\111\068\121\068\082\122\121\068\084\120\116\119\077\097\110\110\111\050\121\104\111\099\121\116\111\089\121\104\084\117\121\080\043\070\116\118\043\107\116\099\103\113\121\080\082\083\121\118\119\050\121\100\119\110\121\121\099\120\110\110\111\102\056\086\100\088\100\110\075\098\057\097\110\103\075\121\112\098\057\080\087\075\084\054\075\088\100\080\100\088\075\104\100\088\098\122\083\087\087\122\115\088\083\116\100\080\075\122\112\097\080\097\073\103\089\100\087\075\088\080\114\075\084\054\075\088\100\080\100\098\057\122\112\098\057\119\100\103\084\081\054\097\086\122\120\088\108\116\112\098\057\119\100\080\103\081\067\088\083\048\087\088\083\116\067\098\057\116\120\098\087\054\067\075\088\119\083\103\075\119\115\103\088\100\075\088\087\122\067\087\087\122\115\075\108\104\054\088\098\122\110\098\057\122\076\097\080\097\073\088\084\110\110\080\086\122\075\098\057\122\100\080\075\099\104\075\103\097\065\088\108\099\083\088\103\116\104\103\089\100\087\075\088\080\114\098\057\081\065\088\084\110\110\080\086\122\075\075\103\116\110\103\097\122\114\098\087\081\083\088\108\068\083\083\086\122\122\119\121\085\047\066\121\099\099\056\074\053\069\078\121\068\047\050\121\099\070\049\121\100\119\110\121\121\099\120\121\097\084\068\121\099\051\100\074\051\082\052\083\069\072\065\074\051\043\099\108\051\099\120\055\057\082\117\103\043\047\109\083\051\103\117\084\043\099\104\085\074\072\065\121\118\119\050\121\097\084\068\121\099\051\100\121\104\111\068\121\068\082\122\110\110\111\050\121\048\052\070\121\118\056\051\116\068\056\081\121\097\057\080\121\068\047\085\121\100\119\110\121\121\099\120\121\104\111\068\121\068\082\122\121\068\084\120\116\119\077\097\114\073\122\061","\122\056\102\054";"\116\122\043\085\121\068\085\097\121\118\099\079\121\100\056\107","\121\097\052\122\121\118\056\122";"\065\066\074\053\052\074\074\072";"\121\097\077\084\121\099\052\072","\072\115\068\107";"\121\054\070\065\121\054\111\117\121\099\043\104\121\100\119\110\121\121\099\120\121\080\099\101\121\100\051\074\121\080\043\070\110\110\111\050\121\085\056\121\121\097\070\057\121\121\057\057\121\085\056\073\116\119\077\117\116\068\043\106\121\068\084\098\121\099\116\099\121\080\084\087\121\118\056\103\121\097\103\065\121\080\099\055\121\080\099\101\121\100\051\074\056\057\082\090\085\051\099\082\087\043\099\115\088\043\052\048\100\043\047\109\083\051\082\103\086\057\099\043\075\051\043\054\100\057\099\086\108\047\084\108\086\051\103\073\083\047\103\100\103\051\052\116\083\057\084\057\087\057\082\057\103\057\082\117\087\051\047\109\084\112\098\048\081\043\047\109\084\043\047\109\083\117\097\119\121\104\111\099\116\122\043\085\121\068\085\097\121\097\103\065\121\080\099\055\121\080\099\101\121\100\051\074\110\110\111\050\116\068\077\067\121\068\082\072\116\104\047\073\116\068\043\106\121\100\119\110\121\121\099\120\048\048\056\056\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\116\104\047\073\116\068\043\106\121\097\103\065\121\080\099\055\116\118\070\043\121\054\084\048\116\122\085\056\121\121\111\102\121\100\119\110\121\121\099\120\116\081\051\079\116\068\043\106\110\110\111\050\121\080\111\117\121\099\052\075\116\118\103\049\121\054\085\103\121\097\116\075\121\068\084\070\116\104\047\073\116\068\043\106\121\100\119\110\121\121\099\120\114\073\122\119\056\075\113\083\118\103\118\103\050\112\117\071\050\112\112\103\075\122\075\098\057\080\087\103\086\048\120\088\108\100\120\088\083\116\067\098\057\116\120\088\108\054\106\080\088\116\076\103\100\099\065\080\086\122\075\080\097\054\075\087\087\122\115\098\057\100\100\098\057\104\100\103\083\121\112\080\085\121\083\097\087\048\114\080\108\048\067\087\087\122\083\098\087\099\112\103\108\048\104\088\087\080\114\087\087\122\073\087\087\122\088\109\090\086\061\061","\104\049\061\061";"\078\070\074\107\049\082\072\107\099\082\101\057","\043\107\078\087\079\070\048\086\118\077\101\076\054\075\107\101\050\065\117\071\050\112\105\110\078\077\101\076\054\084\102\105\090\073\107\061","\049\070\074\111\079\053\118\111\068\082\105\088\050\086\061\061","\066\105\078\102\074\069\074\065\120\047\084\073\085\057\082\119\085\051\082\087\057\047\099\117\085\086\061\061","\049\070\113\087\090\070\074\056\079\120\078\107\054\070\048\061";"\099\077\074\108\118\117\061\061","\120\052\089\061";"\068\103\101\115\090\115\049\061";"\072\115\090\070\072\086\061\061";"\090\103\069\080\118\112\122\071\079\077\069\111\118\070\074\107";"\065\066\088\052\066\098\101\052\120\105\078\106\120\107\105\102\049\105\081\106";"\066\105\078\102\074\069\074\065\120\047\043\075\057\047\082\119\085\051\082\087\057\047\099\117\085\086\061\061","\066\105\078\102\074\069\074\065\120\047\052\048\057\047\082\119\085\051\082\109\086\051\099\117\085\086\061\061","\049\070\069\089\068\076\074\089\068\120\078\088\052\077\101\107\052\077\074\108\054\077\088\057\118\071\061\061","\121\118\057\084\116\118\084\114\116\119\077\117\116\068\043\106\110\110\111\099\050\065\117\071\081\049\061\061";"\078\066\069\066\052\066\121\073\120\105\118\102\065\069\074\069";"\121\118\099\079\121\068\085\086\116\068\056\114\116\122\070\087\121\100\056\107","\099\120\072\120\054\076\078\089\099\071\061\061","\121\104\084\104\116\099\103\089";"\068\070\101\055\099\070\074\121";"\121\121\111\114\116\119\084\117\121\080\111\087\110\110\111\099\121\121\057\047";"\121\118\056\112\121\110\051\082","\114\077\072\103\118\103\068\071\050\112\117\071\050\051\082\101\098\047\082\081\083\043\082\098\108\051\052\116\083\057\082\088\080\043\099\079\075\051\082\071\088\051\082\081\100\047\099\090\100\051\082\098\088\084\071\086\121\085\084\108\121\097\057\114\116\119\116\108\121\116\116\120\121\068\085\086\121\104\084\119\050\065\066\088\121\099\119\043\121\104\111\098\122\120\113\111";"\065\077\069\115\079\069\074\115\068\082\081\089\118\074\079\108\079\077\074\111\052\082\049\061","\050\117\061\061","\066\103\069\057\118\070\074\112\099\077\074\083\099\071\061\061","\049\076\074\111\090\070\066\061","\090\077\074\107";"\052\053\074\102\065\069\101\065\074\053\069\066\074\074\072\114\074\053\101\073\078\107\113\069\120\107\069\065\066\107\088\065\074\069\074\051\052\074\049\061","\074\053\101\106\065\069\078\081\066\117\061\061","\049\098\113\102\049\107\055\050\052\074\072\066";"\090\103\069\080\118\112\122\107\079\077\069\111\118\070\074\107";"\066\105\078\102\074\069\074\065\120\047\082\075\084\047\043\110\084\053\069\106\078\049\061\061";"\121\068\047\115\116\104\070\089\072\112\120\088\057\085\068\061";"\090\103\069\080\118\056\086\088\118\056\088\107\068\120\081\075\118\120\049\061","\090\076\078\108\090\075\078\108\079\073\078\108\068\070\089\061";"\121\116\043\110\121\068\085\097\121\080\056\090\121\110\052\084","\114\077\072\103\118\103\068\071\050\112\117\071\050\051\082\108\085\047\082\069\080\043\052\116\108\057\103\079\075\057\099\074\089\051\082\055\088\047\082\055\088\047\043\089\080\057\052\048\089\057\047\109\083\051\084\087\055\047\099\083\086\051\099\114\080\043\084\047\098\047\082\069\080\043\082\117\087\051\047\109\086\120\113\111";"\056\075\113\083\118\103\068\071\050\077\118\103\050\112\112\080\086\122\075\103\084\116\075\097\080\097\073\088\084\085\112\088\108\099\120\075\103\097\065\103\084\081\083\088\075\104\100\087\087\122\115\088\089\122\054\097\108\116\100\088\084\085\083\103\083\080\104\080\103\081\067\083\086\122\073\097\087\121\087\088\108\099\120\083\086\122\073\080\086\122\112\088\108\110\080\109\090\086\061\061","\049\074\074\066\065\107\081\102\074\069\078\050\078\049\061\061","\090\103\069\080\118\112\053\111\079\077\069\111\118\070\074\107";"\081\049\061\061";"\114\077\072\103\118\083\117\071\118\103\068\071\050\051\099\055\097\047\043\081\084\051\052\048\084\047\084\101\087\043\082\090\089\051\082\079\086\051\047\109\103\086\080\097\079\073\078\071\090\115\097\087\104\076\079\076\079\111\121\108\079\120\078\087\099\077\074\089\090\056\121\083\068\076\113\111";"\066\105\078\102\074\069\074\065\120\071\061\061","\082\117\061\061";"\066\098\088\073\052\069\049\061","\072\115\090\076","\054\103\069\055\118\120\102\089\068\120\078\088\050\083\050\061";"\121\068\077\090\121\085\070\084\121\116\043\110\121\068\085\097";"\074\082\121\080\079\053\078\088\068\075\074\103\118\086\061\061","\121\068\070\102\121\099\070\120\121\068\099\054\121\121\085\053\116\119\047\074\121\048\119\109";"\079\070\088\098\079\077\086\061","\066\071\061\061";"\065\070\121\069\090\070\072\108\090\077\074\049\090\103\074\115\090\070\074\098","\066\070\108\087\079\107\069\089\054\069\072\071\118\082\113\089\066\103\069\057\099\076\050\061";"\104\076\074\115\118\052\117\061","\054\103\069\055\118\120\102\089\068\120\078\088\050\115\066\061","\121\100\051\074\121\080\111\087\110\110\111\099","\121\068\077\090\121\085\070\084\121\080\099\101\121\100\051\074\122\117\061\061","\054\103\069\055\118\120\102\089\068\120\078\088\050\083\086\061";"\114\077\072\103\118\098\118\077\078\083\066\070\051\049\061\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\065\122\061";"\116\104\070\089\116\104\085\100\051\065\112\088\057\085\068\061";"\090\103\069\080\118\112\088\107\068\120\081\075\118\120\049\061";"\078\070\074\107\066\076\078\108\079\073\074\115\066\076\078\111\099\082\121\075","\116\104\052\109";"\068\103\069\115\118\074\081\108\054\103\079\088","\079\077\101\107\068\082\113\066\099\082\072\100\090\071\061\061","\066\098\074\077\066\098\074\065\052\069\101\112\074\066\078\069\120\105\078\106\065\107\113\066\052\074\117\061";"\121\104\084\072\121\048\077\055\116\122\070\087\121\100\056\107";"\065\098\069\072\078\074\102\050\049\074\078\069\066\105\101\065\052\053\101\120\078\066\121\069\065\066\088\069\066\071\061\061","\121\110\057\076\121\054\084\103";"\043\105\074\071\114\120\055\053\054\076\079\057\114\049\061\061";"\052\077\069\115\049\082\072\107\099\082\101\057\052\070\074\121","\104\076\117\086\121\068\077\090\121\085\070\084\049\066\101\069\056\086\061\061";"\079\077\069\111\118\070\074\107\079\077\069\111\118\070\074\107";"\054\082\069\083\090\103\109\061","\065\077\069\115\079\069\078\108\090\103\079\088\079\117\061\061";"\052\053\074\102\065\053\105\106\078\053\066\061","\090\076\078\108\079\073\074\115";"\054\103\069\055\118\120\102\089\068\120\078\088\051\117\061\061";"\121\121\057\057\121\085\056\073\121\104\085\052\121\068\085\097";"\052\082\121\103\054\115\122\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\115\053\061","\078\070\113\121\090\077\108\115";"\078\070\074\107\066\076\102\088\054\077\113\081\054\103\118\087","\043\105\072\071\068\082\072\088\114\120\055\053\054\076\079\057\122\077\078\087\079\070\121\101\106\065\053\071\050\112\117\101\043\107\078\087\079\070\048\086\079\120\102\101","\099\077\069\115\122\077\053\086\118\075\074\083\099\111\053\061";"\072\083\068\070","\090\076\078\087\090\077\069\107\079\077\069\083\099\071\061\061","\054\077\074\075\090\071\061\061","\066\105\078\102\074\069\074\065\120\107\078\069\049\088\074\073","\090\103\101\089\118\049\061\061","\050\112\117\071\050\117\061\061","\104\076\074\115\118\052\102\054\049\073\102\089\068\120\088\088\090\088\107\086\116\081\056\097\116\118\085\077\116\068\119\085\116\118\051\102\121\048\119\048\121\054\111\121\056\086\061\061","\116\068\056\081\121\097\057\080\116\122\043\085\121\068\085\097\121\068\085\086\121\068\082\088\121\097\084\068\121\118\111\116";"\104\076\081\105\054\084\102\074\052\066\074\111\090\103\101\111\090\107\118\111\068\082\105\088\051\098\072\089\118\082\069\111\119\056\098\119\104\076\081\105\054\084\102\065\118\120\078\112\074\103\069\111\119\056\079\065\054\076\074\057\118\069\101\069\054\103\069\084\054\077\074\069\090\075\081\087\090\088\072\071\118\082\074\083\099\056\090\089\090\070\118\048\119\065\089\119","\066\105\078\102\074\069\074\065\120\107\118\106\065\053\113\106\074\105\101\056\074\074\078\066\065\107\048\061";"\104\076\072\107\054\076\102\108\079\073\078\108\068\070\089\061";"\121\048\084\077\121\068\047\078";"\099\120\078\088\054\066\088\083\054\070\048\061";"\118\070\105\108\079\077\072\097";"\090\103\069\080\118\112\050\071\079\077\069\111\118\070\074\107","\072\057\043\116\080\111\117\086\122\117\061\061";"\052\120\072\053\090\103\088\057\099\070\088\057\118\071\061\061","\052\120\072\112\068\120\072\107\099\082\121\075\066\076\102\088\054\077\071\061";"\079\077\088\071";"\078\070\074\107\049\070\101\057\079\077\069\080\054\103\074\111\052\120\078\088\054\066\113\080\054\103\089\061","\090\076\074\084","\114\077\072\103\118\083\117\071\118\103\068\071\050\051\043\090\086\043\084\065\075\120\113\111","\054\103\069\055\118\120\102\089\068\120\078\088\050\083\049\061","\104\076\081\105\054\084\102\074\052\066\074\111\090\103\101\111\090\107\118\111\068\082\105\088\051\098\072\089\118\082\069\111\119\056\098\119\104\076\081\105\054\084\102\065\118\120\078\112\074\103\069\111\119\056\079\065\054\076\074\057\118\069\101\069\054\103\069\084\054\077\074\065\078\088\086\075\104\073\072\103\043\056\098\110\056\086\061\061","\066\105\078\102\074\069\074\065\120\047\082\119\097\051\103\117\075\047\084\072\100\047\099\071\055\117\061\061";"\090\103\069\080\118\112\053\070\079\077\069\111\118\070\074\107";"\114\069\049\111\050\115\068\048\072\083\086\116\050\065\049\116\050\065\078\109\079\117\061\061";"\116\104\056\112\116\119\047\074\110\110\111\099","\068\103\101\115\090\115\122\061","\043\105\074\071\122\077\078\087\079\070\121\101\106\065\050\071\050\112\117\101\043\105\074\071\122\073\074\071\114\120\055\052\099\082\079\097\079\056\102\098\054\076\079\057\114\120\055\074\090\056\102\098\054\076\079\057\114\065\107\111\050\112\117\101\043\105\074\071\122\073\074\071\114\120\055\052\099\082\079\097\079\056\102\105\090\073\107\061","\090\103\069\080\118\056\086\088\118\056\098\061";"\079\070\113\100";"\121\080\043\086","\066\105\102\069\065\053\113\081\066\107\101\104","\104\117\061\061";"\090\103\069\057\099\071\061\061","\054\103\069\055\118\120\102\089\068\120\078\088\065\082\069\048\078\077\088\115\079\077\069\057\068\070\066\061";"\116\118\084\067\121\054\056\066\121\068\070\108\121\068\099\087\121\121\085\053\121\099\116\079\121\054\085\065","\116\119\116\047\121\110\070\057";"\066\105\078\102\074\069\074\065\120\047\082\122\103\047\082\110\057\057\103\068\075\047\082\122\088\047\082\057\083\071\061\061","\066\053\069\051\078\066\113\122\078\066\088\073\052\069\049\061","\114\077\072\103\118\103\068\071\050\112\117\071\050\051\084\067\108\047\103\073\083\047\099\081\098\047\099\082\100\049\061\061","\068\070\069\115\079\077\088\057\118\103\109\061","\121\097\116\075\121\068\084\070";"\099\077\069\115\078\077\074\084\079\082\118\103";"\114\049\061\061","\056\075\113\083\118\103\068\071\050\077\118\103\050\112\112\080\103\099\065\098\057\097\054\075\089\110\087\075\057\121\067\075\087\104\100\075\075\122\073\075\103\097\065\080\097\121\067\075\084\099\075\088\083\116\067\098\057\116\120\097\108\116\100\088\084\085\083\088\098\122\106\088\088\080\076\087\087\122\115\097\087\121\075\080\108\048\115\088\083\116\067\098\057\116\120\080\086\122\075\103\084\116\075\098\087\099\112\097\080\097\073\088\098\122\106\075\103\097\065\080\097\121\067\075\084\099\088\109\090\086\061\061","\054\103\069\055\118\120\102\089\068\120\078\088\050\083\066\061","\116\068\056\112\121\118\077\101\116\104\043\114\116\118\085\106","\066\105\078\102\074\069\074\065\120\047\082\067\085\047\103\117\075\047\084\101\100\051\082\090\084\117\061\061";"\054\077\069\057\118\076\074\108\118\070\066\061","\078\077\101\102\068\076\078\080\054\070\121\081\118\077\113\088","\066\105\078\102\074\069\074\065\120\047\043\054\100\057\099\086\108\047\052\116\098\057\082\119\085\117\061\061","\116\122\043\085\121\068\085\097\116\118\070\084\121\068\111\069","\043\105\081\080\118\070\108\107\122\077\078\087\079\070\121\101\106\065\053\071\050\112\117\101\043\105\081\080\118\070\108\107\122\073\074\071\114\049\061\061","\116\122\043\085\121\068\085\097\121\104\084\104\116\099\103\089","\065\082\069\100\118\074\102\080\043\077\074\089\074\077\088\055\118\049\061\061","\121\080\103\070\121\110\085\084\121\118\111\083\121\097\103\117","\090\103\069\080\118\112\079\107\068\120\081\075\118\120\049\061","\114\077\072\103\118\103\068\071\050\112\117\071\050\051\099\099\086\057\082\102\075\073\113\111","\066\098\074\065\049\105\074\052\052\074\078\114\052\107\074\118","\122\071\061\061","\079\077\088\055\118\049\061\061";"\090\103\074\089\068\120\078\080\079\103\074\049\054\070\088\057\079\117\061\061","\066\070\074\107\078\103\101\089\054\077\101\076\074\077\074\048\079\117\061\061","\049\070\069\089\068\076\074\089\068\120\078\088\052\077\074\108\054\077\088\057\118\071\061\061";"\051\066\122\107\052\103\080\073\050\103\055\076\051\069\090\061";"\079\077\101\087\054\073\078\080\090\069\078\080\079\077\113\088","\118\103\101\057\079\073\072\107\090\103\088\057\118\071\061\061";"\049\107\074\051\074\053\074\052","\065\076\102\107\099\082\101\057\090\107\081\108\090\070\074\112\099\077\074\083\099\107\081\105\079\073\078\087\054\088\078\088\054\120\102\089\068\120\078\088","\068\070\113\108\090\076\072\081\118\117\061\061";"\049\107\108\069\049\107\055\114\066\069\081\106\078\098\088\050\078\074\050\061";"\116\104\070\089\121\118\111\122";"\066\098\074\050\065\107\069\053\120\105\074\081";"\052\053\074\102\065\069\101\072\065\107\078\069\066\071\061\061","\066\105\078\106\066\053\118\106\065\053\113\106\074\071\061\061";"\068\070\108\088\090\076\049\061";"\121\054\116\076","\066\105\078\102\074\069\074\065\120\105\081\069\066\107\072\074\066\098\088\066","\121\097\084\068\121\118\111\116\116\068\056\081\121\097\057\080";"\078\070\074\107\066\076\078\108\079\073\074\115","\090\103\074\071\118\082\069\107\079\077\088\055\118\049\061\061","\078\053\074\056\074\066\079\065","\049\076\081\088\068\120\078\088\074\082\121\080\079\053\105\088\054\075\066\061","\065\082\101\098\118\066\113\080\090\076\049\061";"\090\103\069\080\118\112\074\107\068\120\081\075\118\120\049\061","\065\076\118\088\090\098\108\088\068\082\113\082\068\082\113\105\118\049\061\061","\051\084\117\061";"\074\076\081\087\054\103\090\086\099\070\074\121\122\117\061\061","\090\103\069\080\118\112\122\113\079\077\069\111\118\070\074\107","\043\105\081\080\118\070\108\107\122\077\078\087\079\070\121\101\106\065\122\105\050\112\105\110\066\103\088\075\099\073\049\086\079\120\102\101";"\078\077\088\115\118\082\069\115\118\049\061\061","\121\118\043\078\116\122\070\087","\116\099\082\071\121\118\051\102\104\047\082\098\080\047\099\119\086\051\084\112\087\043\084\073\085\057\082\119\085\051\082\109\086\051\082\049\100\071\061\061","\121\121\057\057\121\085\056\073\110\110\111\099";"\121\104\070\067\121\121\052\097\121\080\111\117\116\104\047\073\116\068\043\106\121\085\084\108\121\054\111\106\121\118\119\050\116\099\057\068\116\081\051\079\116\122\056\120\121\080\070\088\116\104\047\054\116\119\077\050\121\100\119\110\121\121\099\120\110\110\111\050\116\068\056\056\121\118\056\122\121\121\047\055\121\054\103\115\121\054\047\100\121\097\084\068\121\080\099\120\110\110\111\050\116\099\119\053\121\100\082\104\121\068\085\086\116\119\077\117\116\118\084\122\121\068\056\109\050\065\122\105\081\049\097\119\114\077\072\103\118\083\117\071\118\103\068\071\050\051\099\086\108\047\082\073\108\057\099\097\097\043\082\109\083\047\099\111\057\047\043\082\088\047\084\057\097\043\043\057\088\047\103\068\084\051\082\117\087\112\053\111\072\052\074\109\090\086\061\061";"\065\070\121\053\090\103\069\075\066\076\078\108\090\075\049\061";"\121\068\070\106\121\068\085\080\121\080\052\110\121\068\043\110\110\110\111\050\121\068\070\106\121\068\085\080\116\118\084\114\121\068\047\104\121\118\111\097\121\097\084\068\121\080\099\120\121\080\043\070\116\104\047\054\116\119\077\050\121\080\052\110\121\068\043\110\110\110\111\050\121\068\047\085\116\122\051\101\116\068\056\081\121\097\057\080\116\118\084\114\121\068\047\104";"\054\077\074\070\118\082\071\061";"\118\103\069\115\079\069\072\071\118\082\113\089","\090\103\069\080\118\112\122\105\079\077\069\111\118\070\074\107","\068\070\050\113\050\083\050\061","\121\068\099\054\116\099\103\089";"\079\120\072\088\078\120\081\111\054\076\122\061";"\118\103\101\111\054\082\069\107","\116\122\077\050\121\104\084\099\121\048\084\077\121\068\047\078\121\097\085\117\116\122\051\101\121\068\070\108\049\107\065\080\108\048\100\103\088\104\048\089\122\051\082\076\080\043\043\097\084\047\099\081\084\047\082\088\088\111\067\080\080\054\112\088\098\048\053\087\121\116\043\072\121\080\043\106\121\097\085\117\116\122\051\101\082\047\082\069\087\043\052\116\057\057\084\108\086\051\099\117\080\047\043\104\086\057\099\117\098\084\071\086\121\054\043\097\116\099\070\066\121\048\057\056\121\080\085\107\120\043\051\117\086\086\097\119\114\077\072\103\118\083\117\071\118\103\068\071\050\051\099\055\080\051\103\117\084\043\103\108\057\043\052\048\057\057\099\073\098\057\052\116\057\057\103\117\084\043\099\104\085\052\115\098\057\122\076\103\055\099\100\097\055\104\075\098\057\110\087\098\087\118\120\075\084\122\054\088\083\121\073\103\084\097\112\097\086\110\076\087\087\122\069\109\090\086\061\061","\066\053\069\050\049\066\078\081\065\086\061\061","\090\077\069\111\079\073\098\107\079\077\069\111\118\070\074\107";"\052\077\069\115\082\074\088\056\079\082\118\103","\099\120\078\088\054\120\050\061","\078\098\088\051\078\069\078\102\066\098\079\069\074\053\105\106\078\053\066\061";"\066\105\078\102\074\069\074\065\120\047\052\048\083\043\043\102\100\043\084\072\100\047\099\071\055\117\061\061","\065\077\088\084\052\077\074\108\054\053\072\087\054\082\107\055\072\056\048\071","\052\107\074\118\120\105\072\066\065\105\102\077\065\107\113\050\065\105\090\061","\054\082\053\113\050\083\050\061","\074\082\121\080\079\053\108\108\090\107\081\105\118\103\068\061";"\054\103\069\055\118\120\102\089\068\120\078\088","\104\076\072\107\054\076\102\083\068\120\072\107\099\082\121\075\056\086\061\061";"\068\070\101\055\054\082\069\057\118\117\061\061","\116\119\116\047\121\110\070\057\121\118\070\103\121\068\082\104\121\104\111\068\121\068\082\122\121\100\119\110\121\121\099\120\104\051\082\079\080\057\082\069\084\047\084\108\086\051\103\073\083\047\052\101\083\057\052\116\083\057\084\057\087\057\082\057\103\057\082\117\087\051\052\109\103\051\082\069\084\051\099\111\057\047\043\082\088\047\082\079\080\057\082\069\084\071\107\119\121\118\070\103\121\068\082\104\121\054\047\069\116\099\077\110\116\068\056\099\116\104\047\073\121\118\057\084\116\118\084\114\121\085\077\077\121\080\116\070\116\119\116\047\121\110\070\057\048\048\056\056\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\121\080\111\089\116\068\056\081\116\099\077\121\116\099\057\068\121\104\085\051\121\068\082\097\121\118\057\084\121\100\119\110\121\121\099\120\110\110\111\050\121\054\070\065\121\118\070\103\121\068\082\104\116\119\077\117\116\068\043\106\121\104\070\051\121\104\085\051\116\119\116\047\121\099\116\099\121\068\056\109\110\110\111\050\121\068\070\115\121\104\070\067\121\068\082\070\121\104\057\082\116\122\077\050\121\104\084\099\116\119\077\117\116\068\043\106\121\080\057\107\121\104\070\051\121\104\116\079\121\048\052\070\121\104\111\068\121\068\082\122\121\100\119\110\121\121\099\120\121\118\070\103\121\068\082\104\114\073\122\061";"\066\105\078\102\074\069\074\065\120\107\069\074\074\053\101\077\065\107\113\050\065\105\090\061";"\066\077\101\071\079\120\102\077\054\070\101\098\065\077\088\115\079\053\105\088\054\075\066\061","\104\076\072\107\068\120\081\107\068\120\078\107\068\082\072\100\056\086\061\061";"\052\077\069\115\082\074\088\053\118\082\081\105\118\103\068\061";"\065\098\069\072\078\074\102\050\049\074\078\069\066\105\101\072\049\074\108\053\052\074\072\066\049\066\121\112\078\049\061\061","\065\082\069\075\099\082\050\061","\049\070\069\057\065\082\101\070\118\074\072\071\118\082\113\089","\074\074\102\053\049\074\078\069\120\107\072\050\074\074\072\066\078\074\081\065","\090\103\069\080\118\112\053\115\079\077\069\111\118\070\074\107";"\054\103\069\055\118\049\061\061";"\120\065\107\061","\090\103\069\080\118\112\050\107\079\077\069\111\118\070\074\107";"\078\070\074\107\049\070\101\057\079\077\069\080\054\103\074\111\065\075\074\055\066\070\113\087\079\073\050\061";"\104\076\117\086\121\054\111\117\121\099\043\104\121\068\070\106\121\068\085\080\121\097\084\078\056\086\061\061";"\121\054\070\065\121\068\103\072\121\100\051\074\121\080\111\087\121\054\111\116\121\054\085\103\051\084\117\061";"\090\103\069\080\118\112\050\105\079\077\069\111\118\070\074\107","\074\103\074\097\099\082\072\089\118\049\061\061";"\114\069\049\061";"\049\066\113\050\120\107\108\069\049\066\113\065";"\043\105\081\102\065\069\049\086\118\077\101\076\054\075\105\110\082\076\105\110\066\098\069\050\074\056\102\105\090\073\107\061","\052\053\074\102\065\069\101\065\074\053\069\066\074\074\072\114\066\053\069\074\066\107\066\061","\065\077\088\084\052\077\074\108\054\053\072\087\054\082\107\061";"\078\070\074\107\074\120\072\108\068\103\113\088\066\076\102\088\054\077\113\081\118\117\061\061";"\081\120\053\061","\065\070\121\069\118\077\088\107\078\103\101\083\079\120\072\073\068\082\088\057\118\082\049\061","\052\120\072\081\054\088\072\071\118\082\113\089\049\103\113\108\068\070\055\050\099\120\072\107","\054\103\069\055\118\120\102\089\068\120\078\088\050\083\090\061";"\121\100\084\069\116\118\103\098\121\121\057\057\121\085\056\073";"\049\070\108\088\068\070\055\056\079\120\078\107\054\070\048\061","\118\082\078\075\118\066\118\080\054\077\066\061","\090\076\102\088\054\077\113\066\099\082\105\088";"\066\105\078\102\074\069\074\065\120\047\082\120\075\051\084\108\086\051\043\122\108\057\082\106\098\049\061\061","\116\122\052\113\121\097\084\068\121\118\056\051\110\110\111\050\121\085\056\121\121\097\070\057\116\119\116\047\121\099\116\099\116\119\077\117\116\068\043\106\116\122\043\085\121\068\085\097\121\118\056\112\116\118\070\084\121\068\111\069\121\116\070\081\116\099\051\114\121\048\103\080\110\110\111\050\121\104\084\110\116\119\099\102\121\080\084\087\121\100\051\074\121\054\084\122\116\099\070\066\121\100\051\074\121\068\084\070\116\068\056\086\116\118\070\084\121\068\111\069\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\121\110\111\116\121\121\111\102\116\119\116\047\121\110\070\057\121\104\084\116\116\081\051\079\116\068\043\106\121\104\070\051\121\104\085\051\072\065\117\088\116\122\052\113\121\097\084\068\116\122\043\085\121\068\085\097\121\118\099\079\121\100\056\107\114\073\122\061";"\079\077\101\071\054\077\074\103\079\069\086\061";"\074\107\069\052\066\098\088\106\066\086\061\061";"\068\082\055\088\043\049\061\061","\090\076\102\088\054\077\113\051\068\082\105\088";"\065\077\088\084\066\103\069\057\118\070\074\112\099\077\074\083\099\111\107\115\104\083\117\061";"\074\077\069\111\118\070\074\107\052\082\121\103\054\071\061\061","\072\051\043\116\080\111\117\086\122\117\061\061";"\066\105\078\102\074\069\074\065\120\047\084\073\085\057\082\119\085\051\043\056\057\051\082\109\057\049\061\061";"\116\068\043\051\116\099\070\066\121\100\051\074\116\122\070\087\121\100\056\107\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\116\122\070\087\121\100\056\107\121\068\047\087\121\104\057\088\121\099\052\099\116\068\056\081\110\110\111\050\121\054\056\077\121\097\111\081\121\048\082\075\121\104\084\104\116\118\070\084\116\099\077\116\121\054\085\106\121\104\111\068\121\068\082\122\121\104\070\067\121\121\052\097\110\110\111\099\056\083\053\057\122\051\052\048\083\043\043\102\100\043\084\072\100\047\099\071\055\117\097\111\104\084\112\088\084\085\112\080\086\081\067\097\083\099\067\103\089\104\049\119\050\111\048\086\121\048\057\056\116\068\043\051\116\099\070\066\121\100\051\074\116\122\070\087\121\100\056\107\110\110\111\102\114\073\122\061";"\121\068\077\090\121\085\070\084\116\104\043\114\116\118\085\106";"\043\105\081\080\118\070\108\107\122\077\078\087\079\070\121\101\106\065\066\071\050\112\105\110\066\103\088\075\099\073\049\086\079\120\102\101";"\121\054\070\065\116\122\043\085\121\054\043\113\116\119\077\117\116\068\043\106\121\068\070\113\121\080\111\116\121\080\043\070\110\110\111\050\116\122\043\085\121\068\085\097\121\118\056\112\121\110\051\082\121\097\084\082\116\122\056\069\121\118\099\079\121\110\085\084\082\047\043\089\080\057\099\082\108\047\099\111\057\047\043\082\088\047\084\072\100\047\099\071\055\069\076\087\087\122\083\075\087\104\100\075\075\122\073\097\097\068\112\080\108\048\067\097\087\048\114\098\087\068\110\098\057\097\048\115\072\052\120\087\087\122\098\061","\050\112\053\111\050\115\049\105\072\083\090\048\051\052\089\087\049\066\081\112\078\053\074\077\078\107\108\081\052\098\055\050\065\066\121\106\066\069\069\052\066\105\078\074\074\088\079\068\082\074\080\108\068\103\072\098\118\082\118\075\099\077\088\085\099\070\113\055\054\103\101\071\090\120\081\115\079\073\074\070\079\076\108\121\043\086\061\061";"\078\070\074\107\074\082\121\080\079\053\078\088\068\075\074\103\118\088\078\121\090\077\074\051\079\082\107\061","\116\104\043\114\116\118\085\106\110\110\111\099\121\068\077\090\121\085\070\084\116\104\043\114\116\118\085\106","\074\074\072\069\074\107\069\066\078\074\122\061","\121\068\084\054\121\054\057\116\121\097\116\075\121\068\084\070\121\099\116\106";"\066\069\081\106\074\053\074\112\074\053\113\081\066\105\049\061";"\078\077\074\084\079\082\079\115\122\073\072\108\079\103\074\098\104\086\061\061","\079\077\069\111\118\070\074\107\052\070\074\121","\049\070\074\111\079\053\072\087\054\077\101\111\078\075\081\108\054\082\066\061","\090\077\101\076\118\120\122\061";"\052\082\121\103\054\105\102\108\054\103\074\089","\114\077\072\103\118\083\117\071\118\103\068\071\050\051\084\073\085\057\082\119\085\051\082\048\100\057\052\101\097\051\099\051\098\057\099\122\103\051\082\090\057\084\067\097\087\121\087\088\108\099\120\103\084\081\083\088\075\104\097\087\116\068\056\117\121\068\043\116\121\097\084\068\121\118\111\116\110\110\111\050\121\121\052\113\121\104\085\051\121\080\085\107\116\118\057\085\121\099\047\121\121\097\084\068\121\118\111\116\121\097\116\075\121\068\084\070\121\104\084\088\121\085\056\109\110\110\111\050\121\099\116\121\121\080\084\065\116\119\119\100\121\104\084\047\121\097\085\088\110\110\111\050\121\068\084\073\121\068\057\067\121\118\111\097\121\097\084\068\121\118\111\116\121\097\111\056\121\080\111\116\110\110\111\102\110\110\111\102\110\110\111\102\114\073\122\061","\066\103\074\083\068\082\113\083\049\082\072\107\099\082\101\057\052\077\074\108\054\053\069\055\054\076\074\057\079\117\061\061";"\066\105\078\102\074\069\074\065\120\105\072\122\065\105\079\081\065\098\118\106\066\053\069\051\078\066\071\061","\068\120\074\111\068\074\081\066","\116\068\056\081\121\097\057\080\121\068\085\086\121\068\082\088\121\097\084\068\121\118\111\116";"\104\086\061\061";"\068\103\101\115\090\115\066\061","\066\077\069\057\118\082\113\081\079\077\074\055\090\071\061\061";"\116\122\077\050\121\104\084\099\121\099\116\106","\054\082\107\113\050\083\050\061","\121\097\103\065\121\054\111\117\116\118\084\114\121\104\111\072\121\097\116\075\121\068\084\070\121\068\085\114\116\122\051\101\110\110\111\099\116\122\043\085\121\068\085\097\116\104\043\114\116\118\085\106\104\047\082\102\075\051\099\055\097\057\084\076\075\047\103\099\083\111\067\088\083\068\067\088\084\085\075\103\088\104\087\088\108\110\089\087\116\104\043\114\116\118\085\106\116\068\056\112\121\118\077\101\122\051\043\055\084\043\047\109\083\051\103\117\103\057\084\067\108\047\103\068\075\047\052\109\083\052\067\088\103\116\104\080\103\081\109\087\121\116\043\102\121\099\047\077\121\068\047\078\116\068\056\102\121\118\077\101\121\104\057\098\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\104\076\117\086\116\122\043\085\121\068\085\097\116\104\043\114\116\118\085\106\122\117\097\087\090\056\112\088\086\118\115\103\100\099\104\097\055\121\067\080\103\097\109\119\104\076\117\086\121\068\070\106\121\068\085\080\121\080\052\110\121\068\043\110\056\084\101\071\122\051\084\076\075\047\103\099\083\047\103\117\086\047\082\078\087\120\113\111","\066\076\102\088\054\077\113\078\079\082\074\105\118\074\079\080\054\103\078\087\079\071\061\061";"\065\077\074\103\079\053\081\105\079\073\078\087\054\086\061\061","\052\053\074\102\065\069\101\102\074\074\078\106\120\105\118\102\065\069\074\069","\066\069\081\081\078\074\072\066","\078\120\069\105\099\120\102\055\118\082\121\107\050\065\050\061";"\054\103\088\089","\056\084\101\105\090\070\066\086\072\117\061\061","\099\070\074\121","\116\122\043\085\121\068\085\097\121\097\116\052\121\097\084\068\121\118\111\116","\079\077\101\087\054\073\078\080\090\069\078\088\043\073\049\061","\118\103\122\061","\121\116\043\110\121\068\085\097\121\099\047\110\121\097\056\085","\121\099\099\056\121\080\116\090\116\068\056\081\121\097\057\080\110\110\111\050\121\054\056\106\121\097\056\085\121\104\103\114\121\104\070\067\121\121\052\097\121\048\084\077\121\068\047\078\121\097\085\117\116\122\051\101\110\110\111\050\121\085\047\066\121\099\099\056\121\097\103\065\121\054\056\106\121\080\111\089\104\047\103\099\083\047\099\090\057\057\099\090\100\056\067\103\075\119\083\103\097\099\075\075\100\068\075\087\087\122\115\098\057\122\076\080\086\122\075\103\084\116\075\103\100\099\065\080\086\122\075\080\097\054\075\088\084\081\075\088\083\116\100\103\075\122\075\080\085\100\114\080\085\048\120\075\057\085\079\056\065\105\072\065\121\097\103\072\116\122\043\085\121\068\085\097\121\054\111\117\121\118\056\087\121\048\084\077\121\068\047\078\121\097\085\117\116\122\051\101\048\048\056\056";"\078\070\074\107\066\076\102\088\054\077\113\112\054\070\101\089\118\077\101\076\054\088\078\080\054\082\066\061","\078\070\074\107\065\075\074\055\068\103\074\111\074\077\069\111\118\070\074\107\090\071\061\061";"\052\077\074\108\054\053\081\105\079\073\078\087\054\075\050\061";"\054\103\069\055\118\120\102\089\068\120\078\088\051\049\061\061";"\068\070\108\108\090\086\061\061";"\114\077\072\103\118\098\050\076\051\066\050\070\078\049\061\061","\079\077\088\071\074\077\088\107\054\077\066\061";"\090\103\069\080\118\112\053\071\079\077\069\111\118\070\074\107","\068\103\101\115\090\115\090\061","\052\107\074\118\120\107\080\106\052\066\121\056\049\074\078\066\065\053\066\061","\074\074\102\053\049\074\078\069\120\107\069\073\078\105\081\106","\054\103\069\055\118\120\102\089\068\120\078\088\050\115\122\061","\121\097\070\074\116\122\116\076\121\068\084\071\116\118\052\118\116\119\047\087\051\086\061\061","\066\105\078\102\065\098\078\114\052\053\074\102\065\069\101\065\066\053\074\050\065\069\050\061","\065\082\069\100\118\066\105\087\079\103\074\049\099\120\108\088\054\117\061\061";"\090\103\069\080\118\112\053\105\079\077\069\111\118\070\074\107","\054\103\069\055\118\120\102\089\068\120\078\088\050\086\061\061","\120\076\102\088\090\103\072\088\054\075\049\061","\065\053\074\077\074\117\061\061";"\090\103\069\080\118\112\053\121\079\077\069\111\118\070\074\107";"\072\115\068\070\072\086\061\061";"\068\070\101\057\118\103\088\111\054\049\061\061";"\065\070\121\053\090\103\069\075\066\076\078\087\090\117\061\061","\121\100\051\074\121\080\111\087";"\121\085\056\073\121\068\043\077","\054\082\072\087\050\065\122\115","\052\066\121\066\078\074\081\102\049\105\078\066\049\074\081\073\078\074\049\061","\051\084\086\088\118\056\097\080\051\086\061\061","\116\068\056\081\121\097\057\080\116\099\051\114\121\048\103\080";"\068\070\101\115\079\117\061\061";"\121\118\099\079\121\100\056\107","\099\120\072\066\049\098\050\061","\118\077\074\084\079\082\118\103\065\103\069\055\118\066\072\081\078\112\122\061";"\049\120\074\107\054\105\072\107\068\120\078\105\090\071\061\061";"\121\080\043\086\121\085\084\108\121\118\070\120\121\118\056\087\121\068\085\097\110\110\111\050\121\116\070\081\121\054\116\069\121\104\084\055","\121\104\084\051\121\121\057\057\121\085\056\073\121\104\085\052\121\068\085\097";"\099\120\072\052\118\120\078\108\099\082\071\061","\114\077\072\103\118\098\050\107\050\066\068\115\049\086\061\061","\074\053\074\065\074\069\101\072\065\105\118\069";"\090\077\101\080\054\075\049\061","\054\103\069\055\118\120\102\089\068\120\078\088\050\065\068\061";"\099\120\078\088\054\066\113\088\079\103\074\089","\121\118\056\051\116\104\043\115";"\079\077\101\071\054\077\074\103\079\069\098\061","\090\103\069\080\118\112\050\048\079\077\069\111\118\070\074\107";"\116\122\043\085\121\068\085\097\121\080\056\090\121\110\052\084\121\118\057\084\116\118\084\114\116\119\077\117\116\068\043\106\121\104\070\051\121\104\085\051\116\119\116\047\121\099\116\099\121\068\056\109\121\080\111\117\121\099\052\099\121\121\085\053\121\097\084\049\121\118\077\068\116\104\047\054\116\119\077\050\121\100\119\110\121\121\099\120\112\049\100\075\087\104\100\075\075\122\073\097\100\100\110\088\100\080\100\088\086\104\115\098\057\104\097\048\050\056\120\087\087\122\086\071\104\083\086\071\110\110\111\081\110\110\111\050\121\097\047\049\116\099\057\068\121\097\084\082\116\122\056\069\116\118\103\072\121\104\070\051\116\119\047\088\116\119\116\047\121\099\116\099\110\110\111\050\121\068\047\087\121\104\057\088\121\080\052\121\121\068\047\068\121\068\085\086\116\119\077\117\116\099\119\078\121\048\116\073\048\048\056\056\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\121\080\111\089\116\068\056\081\116\099\077\121\121\080\084\087\121\080\111\117\121\104\070\051\121\110\085\075\121\068\084\100\110\110\111\050\121\104\111\068\121\068\082\122\121\110\085\075\121\104\070\051\121\104\085\051\121\118\070\103\121\068\082\104\121\100\119\110\121\121\099\120\121\118\119\050\121\097\116\081\116\119\077\117\121\104\111\068\121\068\082\122\114\073\122\119\056\075\113\083\118\103\068\071\050\077\118\103\050\112\112\088\100\097\067\097\100\100\110\075\087\099\048\116\056\084\101\111\079\082\048\086\049\120\074\107\054\107\108\088\054\073\117\057\066\070\074\107\052\077\074\108\054\069\081\108\099\082\049\097\079\073\081\105\118\052\101\103\068\082\113\115\118\052\088\109\090\086\097\119\121\054\047\100\116\068\056\114\121\068\084\073\121\097\070\084\121\085\084\108\121\054\111\106\121\099\116\106\110\110\111\099\056\084\101\111\079\082\048\086\049\066\086\057\066\070\074\107\065\082\101\098\118\052\086\084\121\100\119\110\121\121\099\120\122\084\098\119\104\076\081\105\054\084\102\102\052\056\121\065\118\120\078\072\054\070\078\088\119\056\104\075\103\116\110\103\097\122\114\103\089\100\087\075\088\080\090\084\119\049\061\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\083\122\061";"\052\120\072\069\068\120\078\080\054\103\090\061","\104\076\117\086\116\122\043\085\121\068\085\097\116\104\043\114\116\118\085\106\121\097\084\078\056\086\061\061";"\116\068\056\081\121\097\057\080\116\119\116\047\121\110\070\057\116\122\043\085\121\068\085\097\116\104\043\114\116\118\085\106\121\121\057\057\121\085\056\073\112\049\100\080\086\122\075\103\084\116\075\075\103\116\110\103\097\122\114\088\098\122\110\087\087\122\115\075\086\100\075\088\108\110\087\103\100\099\065\103\083\122\075\080\098\085\110\097\055\121\067\080\103\097\067\075\103\116\110\103\097\122\090\072\056\057\084\076\075\047\103\099\083\047\043\119\055\057\099\117\086\043\052\048\100\043\047\109\083\051\043\056\057\043\082\073\057\047\099\055\080\051\099\050\084\043\103\052\100\057\082\102\075\051\099\055\097\057\084\076\075\047\103\099\083\071\107\119\112\049\100\088\083\116\100\097\086\110\076\097\055\121\067\080\103\097\067\088\103\116\104\080\103\081\067\103\084\081\054\080\103\081\067\098\087\122\076\075\103\116\110\103\097\122\090\061","\065\082\101\070\118\066\108\108\090\107\078\087\054\103\066\061","\099\115\074\080\078\049\061\061","\054\103\069\055\118\120\102\089\068\120\078\088\072\117\061\061";"\066\105\078\102\074\069\074\065\120\047\084\073\085\057\082\119\085\051\043\122\108\057\082\106\098\049\061\061","\052\066\121\082\120\107\105\081\066\107\072\114\066\074\074\069\066\105\078\081\065\107\121\072\049\074\081\104";"\052\120\072\072\054\076\118\080\054\103\090\061","\054\103\069\055\118\120\102\089\068\120\078\088\072\049\061\061";"\066\103\074\089\054\070\069\098";"\078\074\069\074\052\074\102\114\049\107\108\102\065\098\079\069\078\117\061\061";"\090\077\069\111\079\073\088\071\118\120\049\061";"\072\115\090\070\072\049\061\061","\116\104\070\089\116\104\085\100";"\116\122\070\087\121\068\103\056","\054\120\050\113\050\083\050\061","\116\104\043\114\116\118\085\106\110\110\111\099";"\049\074\074\066\065\105\101\081\065\088\078\069\066\088\081\074\066\069\049\061","\082\071\061\061","\052\107\074\118\120\105\072\066\049\074\081\066\078\098\101\050\065\053\101\120";"\116\122\057\113\121\068\057\073";"\049\120\074\107\054\107\118\087\054\077\113\087\079\105\074\057\099\120\049\061","\090\103\069\080\118\112\122\121\079\077\069\111\118\070\074\107";"\099\077\074\108\054\069\078\121\090\077\066\061";"\049\070\074\111\079\053\118\111\068\082\105\088\050\049\061\061","\099\077\088\098\118\049\061\061";"\078\077\074\084\079\082\090\061";"\068\070\108\088\068\070\055\084\054\076\086\061","\074\074\102\053\049\074\078\069\120\107\108\106\074\069\050\061";"\116\122\043\085\121\068\085\097\121\118\056\112\121\110\051\082","\114\077\072\103\118\098\118\077\072\107\049\071\049\043\082\079\080\057\082\069\084\047\052\109\103\051\082\069\084\117\061\061","\120\084\074\115\119\084\107\067\081\082\049\100\081\052\048\067\081\082\049\085\081\120\050\085\081\117\061\061";"\099\120\108\072\051\082\078\106";"\099\073\117\061","\065\082\101\070\118\066\078\088\054\077\069\121\078\075\081\108\054\082\066\061","\054\120\117\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\083\053\061";"\068\070\113\108\090\076\072\051\068\082\105\088";"\049\066\086\057";"\078\070\074\107\065\076\078\097\118\120\081\115\052\077\074\108\054\053\069\055\054\076\074\057\079\117\061\061","\052\120\072\102\079\073\078\108\068\070\055\080\054\103\090\061","\099\077\074\108\118\112\122\061","\043\105\113\101";"\078\070\074\107\065\103\074\048\079\053\069\083\079\077\088\087\054\086\061\061","\052\082\121\103\054\071\061\061";"\068\070\108\108\090\103\105\088\118\117\061\061";"\054\070\118\103\090\070\074\107";"\121\097\084\068";"\090\103\069\080\118\073\102\088\079\117\061\061","\121\080\043\070\121\054\111\117\121\118\056\087\116\122\077\050\121\104\084\099\121\097\085\117\116\122\051\101\104\051\052\101\087\047\043\066\085\051\082\076\080\043\043\097\084\047\099\081\084\047\082\088\088\111\067\080\080\054\112\088\098\048\053\087\121\116\043\072\121\080\043\106\121\097\085\117\116\122\051\101\082\047\082\069\087\043\052\116\057\057\084\108\086\051\099\117\080\047\043\104\086\057\099\117\098\084\071\086\121\054\043\097\116\099\070\066\121\048\057\056\121\080\085\107\120\043\051\117\086\086\097\119\114\077\072\103\118\083\117\071\118\103\068\071\050\051\084\104\089\043\082\104\108\111\067\088\088\121\115\097\097\068\112\088\087\122\112\088\098\119\067\075\084\122\054\088\083\121\073\088\098\122\048\089\122\051\052\109\103\057\082\090\085\053\081\106\066\105\106\103\084\081\083\098\057\119\076\088\083\099\069\112\078\051\043\110\080\047\043\110\100\043\103\073\084\057\099\066\087\057\043\122\108\057\082\106\098\043\099\119\086\051\084\112\087\043\082\052\083\051\103\088\089\051\082\065\086\043\047\109\086\120\113\111","\054\103\069\055\118\120\102\089\068\120\078\088\050\065\053\061";"\118\077\074\084\079\082\118\103\066\088\049\061";"\114\069\049\111\050\115\068\048\072\115\049\116\050\065\049\116\050\065\078\109\079\117\061\061";"\066\105\078\106\066\053\069\074\074\053\101\052\074\066\048\061","\090\070\108\087\079\071\061\061","\052\107\074\118\120\105\072\066\065\105\102\112\049\074\072\066";"\121\054\070\065\121\121\057\057\116\104\047\054\121\068\082\088\116\118\085\106\121\080\111\116\121\068\103\087\121\080\111\089\121\080\043\070\110\110\111\050\116\122\043\085\121\068\085\097\116\119\116\047\121\110\070\057\121\118\070\103\121\068\082\104\121\104\084\116\121\068\070\106\121\068\085\080\121\080\052\110\121\068\043\110\121\099\047\121\116\104\077\108\048\048\056\056\121\118\057\084\121\080\111\089\121\085\070\098\121\068\085\114\116\122\051\101\121\104\084\072\121\104\111\099\121\121\052\114\121\080\082\122\104\084\117\119\056\057\099\055\080\051\082\119\075\047\084\112\087\043\082\106\085\057\082\090\085\051\084\047\098\047\082\073\057\057\099\097\097\043\082\109\083\047\052\048\084\047\052\048\057\057\043\109\057\057\043\090\086\043\082\104\087\057\103\117\084\043\047\109\083\051\082\110\057\057\084\057\100\057\099\111\057\047\043\082\088\047\099\097\097\043\082\109\083\047\052\048\083\043\084\103\086\043\103\117\084\043\099\104\085\043\051\117\086\086\061\061","\116\068\056\081\121\097\057\080\121\068\047\085\121\104\111\099\121\118\111\097\121\097\084\068\121\080\099\120\121\048\085\070\121\097\056\102\121\104\084\104\121\100\119\110\121\121\099\120\112\049\100\098\057\122\076\080\086\122\075\103\084\116\075\087\087\122\115\080\075\118\110\103\084\081\083\103\088\080\114\075\084\100\054\103\086\122\073\098\057\118\067\098\087\081\100\103\089\100\087\075\088\080\114\075\103\116\110\103\097\122\090\119\056\075\113\083\118\103\068\071\050\077\118\103\050\112\112\103\055\068\087\097\100\121\120\103\103\119\067\088\098\119\054\097\087\121\112\097\097\068\115\103\100\099\106\088\057\104\083\087\087\122\115\088\083\116\067\098\057\116\120\088\108\054\106\080\088\116\076\103\100\099\065\080\086\122\075\080\097\054\075\088\098\122\110\103\083\099\104\097\097\048\120\075\075\122\087\103\103\119\067\088\098\119\054\097\108\116\100\088\084\085\083\088\084\085\112\097\097\068\112\087\087\122\069\109\090\086\061\061";"\052\066\121\082\074\069\088\049\078\074\101\065\052\053\088\069\065\053\049\061","\121\097\084\068\121\080\099\120\121\100\119\110\121\121\099\120";"\090\076\102\088\054\077\113\052\068\082\121\100\074\077\069\084\054\077\074\053\068\120\078\108","\099\077\074\108\054\077\074\111\104\077\105\087\054\070\121\100\099\082\048\089\068\070\069\107\104\077\081\088\068\120\122\061","\066\105\078\102\074\069\074\065\120\047\084\101\100\051\082\090\084\051\082\087\057\047\099\117\085\086\061\061";"\066\076\078\087\090\069\081\105\054\086\061\061";"\049\070\101\057\079\077\069\080\054\075\050\061";"\122\051\051\117\098\073\113\083\118\103\118\103\050\112\117\071\050\112\117\061";"\116\104\047\054\116\099\051\114";"\066\077\113\108\043\082\074\111";"\056\084\101\105\090\070\066\086","\078\070\074\107\074\082\121\080\079\053\078\088\068\075\074\103\118\098\121\105\054\049\061\061";"\121\118\056\112\116\118\070\084\121\068\111\069\119\047\082\082\075\043\099\071\055\117\061\061";"\121\118\057\043\121\080\084\088","\121\068\070\106\121\068\085\080\121\118\070\103\121\068\082\104";"\090\103\069\080\118\112\078\107\068\120\081\075\118\120\049\061","\065\066\069\073\078\049\061\061";"\121\068\070\106\121\068\085\080\121\121\057\057\121\085\056\073";"\118\076\074\080\118\117\061\061","\066\105\078\102\074\069\074\065\120\047\084\073\085\057\082\119\085\051\099\104\087\057\082\106\088\086\061\061";"\051\086\061\061","\049\088\074\066\074\053\101\051\120\105\078\069\049\066\105\072\049\066\072\052\065\071\061\061";"\052\053\074\102\065\069\101\066\049\074\081\073\078\074\049\061","\121\100\119\108\121\080\111\081\121\068\099\069\121\099\116\121","\068\070\069\115\079\077\088\057\118\105\078\080\054\082\066\061","\054\103\069\055\118\120\102\089\068\120\078\088\050\115\086\061","\121\054\056\077\116\068\056\081\121\097\057\080\116\118\084\114\121\068\047\104\116\104\047\054\121\068\082\088\116\054\057\078\121\118\056\072\121\068\070\074\110\110\111\050\121\104\084\072\121\104\111\099\121\099\047\121\116\054\057\078\121\118\056\072\121\068\070\074\116\104\047\054\116\119\077\050\121\104\057\110\121\104\070\074\121\100\119\110\121\121\099\120\121\097\084\082\116\122\056\069\121\068\082\070\121\104\057\082\121\080\051\072\121\104\070\090\110\110\111\102\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\121\104\070\067\121\121\052\097\121\080\047\049\121\104\085\054\121\048\103\121\121\099\116\099\121\118\111\116\121\118\056\122\110\110\111\050\121\054\056\077\121\104\084\072\116\118\111\117\116\119\099\102\121\100\119\110\121\121\099\120\121\097\084\082\116\122\056\069\121\104\084\072\116\122\051\101\121\100\119\110\121\121\099\120\110\110\111\122\121\085\047\066\121\099\099\056\121\080\111\081\121\104\085\054\121\118\111\116\121\118\056\122\121\121\085\053\074\053\069\051\052\047\047\109\084\043\099\051\098\057\103\118\080\051\082\090\085\051\099\111\057\047\043\082\088\047\052\121\084\047\082\098\088\057\047\109\083\051\082\101\098\047\043\053\055\057\052\121\075\047\082\106\100\047\052\110\080\043\052\101\097\051\099\073\086\057\043\099\108\051\051\117\086\057\051\117\086\057\051\117\086\075\113\111\056\086\080\109\068\070\118\103\118\083\117\071\050\112\117\071\116\054\057\078\121\118\056\072\121\068\070\074\121\104\111\068\121\068\082\122\121\110\085\075\121\068\084\100\121\085\047\066\121\068\111\110\121\104\047\079\116\099\057\068\110\110\111\050\121\099\099\056\121\080\116\090\121\118\056\050\121\080\043\070\116\119\116\047\121\110\070\057\121\104\085\077\121\068\111\110\121\104\047\079\121\118\119\050\116\054\057\078\121\118\056\072\121\068\070\074\110\110\111\050\121\054\056\077\121\104\084\072\121\104\111\099\121\100\119\110\121\121\099\120\121\121\057\057\121\085\056\073\048\048\056\056\114\073\122\061","\078\053\074\102\074\053\108\104\065\098\088\073\052\069\049\061","\078\103\074\080\118\070\121\053\118\082\069\107\099\117\061\061";"\074\053\108\081\065\098\101\074\074\053\113\081\065\098\066\061";"\116\122\043\085\121\068\085\097\116\104\043\114\116\118\085\106";"\074\082\121\080\079\053\108\108\090\107\078\088\068\075\074\103\118\086\061\061";"\066\098\074\077\066\098\074\065\052\069\101\053\066\098\069\073";"\114\077\072\103\118\098\069\056\078\112\049\076\050\071\061\061";"\118\103\113\087\054\076\122\061";"\049\120\072\115\099\120\072\107\074\082\121\080\079\117\061\061";"\074\053\101\049\065\053\074\077\074\117\061\061","\116\119\099\102\116\068\043\119\121\080\052\047\121\097\085\117\116\122\051\101\121\080\043\070\110\110\111\050\121\099\099\056\121\080\116\090\121\118\111\097\121\118\070\049\116\099\085\078\121\104\084\119\110\110\111\050\121\104\111\099\116\122\043\085\121\068\085\097\121\104\084\104\116\118\070\084\048\048\056\056","\121\104\084\072\121\048\077\055\116\122\070\087\121\068\103\056\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\116\122\070\087\121\100\056\107\121\068\047\087\121\104\057\088\121\099\052\099\116\068\056\081\110\110\111\050\121\054\056\077\121\097\111\081\121\048\082\075\121\104\084\104\116\118\070\084\116\099\077\116\121\054\085\106\121\104\111\068\121\068\082\122\121\104\070\067\121\121\052\097\110\110\111\099\056\083\053\057\122\051\052\048\083\043\043\102\100\043\084\072\100\047\099\071\055\117\097\111\104\084\112\088\084\085\112\080\086\081\067\097\083\099\067\103\089\104\049\119\050\111\048\086\121\048\057\056\116\068\043\051\116\099\070\066\121\100\051\074\116\122\070\087\121\100\056\107\110\110\111\102\114\073\122\061","\121\097\085\117\116\122\051\101";"\043\105\081\102\065\069\049\086\118\077\101\076\054\075\105\110\120\120\105\110\066\098\069\050\074\056\102\105\090\073\107\061";"\068\075\074\103\118\103\081\105\079\073\078\087\054\086\061\061","\079\103\069\089\079\082\066\061","\090\103\069\080\118\112\122\115\079\077\069\111\118\070\074\107";"\049\070\101\089\054\076\081\077\090\103\069\055\118\049\061\061","\114\077\072\103\118\098\118\077\078\083\066\070\051\043\052\116\098\057\082\119\085\073\113\111";"\068\120\074\111\068\066\081\121\066\077\113\108\043\082\074\111";"\078\105\074\081\078\117\061\061";"\104\076\072\107\054\076\102\083\068\120\072\107\099\082\121\075\056\084\101\111\079\082\048\086\099\082\068\086\049\066\086\057\078\098\101\050\065\053\101\120\120\105\074\051\052\074\049\086\079\077\108\088\054\084\102\077\054\070\113\089\054\076\079\074\054\103\088\107\119\053\069\122\104\098\118\106\065\053\113\106\074\105\101\074\065\098\088\066\119\052\102\088\054\103\049\061";"\066\077\101\071\079\120\102\056\068\120\078\107\054\077\074\050\099\120\072\107\065\082\074\057\079\049\061\061";"\049\088\074\066\074\053\101\051\120\047\103\055\088\051\099\115\088\043\099\071\055\051\103\117\084\043\099\104\085\049\061\061","\090\077\069\111\079\073\098\111\079\077\069\111\118\070\074\107";"\079\077\088\107\054\077\066\061","\121\080\043\070\121\054\111\117\121\118\056\087","\049\066\072\066\052\066\101\051\052\107\074\118\120\107\121\102\065\066\074\065";"\078\120\069\105\099\120\102\055\118\082\121\107\072\117\061\061";"\068\103\101\115\090\111\074\098";"\121\068\103\087\121\080\111\089";"\078\070\074\107\065\082\069\057\068\066\072\087\090\076\049\061","\066\105\078\102\074\069\074\065\120\107\088\051\049\098\069\066\074\053\113\069\052\053\074\102\065\117\061\061";"\066\105\078\102\074\069\074\065\120\047\084\073\085\057\082\119\085\051\082\049\086\047\043\115\088\086\061\061","\049\120\074\107\054\107\108\088\054\073\117\061","\116\099\070\066\121\100\051\074\121\080\103\070\121\100\056\107","\068\070\101\055\090\117\061\061";"\068\120\074\111\068\066\121\108\054\082\066\061";"\078\070\074\107\074\120\072\108\068\103\113\088\066\076\102\088\054\077\071\061";"\121\068\116\114\121\118\111\071\072\112\120\088\057\085\054\097\087\099\115\088\075\122\083\103\088\100\075\088\087\122\067\088\100\110\087\103\084\054\110\103\086\119\100\075\084\099\075\087\087\122\115\098\087\081\100\098\057\122\112\075\103\110\065\103\103\119\067\088\083\080\067\088\075\104\112\097\087\099\115\088\075\122\083\087\087\122\115\088\083\116\054\098\057\122\112\075\080\048\076\103\103\119\067\088\084\068\076\097\087\121\087\098\057\122\112\103\100\100\120\097\055\121\076\075\080\100\087\088\083\110\106\097\087\099\115\087\087\122\115\088\080\097\104\103\075\080\115\080\086\110\076\098\057\122\076\080\086\122\075\103\084\116\075\087\087\122\115\088\089\122\054\098\087\081\100\088\083\116\100\080\086\122\075\103\084\116\075\088\084\068\076\103\088\100\075\075\103\116\110\103\097\122\114\083\086\122\122\061";"\121\054\047\100\116\068\056\114\121\080\099\101\121\100\051\074";"\066\098\101\073\074\066\066\061";"\049\098\069\112\052\107\079\052\065\105\074\051\078\117\061\061";"\104\076\074\115\118\052\102\054\049\077\072\105\090\075\072\087\090\088\107\086\116\068\056\099\121\121\052\097\121\048\051\055\121\068\085\054\121\054\043\088\121\116\084\104\121\048\119\048\116\122\070\087\056\086\061\061";"\078\120\081\111\054\076\122\061","\116\122\043\085\121\068\085\097\121\068\070\073\121\110\085\075\121\104\070\067\121\121\052\097\110\110\111\050\121\080\070\117\121\085\070\110\121\097\056\085\121\048\103\080\121\118\056\051\116\122\043\085\121\068\085\097\121\097\057\047\121\068\047\082";"\066\070\069\070\118\082\078\050\068\120\072\107\049\082\072\107\099\082\101\057";"\082\105\048\061";"\066\105\078\102\074\069\074\065\120\047\082\072\083\047\082\119\085\043\082\079\080\057\082\069\084\071\061\061","\065\098\101\051\078\049\061\061";"\049\098\113\102\049\107\055\114\065\053\088\065\074\117\061\061","\090\077\069\111\079\073\098\097\081\082\049\080\079\077\069\111\118\070\074\107","\121\054\056\077\116\118\084\114\121\068\047\104\121\068\085\086\121\068\082\088\121\104\111\068\121\068\082\122\121\104\047\079\121\097\085\098\121\099\047\121\116\104\077\108","\054\103\074\088\118\053\078\088\068\075\074\103\118\098\088\098";"\049\103\101\107\049\082\072\107\099\082\101\057","\050\065\102\122\121\104\047\057\121\080\084\114\121\054\057\116\116\119\116\057\082\047\052\101\087\047\043\066\085\051\084\118\085\047\043\047\080\051\043\055\084\043\043\116\080\105\107\116";"\072\115\090\076\072\086\061\061";"\121\116\043\110\121\068\085\097";"\121\048\119\121\121\068\043\110\121\068\084\054\121\054\057\116\116\118\084\114\121\104\111\072\121\097\116\075\121\068\084\070\121\099\116\106\110\110\111\050\122\051\082\050\108\043\099\104\100\051\082\072\083\047\082\119\085\043\099\066\057\047\082\073\057\111\067\097\108\116\100\088\084\085\083\097\055\121\067\080\103\097\067\075\100\068\075\088\100\097\067\087\087\122\115\097\100\110\114\097\108\116\100\097\097\068\115\098\057\048\110\088\100\097\067\103\084\121\054\088\108\099\120\088\087\116\087\103\083\054\114\080\088\119\110\098\087\054\067\075\088\119\086\061","\118\103\121\083","\118\077\074\108\118\117\061\061";"\116\068\056\081\121\097\057\080\121\085\070\098\116\099\077\121\110\110\111\050\116\118\070\043\121\097\084\068\121\080\099\120\121\104\084\055\121\068\047\087\121\104\057\088\121\104\084\110\121\068\085\097\121\080\052\110\121\068\043\110\116\068\056\081\121\104\084\055\121\121\085\053\121\080\082\050\121\099\047\121\121\121\057\057\121\085\056\073\110\110\111\050\121\104\084\072\116\068\056\081\121\097\057\080\121\085\070\098\116\099\077\121\110\110\111\050\121\068\047\085\121\080\111\081\116\104\047\054\121\068\082\088\121\097\084\068\121\080\099\120\121\048\085\070\121\097\056\102\121\097\103\072\121\054\111\117\121\099\043\104\116\122\043\085\121\068\085\097\121\080\052\110\121\068\043\110\121\080\082\050\121\099\047\121\121\121\057\057\121\085\056\073";"\049\088\074\066\074\053\101\051\120\047\103\083\075\047\043\081\085\043\103\117\084\043\099\104\085\049\061\061";"\054\103\069\055\118\120\102\089\068\120\078\088\050\071\061\061";"\121\099\047\110\121\097\103\047\121\121\057\057\121\085\056\073";"\043\070\053\086\118\077\101\076\054\075\107\101\050\065\117\071\050\112\105\110\068\052\102\105\090\073\107\061";"\104\076\081\105\054\084\102\115\118\075\086\101\078\070\074\107\049\105\118\108\090\084\086\075\066\070\101\105\054\103\078\114\078\082\121\108\068\103\113\088\066\107\118\068\081\111\098\110\056\084\101\083\054\070\121\115\054\070\113\088\122\069\072\087\079\082\121\098\120\107\074\057\068\082\081\089\118\074\072\077\082\056\117\071\056\084\101\083\054\070\121\115\054\070\113\088\122\069\072\087\079\082\121\098\120\107\074\057\068\082\081\089\118\066\074\111\090\103\101\111\066\076\102\088\118\082\072\097\122\112\117\119";"\056\086\061\061","\121\118\056\112\121\118\099\079","\090\070\108\087\079\082\113\098\118\120\081\115";"\118\077\074\084\079\082\118\103\065\075\074\055","\121\097\119\097\121\121\085\053\121\100\051\074\121\080\111\087\121\054\111\116\121\054\085\103\121\099\052\085\121\104\070\051\104\051\099\120\097\051\099\115\088\065\122\105\052\051\082\057\083\051\099\122\098\051\052\067\100\057\099\068\075\111\053\061";"\052\053\069\065\078\074\108\049\052\074\081\069";"\118\082\078\075\118\074\072\080\043\103\066\061";"\043\076\078\108\068\075\107\061";"\065\082\101\070\118\066\121\087\078\075\081\108\054\082\066\061","\121\104\084\072\121\048\077\055\116\122\070\087\121\068\103\056";"\078\070\074\107\074\073\081\108\068\070\055\080\054\103\079\081\054\103\118\087";"\065\066\074\051\074\049\061\061";"\099\082\121\115\118\120\081\107";"\121\068\077\090\121\085\070\084\049\066\101\069";"\052\107\074\118\120\107\078\052\052\066\121\104\052\066\121\073","\066\105\108\051\049\066\105\069";"\121\068\111\110\121\104\047\079";"\068\120\074\111\068\066\121\105\054\049\061\061","\068\076\081\080\079\073\050\061","\065\070\121\069\054\075\078\088\090\088\102\111\118\120\072\115\118\082\049\061";"\068\070\069\115\079\053\121\108\054\082\066\061";"\116\099\082\071\121\118\051\102\121\048\084\077\121\068\047\078","\099\082\121\098\118\120\086\061","\121\118\111\097\121\097\085\117\116\122\051\101\121\104\084\055\121\110\057\078\121\099\116\099\082\047\084\049\085\051\103\099\108\057\103\056\085\057\103\065\086\043\043\056\057\051\082\109\057\074\107\087\116\122\082\071\121\054\084\103\116\118\119\107\116\104\052\097\121\116\056\107\121\048\103\073\121\048\119\048\121\054\111\121\104\056\112\088\089\122\067\103\086\119\100\098\087\054\067\075\088\119\083\097\108\054\112\088\057\119\054\075\086\100\083\088\087\104\098\089\122\051\103\085\055\047\103\100\108\043\043\116\080\047\082\122\085\107\081\106\066\105\106\103\084\068\076\088\083\099\069\112\078\051\052\101\087\047\043\066\085\051\084\049\085\051\103\099\108\057\103\056\085\057\103\065\086\043\043\056\057\051\082\109\057\052\071\086\116\119\047\076\121\118\111\097\116\122\051\050\121\068\111\069\121\104\047\079\121\121\082\118\116\104\099\115\121\099\052\114\121\121\085\053\121\048\119\048\121\054\111\121\048\048\056\056\056\086\080\109\068\070\118\103\050\112\102\103\118\083\117\071\116\081\056\097\116\118\085\077\116\068\119\085\116\118\051\102\121\048\119\048\121\054\111\121\121\068\047\085\121\118\111\097\121\121\057\057\121\085\056\073\121\104\084\116\116\099\085\076\116\099\057\069\121\110\085\075\049\098\101\065\066\047\099\120\055\057\099\081\083\043\084\075\080\057\082\106\098\043\047\109\086\120\113\111","\066\103\074\053\090\103\069\076\052\120\078\088\054\120\050\061";"\090\077\069\111\079\073\098\115\079\077\069\111\118\070\074\107";"\121\104\047\108\121\097\077\087";"\068\103\069\115\118\066\108\088\068\082\113\102\054\082\101\105\054\075\049\061","\121\099\099\056\121\080\116\090\116\081\051\079\116\068\043\106\116\104\099\115\121\099\052\114\110\110\111\050\116\122\052\113\121\097\084\068\121\118\056\051\121\080\084\087\121\118\056\103\116\122\043\085\121\068\085\097\121\080\082\078\121\104\085\116","\121\104\070\067\121\121\052\097\121\080\111\117\121\085\056\073\121\068\043\077\121\085\084\108\121\054\111\106\121\118\119\050\121\085\070\083\121\054\084\048\116\081\051\079\116\122\056\120\121\080\070\088\116\104\047\054\116\119\077\050\121\100\119\110\121\121\099\120\110\110\111\050\116\099\119\053\121\100\082\104\121\068\085\086\116\119\077\117\116\118\084\122\121\068\056\109\050\065\117\071\081\049\097\119\114\077\072\103\118\083\117\071\118\103\068\071\050\051\099\086\108\047\082\073\108\057\099\097\097\043\082\109\083\047\099\111\057\047\043\082\088\047\084\057\097\043\043\057\088\047\103\068\084\051\082\117\087\112\053\071\050\056\074\109\090\086\061\061";"\054\082\088\057\066\103\069\057\118\070\066\061";"\078\103\088\057\118\053\081\108\118\107\088\107\118\082\107\061";"\104\047\084\076\089\105\107\061";"\072\115\090\115";"\116\068\119\085\116\118\051\102\121\048\119\048\121\054\111\121","\116\122\043\085\121\068\085\097\116\104\047\054\121\068\082\088\121\097\084\068\121\118\111\116";"\054\103\069\055\118\120\102\089\068\120\078\088\072\086\061\061","\121\097\084\068\121\118\111\116";"\121\099\099\056\121\080\116\090\121\068\082\115\116\118\043\055\121\118\056\051\104\056\112\097\080\097\073\080\108\048\076\103\088\100\112\103\084\118\106\088\087\122\117\089\122\051\084\087\055\047\082\090\085\051\084\057\087\057\043\101\100\057\103\073\083\051\103\079\097\057\103\073\083\043\099\082\089\051\082\104\087\057\103\117\084\043\052\067\097\043\099\102\100\047\099\079\097\049\061\061","\068\076\081\080\079\069\072\071\118\082\113\089\090\071\061\061";"\068\070\113\108\090\076\050\061";"\090\077\113\108\043\082\074\111\049\070\113\108\090\076\050\061","\052\082\121\107\118\120\081\103\068\082\072\088\104\105\078\087\054\070\113\107\099\120\102\115\104\105\074\081\104\074\078\087\054\070\113\107\099\120\117\055\049\103\101\111\118\077\074\111","\079\077\069\111\118\070\074\107","\066\077\088\083\099\076\074\071\049\070\101\057\079\077\069\080\054\103\074\111\052\120\078\088\054\049\061\061";"\118\103\118\105\079\082\072\083\099\070\089\086\079\120\074\105\079\120\074\105\079\120\074\105\079\120\074\105\079\120\074\105\122\049\061\061","\078\070\074\107\049\107\088\053\078\075\081\087\054\066\079\074\052\066\049\061","\090\103\069\080\118\112\050\121\079\077\069\111\118\070\074\107";"\066\105\078\102\074\069\074\065\120\047\084\073\085\057\082\119\085\051\099\122\103\051\082\090\057\086\061\061","\120\075\102\108\090\075\078\121\119\056\074\098\119\111\098\098";"\066\105\078\102\074\069\074\065\120\105\102\052\065\105\078\069\049\105\078\050\052\074\072\066";"\114\077\072\103\118\098\118\077\078\083\066\070\051\043\082\087\057\047\099\117\085\075\113\111";"\104\056\112\097\103\099\087\075\087\085\065\098\087\119\065\088\100\100\050\116","\065\105\102\066\052\066\101\051\066\105\101\081\065\098\088\066";"\052\053\074\102\065\053\055\069\082\074\050\061","\118\103\101\057\079\069\072\080\043\103\066\061"}
	local function lI111(llI11)
		return II111[llI11 - (- 33023 - (- 66018))]
	end
	for llI11, lI111 in ipairs({
		{
			- 127396 + 127397;
			352557 - 351467
		};
		{
			265000 + - 264999;
			- 517232 + 518197
		},
		{
			786296 + - 785330,
			- 1024574 - (- 1025664)
		}
	}) do
		while lI111[- 751414 - (- 751415)] < lI111[686583 - 686581] do
			II111[lI111[620788 - 620787]], II111[lI111[- 548143 - (- 548145)]], lI111[- 266792 + 266793], lI111[701366 + - 701364] = II111[lI111[- 843834 + 843836]], II111[lI111[467119 - 467118]], lI111[- 21857 + 21858] + (981439 - 981438), lI111[- 806391 - (- 806393)] - (- 218598 - (- 218599))
		end
	end
	do
		local llI11 = string.sub
		local lI111 = type
		local I1111 = {
			["\055"] = - 440641 - (- 440686),
			["\056"] = - 993087 + 993089,
			g = - 391340 + 391378,
			I = - 453742 + 453749,
			r = 723349 - 723318,
			Z = 315178 + - 315150,
			C = - 351915 + 351978;
			c = - 554609 + 554635,
			["\049"] = - 609315 - (- 609331);
			W = - 216999 + 217046;
			X = 904636 + - 904599;
			z = 540665 - 540657;
			T = 1001599 + - 1001565;
			h = - 402785 - (- 402796),
			f = 743096 - 743095,
			p = - 299878 - (- 299881);
			q = 976175 - 976126;
			E = 277545 + - 277540,
			d = - 736268 - (- 736311);
			["\048"] = - 420013 + 420069;
			G = 633764 - 633716,
			V = 731127 + - 731095;
			o = 994289 - 994239,
			["\047"] = - 642036 + 642098,
			n = 441001 - 440942,
			D = 326338 - 326314;
			w = - 158811 - (- 158821);
			["\053"] = - 421481 - (- 421485),
			["\051"] = - 510114 - (- 510128),
			["\050"] = - 880571 + 880583;
			N = - 204181 - (- 204198);
			Q = 988607 + - 988598;
			u = - 301545 + 301545;
			e = - 292777 + 292838;
			k = - 893052 + 893104;
			i = - 734583 + 734636;
			U = - 404803 - (- 404845),
			a = 547569 + - 547529,
			J = 902737 - 902716;
			M = - 443438 + 443444;
			y = - 751095 + 751152;
			O = 998940 - 998911,
			x = 1041367 - 1041344;
			j = 303977 + - 303962;
			["\057"] = - 891854 - (- 891900),
			l = - 468302 - (- 468335);
			s = - 603328 - (- 603379);
			Y = - 366975 - (- 367019),
			S = - 370056 - (- 370091),
			["\043"] = - 929469 + 929499;
			m = 38049 + - 37989;
			K = 1040960 + - 1040921;
			L = - 855099 + 855154,
			t = 921655 - 921597;
			H = 372473 - 372460;
			v = 362987 + - 362962;
			F = 1031040 + - 1030986,
			A = - 854714 + 854733,
			b = - 278441 + 278477;
			P = - 44472 - (- 44513);
			["\054"] = 379564 + - 379537;
			["\052"] = 870459 + - 870441;
			B = 137144 - 137124,
			R = 618483 + - 618461
		}
		local l1111 = table.concat
		local Il111 = II111
		local ll111 = string.len
		local IIl11 = math.floor
		local lIl11 = string.char
		local I1l11 = table.insert
		for II111 = - 1023423 - (- 1023424), # Il111, 522737 - 522736 do
			local l1l11 = Il111[II111]
			if lI111(l1l11) == "\115\116\114\105\110\103" then
				local lI111 = ll111(l1l11)
				local Ill11 = {}
				local lll11 = 568691 - 568690
				local IIIl1 = 418733 - 418733
				local lIIl1 = - 93475 + 93475
				while lll11 <= lI111 do
					local II111 = llI11(l1l11, lll11, lll11)
					local l1111 = I1111[II111]
					if l1111 then
						IIIl1 = IIIl1 + l1111 * (572978 - 572914) ^ ((- 871291 + 871294) - lIIl1)
						lIIl1 = lIIl1 + (- 829625 - (- 829626))
						if lIIl1 == - 854582 - (- 854586) then
							lIIl1 = 486447 - 486447
							local llI11 = IIl11(IIIl1 / (441260 - 375724))
							local II111 = IIl11((IIIl1 % (52064 - (- 13472))) / (948093 + - 947837))
							local lI111 = IIIl1 % (342123 + - 341867)
							I1l11(Ill11, lIl11(llI11, II111, lI111))
							IIIl1 = 417261 - 417261
						end
					elseif II111 == "\061" then
						I1l11(Ill11, lIl11(IIl11(IIIl1 / (431019 - 365483))))
						if lll11 >= lI111 or llI11(l1l11, lll11 + (994816 - 994815), lll11 + (- 477806 - (- 477807))) ~= "\061" then
							I1l11(Ill11, lIl11(IIl11((IIIl1 % (- 752697 - (- 818233))) / (- 121572 - (- 121828)))))
						end
						break
					end
					lll11 = lll11 + (- 244711 - (- 244712))
				end
				Il111[II111] = l1111(Ill11)
			end
		end
	end
	do
		local llI11 = true
		local II111 = string[lI111(- 807929 + 841446)]
		local I1111 = function()
			error(lI111(79074 + - 45031))
		end
		local l1111 = false
		local Il111 = pcall(function()
			l1111 = true
		end) and l1111
		local ll111 = math[lI111(176771 - 142756)]
		local IIl11 = table[lI111(554199 - 520816)]
		local lIl11 = table and table[lI111(- 541361 + 574759)] or unpack
		local I1l11 = ll111(260075 - 260072, - 1012671 + 1012736)
		local l1l11 = 34401 - 34401
		local Ill11 = - 75170 - (- 75170)
		local lll11 = {
			pcall(function()
				local llI11 = (1662036 - 902204) - lI111(657132 - 623347) ^ (10763945 - (- 426669))
				return lI111(854869 - 821113) / llI11
			end)
		}
		local IIIl1 = lll11[885371 + - 885369]
		local lIIl1 = tonumber((II111(tostring(IIIl1), lI111(- 309098 + 342830)))())
		for I1111 = 371756 + - 371755, I1l11, 848379 - 848378 do
			local l1111 = math[lI111(- 909692 + 943707)](845370 + - 845369, 751863 + - 751763)
			local Il111 = ll111(- 600947 - (- 600947), 141156 + - 140901)
			local IIl11 = ll111(287273 + - 287272, l1111)
			local lll11 = ll111(795706 - 795705, - 709238 + 709240) == 590003 - 590002
			local I1Il1 = IIIl1:gsub(lI111(- 671090 - (- 704822)), lI111(467182 + - 433351) .. (tostring(ll111(901884 - 901884, 707206 - 697206)) .. lI111(- 768312 + 802143)))
			local l1Il1 = {
				pcall(function()
					if ll111(- 885115 + 885116, 620147 + - 620145) == - 69729 - (- 69730) or I1111 == I1l11 then
						local I1111 = tonumber((II111(tostring(({
							pcall(function()
								local llI11 = (5895828 - (- 153125)) - lI111(- 958014 + 991040) ^ (6273951 - (- 824122))
								return lI111(397197 - 363627) / llI11
							end)
						})[682549 + - 682547]), lI111(135335 - 101603)))())
						llI11 = llI11 and lIIl1 == I1111
					end
					if lll11 then
						error(I1Il1, - 786104 + 786104)
					end
					local l1l11 = {}
					for llI11 = - 829050 + 829051, l1111, 137445 - 137444 do
						l1l11[llI11] = ll111(588082 - 588082, - 226344 - (- 226599))
					end
					l1l11[IIl11] = Il111
					return lIl11(l1l11)
				end)
			}
			if lll11 then
				llI11 = llI11 and (l1Il1[684341 + - 684340] == false and l1Il1[386030 - 386028] == I1Il1)
			else
				llI11 = llI11 and l1Il1[- 229286 - (- 229287)]
				l1l11 = (l1l11 + l1Il1[IIl11 + (586034 + - 586033)]) % (- 149925 + 150181)
				Ill11 = (Ill11 + Il111) % (127844 - 127588)
			end
		end
		llI11 = llI11 and l1l11 == Ill11
		-- if llI11 then
		-- else
		-- 	repeat
		-- 		return (function()
		-- 			while true do
		-- 				l1, l2 = l2, l1
		-- 				I1111()
		-- 			end
		-- 		end)()
		-- 	until true
		-- 	while true do
		-- 		l2 = ll111(562482 - 562481, 790975 - 790969)
		-- 		if l2 > - 984831 + 984833 then
		-- 			l2 = tostring(l1)
		-- 		else
		-- 			l1 = l2
		-- 		end
		-- 	end
		-- 	return
		-- end
	end




	-- if not AH then
	-- 	AH = CreateProtectedTable({})
	-- end
	-- AH[lI111(168709 - 135524)] = WOW_PROJECT_ID == WOW_PROJECT_CLASSIC
	-- AH[lI111(- 717750 + 751486)] = WOW_PROJECT_ID == WOW_PROJECT_BURNING_CRUSADE_CLASSIC
	-- AH[lI111(817041 - 783608)] = WOW_PROJECT_ID == WOW_PROJECT_WRATH_CLASSIC
	-- AH[lI111(- 579238 - (- 612979))] = WOW_PROJECT_ID == WOW_PROJECT_MAINLINE
	local function llI11()
		local llI11 = {}
		local II111 = select(- 609779 + 609781, 'PALADIN')
		function PlayerIsClass(llI11)
			return II111 == llI11
		end
		if C_Container then
			PickupContainerItem = PickupContainerItem or C_Container[lI111(185062 + - 151113)]
			GetContainerNumSlots = GetContainerNumSlots or C_Container[lI111(- 227139 - (- 260776))]
			GetContainerItemLink = GetContainerItemLink or C_Container[lI111(505826 - 472303)]
			GetContainerItemCooldown = GetContainerItemCooldown or C_Container[lI111(230695 + - 197443)]
			GetItemCooldown = GetItemCooldown or C_Container[lI111(649524 + - 616429)]
		end
		EasyMenu = EasyMenu or function(llI11, II111, I1111, l1111, Il111, ll111, IIl11)
			if ll111 == lI111(365926 - 332010) then
				II111[lI111(- 62120 - (- 96099))] = ll111
			end
			UIDropDownMenu_Initialize(II111, EasyMenu_Initialize, ll111, nil, llI11)
			ToggleDropDownMenu(- 62625 - (- 62626), nil, II111, I1111, l1111, Il111, llI11, nil, IIl11)
		end
		function EasyMenu_Initialize(llI11, II111, I1111)
			for llI11 = 204263 - 204262, # I1111, 577523 - 577522 do
				local l1111 = I1111[llI11]
				if l1111[lI111(988543 + - 955374)] then
					l1111[lI111(230445 - 196518)] = llI11
					UIDropDownMenu_AddButton(l1111, II111)
				end
			end
		end
		if not ahenv then
			ahenv = {}
		end
		local function I1111(llI11, II111)
			return strsplit(II111 or lI111(457263 - 423725), llI11)
		end
		local l1111 = 1002366 - 1002111
		function llI11.Contains(llI11, II111)
			if not llI11 or not II111 then
				return false
			end
			if string[lI111(- 295609 - (- 328810))](llI11, II111) ~= nil then
				return true
			else
				return false
			end
		end
		local function Il111(llI11)
			if llI11 == nil then
				return false
			end
			return string[lI111(137124 + - 103923)](llI11, lI111(582249 - 548465)) ~= nil
		end
		-- if not llI11[lI111(133860 + - 100119)] then
		-- 	llI11[lI111(- 122231 - (- 155877))] = LibStub(lI111(- 953982 + 987599))
		-- end
		local ll111 = lI111(- 150117 + 183787)
		local function IIl11(llI11)
			return (llI11:gsub(lI111(- 1003242 - (- 1036928)), function(llI11)
				local II111, I1111 = lI111(230887 + - 197765), llI11:byte()
				for llI11 = 380140 + - 380132, - 869114 - (- 869115), - 589171 - (- 589170) do
					II111 = II111 .. (I1111 % (885629 - 885627) ^ llI11 - I1111 % (- 798137 + 798139) ^ (llI11 - (- 407661 + 407662)) > - 1032576 - (- 1032576) and lI111(833685 - 800505) or lI111(- 200391 - (- 233831)))
				end
				return II111
			end) .. lI111(442414 + - 408905)):gsub(lI111(- 573878 - (- 607283)), function(llI11)
				if # llI11 < - 993273 - (- 993279) then
					return lI111(- 116324 + 149446)
				end
				local II111 = - 229927 + 229927
				for I1111 = 183015 - 183014, 21351 - 21345, - 724661 - (- 724662) do
					II111 = II111 + (llI11:sub(I1111, I1111) == lI111(60002 + - 26822) and (988223 + - 988221) ^ ((374892 + - 374886) - I1111) or 224 - 224)
				end
				return ll111:sub(II111 + (- 199270 + 199271), II111 + (460911 - 460910))
			end) .. ({
				lI111(- 952733 - (- 985855)),
				lI111(- 418585 - (- 451886));
				lI111(- 173157 + 206254)
			})[# llI11 % (1041024 + - 1041021) + (- 72545 - (- 72546))]
		end
		local function lIl11(llI11)
			llI11 = string[lI111(- 761067 - (- 794169))](llI11, lI111(- 444142 + 478027) .. (ll111 .. lI111(899010 - 865979)), lI111(- 513039 - (- 546161)))
			return (llI11:gsub(lI111(1024448 + - 990762), function(llI11)
				if llI11 == lI111(- 790001 - (- 823098)) then
					return lI111(- 911868 + 944990)
				end
				local II111, I1111 = lI111(58179 - 25057), ll111:find(llI11) - (- 780408 + 780409)
				for llI11 = - 270306 - (- 270312), - 16928 - (- 16929), 858042 - 858043 do
					II111 = II111 .. (I1111 % (150757 + - 150755) ^ llI11 - I1111 % (353323 + - 353321) ^ (llI11 - (186535 - 186534)) > - 1041920 - (- 1041920) and lI111(- 885179 + 918359) or lI111(- 676149 + 709589))
				end
				return II111
			end)):gsub(lI111(- 995011 - (- 1028288)), function(llI11)
				if # llI11 ~= - 813945 + 813953 then
					return lI111(529840 + - 496718)
				end
				local II111 = 257064 + - 257064
				for I1111 = - 873723 + 873724, - 361259 + 361267, - 740663 + 740664 do
					II111 = II111 + (llI11:sub(I1111, I1111) == lI111(734903 + - 701723) and (591218 + - 591216) ^ ((- 667757 - (- 667765)) - I1111) or - 834362 - (- 834362))
				end
				return string[lI111(417945 - 384236)](II111)
			end)
		end
		local function I1l11(llI11, II111)
			II111 = II111 or lI111(559345 + - 526223)
			local I1111 = II111 .. lI111(761744 - 728631)
			local l1111 = true
			for llI11, II111 in pairs(llI11) do
				if not l1111 then
					I1111 = I1111 .. lI111(- 773368 + 806906)
				end
				l1111 = false
				I1111 = I1111
				if type(llI11) == lI111(- 625139 + 658180) then
					I1111 = I1111 .. (lI111(132942 - 99171) .. (string[lI111(- 431405 + 465014)](lI111(234919 + - 201271), llI11) .. lI111(- 800953 + 834588)))
				else
					I1111 = I1111 .. (lI111(- 423555 - (- 457326)) .. (tostring(llI11) .. lI111(- 436526 + 470161)))
				end
				if type(II111) == lI111(163493 + - 130132) then
					I1111 = I1111 .. I1l11(II111)
				elseif type(II111) == lI111(- 231335 + 264376) then
					I1111 = I1111 .. string[lI111(- 518832 + 552441)](lI111(368171 + - 334523), II111)
				else
					I1111 = I1111 .. tostring(II111)
				end
			end
			I1111 = I1111 .. lI111(- 207322 - (- 240871))
			return I1111
		end
		local function l1l11(llI11)
			if llI11 == nil or type(llI11) ~= lI111(531008 - 497967) then
				return
			end
			return (loadstring(lI111(126807 - 93603) .. llI11))()
		end
		llI11[lI111(616512 - 583026)] = - 969534 - (- 969534)
		llI11[lI111(- 558741 - (- 592370))] = 970942 + - 970934
		-- llI11[lI111(- 141732 + 175173)] = LibStub(lI111(- 99875 + 133537))
		function llI11.GetRange(II111)
			local I1111, l1111 = llI11[lI111(15776 + 17665)]:GetRange(II111, true)
			if I1111 == nil and l1111 == nil then
				return 452562 - 452462, - 94911 - (- 95011)
			end
			if I1111 ~= nil and l1111 == nil then
				return I1111, I1111
			end
			if I1111 == nil and l1111 ~= nil then
				return l1111, l1111
			end
			return I1111, l1111
		end
		llI11[lI111(- 116964 + 150118)] = false
		llI11[lI111(- 887198 - (- 920445))] = true
		local Ill11 = {}
		local lll11 = {}
		function GetCombatValue(llI11)
			return lll11[llI11]
		end
		function GetCombatNumber(llI11)
			if Il111(lll11[llI11]) then
				return tonumber(lll11[llI11])
			else
				return 832442 - 832442
			end
		end
		function SetCombatValue(llI11, II111)
			lll11[llI11] = II111
		end
		function ClearCombatValues()
			table[lI111(- 1026880 + 1060061)](lll11)
		end
		local IIIl1 = {}
		function llI11.LoadConfigData()
			if not MySettings then
				MySettings = {}
			else
				local llI11 = MySettings[lI111(482283 - 448430)]
				if llI11 then
					llI11 = lIl11(llI11)
					IIIl1 = l1l11(llI11)
				end
			end
		end
		function llI11.SaveConfigData()
			local llI11 = I1l11(IIIl1)
			llI11 = IIl11(llI11)
			MySettings[lI111(605235 + - 571382)] = llI11
		end
		function GetConfig(llI11, II111)
			local lI111 = IIIl1
			if lI111[llI11] == nil and II111 ~= nil then
				lI111[llI11] = II111
			end
			return lI111[llI11]
		end
		local lIIl1 = {}
		local function I1Il1(llI11, II111)
			if not lIIl1[llI11] then
				lIIl1[llI11] = {}
			end
			table[lI111(- 421613 + 455530)](lIIl1[llI11], II111)
		end
		llI11[lI111(570802 + - 536766)] = I1Il1
		local function l1Il1(llI11, II111)
			for llI11, lI111 in pairs(lIIl1[llI11] or {}) do
				lI111(II111)
			end
		end
		llI11[lI111(247656 + - 213629)] = l1Il1
		function ResetConfig()
			IIIl1 = {}
			local llI11 = I1l11(IIIl1)
			llI11 = IIl11(llI11)
			MySettings[lI111(- 136616 - (- 170469))] = llI11
		end
		function SetConfig(llI11, II111, lI111)
			IIIl1[llI11] = II111
			if not lI111 then
				l1Il1(llI11, II111)
			end
		end
		function GetStatus(llI11, II111)
			return GetConfig(llI11, II111)
		end
		function GetStatusNumber(llI11)
			local II111 = GetStatus(llI11)
			if Il111(II111) then
				return tonumber(II111)
			else
				return 181670 + - 181670
			end
		end
		function GetStatusString(llI11)
			return GetStatus(llI11) or lI111(- 470959 + 504081)
		end
		llI11[lI111(- 1004047 - (- 1037632))] = GetStatus
		llI11[lI111(- 632308 + 665589)] = GetStatusNumber
		llI11[lI111(- 285993 + 319473)] = GetStatusString
		llI11[lI111(- 225778 - (- 258984))] = false
		llI11[lI111(863755 - 829690)] = .15
		llI11[lI111(- 769842 - (- 803129))] = SetConfig
		llI11[lI111(882747 + - 848718)] = GetConfig
		local IlIl1 = {}
		function SaveConfigValue(llI11, II111)
			IlIl1[llI11] = GetConfig(llI11, II111)
			SetConfig(llI11, II111)
		end
		function RestoreConfigValue(llI11)
			SetConfig(llI11, IlIl1[llI11])
		end
		function ToggleStatus(llI11, II111, I1111)
			if I1111 then
				for llI11, I1111 in pairs(llI11) do
					if I1111 ~= II111 then
						SetConfig(lI111(982910 + - 949451) .. I1111, false)
					end
				end
			end
		end
		function GetToggleStatus(llI11)
			for llI11, II111 in pairs(llI11) do
				if GetStatus(lI111(- 917002 - (- 950461)) .. II111) then
					return II111
				end
			end
		end
		llI11[lI111(- 71522 + 105137)] = {
			lI111(- 401900 + 435075),
			lI111(833376 - 799673)
		}
		local llIl1 = {}
		llI11[lI111(776696 + - 742989)] = llIl1
		llI11[lI111(923197 + - 889940)] = {}
		llI11[lI111(- 389973 - (- 423661))] = {}
		local II1l1 = llI11[lI111(912228 - 878971)]
		local lI1l1 = llI11[lI111(- 335978 + 369666)]
		local function I11l1(llI11, II111)
			GameTooltip:SetOwner(llI11)
			GameTooltip:SetText(tostring(llI11[lI111(232039 + - 198468)]))
			GameTooltip:AddLine(tostring(llI11[lI111(975934 + - 942233)]), 1057 - 1056, 718710 + - 718709, - 5983 - (- 5984), true)
			GameTooltip:Show()
		end
		local function l11l1(llI11, II111)
			GameTooltip:Hide()
		end
		local function Il1l1(llI11, II111)
			local I1111 = CreateFrame(lI111(797157 - 763896), nil, llI11, II111[lI111(167163 - 133156)] or lI111(957502 + - 924503))
			I1111:SetText(II111[lI111(- 521968 + 555831)])
			if type(II111[lI111(- 249792 - (- 283689))]) == lI111(- 902329 - (- 936381)) then
				I1111:SetScript(lI111(- 993590 - (- 1026688)), II111[lI111(- 384516 - (- 418413))])
			end
			if II111[lI111(51603 - 18081)] ~= nil then
				I1111[lI111(293545 + - 259974)] = II111[lI111(- 802361 + 836072)] or II111[lI111(239335 + - 205472)]
				I1111[lI111(- 180326 + 214027)] = II111[lI111(- 873866 - (- 907388))]
				I1111:SetScript(lI111(962110 + - 928992), I11l1)
				I1111:SetScript(lI111(539210 - 506096), l11l1)
			end
			return I1111
		end
		local function ll1l1(llI11, II111)
			local I1111 = CreateFrame(lI111(544753 + - 511100), nil, llI11, lI111(- 915415 - (- 948989)))
			I1111:SetSize(- 835816 - (- 835834), - 454300 - (- 454318))
			I1111[lI111(- 216023 - (- 249192))] = I1111:CreateFontString(nil, lI111(- 807862 - (- 840954)), lI111(- 775352 + 808499))
			I1111[lI111(- 66386 - (- 99555))]:SetPoint(lI111(51996 - 18273), I1111, lI111(- 511164 - (- 544625)), - 261416 + 261416, 787576 - 787576)
			I1111[lI111(377196 + - 344027)]:SetText(II111[lI111(927741 + - 893878)])
			local l1111, Il111 = I1111[lI111(68274 - 35105)]:GetFont()
			I1111[lI111(- 392220 - (- 425389))]:SetFont(l1111, 748087 + - 748073)
			I1111:SetScript(lI111(- 496422 - (- 529520)), function()
				SetConfig(II111[lI111(728375 + - 695012)], I1111:GetChecked())
			end)
			local ll111 = II111[lI111(- 300091 - (- 333802))] or II111[lI111(586034 + - 552171)]
			if ll111 and II111[lI111(- 83171 + 116693)] then
				I1111[lI111(- 18815 - (- 52386))] = ll111 or lI111(1043183 - 1010111)
				I1111[lI111(- 864891 + 898592)] = II111[lI111(- 349242 - (- 382764))] or lI111(- 499015 - (- 532849))
				I1111:SetScript(lI111(848855 - 815737), I11l1)
				I1111:SetScript(lI111(- 544881 + 577995), l11l1)
			end
			I1Il1(II111[lI111(- 961022 + 994385)], function(llI11)
				I1111:SetChecked(llI11)
				if type(II111[lI111(388308 - 354411)]) == lI111(- 431917 + 465969) then
					II111[lI111(557297 + - 523400)](I1111:GetChecked())
				end
			end)
			l1Il1(II111[lI111(- 621857 - (- 655220))], GetConfig(II111[lI111(260584 + - 227221)], II111[lI111(117088 - 83235)]))
			return I1111
		end
    print(lI111(783608 + - 749574))
		-- local IIll1, lIll1 = UnitFactionGroup(lI111(783608 + - 749574))
		local IIll1=nil
    local lIll1
		-- if IIll1 == lI111(384940 + - 351885) then
		-- 	llI11[lI111(- 764408 + 798328)] = GetSpellInfo(980158 + - 947976) or lI111(995243 - 961470)
		-- else
		-- 	llI11[lI111(1003647 + - 969727)] = GetSpellInfo(1027273 - 1024448) or lI111(- 421933 + 455231)
		-- end
		local function I1ll1()
			return llI11[lI111(- 991039 + 1024881)](lI111(448671 - 414637), 7641 - (- 50082)) or llI11[lI111(- 696566 + 730408)](lI111(209815 - 175781), 506794 - 449070)
		end
		llI11[lI111(- 905889 - (- 939517))] = I1ll1
		local function l1ll1()
			return llI11[lI111(962430 + - 928810)](lI111(1073650 - 1039616), - 925768 - (- 957950)) or llI11[lI111(- 651553 - (- 685173))](lI111(261145 - 227111), 806530 - 803705)
		end
		llI11[lI111(- 38933 - (- 72546))] = l1ll1
    print(lI111(- 808953 + 842180))
		local Illl1
		if true then
			Illl1 = {
				[lI111(113444 + - 79785)] = lI111(- 454318 + 488118);
				[lI111(- 948083 - (- 981694))] = lI111(- 414398 - (- 448366));
				[lI111(- 1008319 + 1041447)] = lI111(- 762319 - (- 795513));
				[lI111(- 913020 + 946899)] = lI111(- 492015 + 525496);
				[lI111(251624 + - 217929)] = lI111(- 663382 - (- 697462)),
				[lI111(548947 - 515120)] = lI111(728247 + - 695096);
				[lI111(658567 - 624563)] = lI111(620494 - 586482);
				[lI111(57383 - 24097)] = lI111(- 235687 + 269269);
				[lI111(- 936314 - (- 969662))] = lI111(741980 - 708854),
				[lI111(185254 + - 151416)] = lI111(187793 - 153829)
			}
		else
			Illl1 = {
				[lI111(34657 + - 998)] = lI111(572850 + - 539604);
				[lI111(- 973566 + 1007177)] = lI111(- 304514 - (- 337770));
				[lI111(8839 - (- 24289))] = lI111(374585 - 341419),
				[lI111(- 565234 + 599113)] = lI111(1074471 - 1040448),
				[lI111(916092 + - 882397)] = lI111(- 403437 + 436693),
				[lI111(147429 + - 113602)] = lI111(521318 - 487279);
				[lI111(54114 + - 20110)] = lI111(402284 + - 369256),
				[lI111(378668 + - 345382)] = lI111(- 731974 - (- 765304));
				[lI111(- 214692 - (- 248040))] = lI111(525611 - 492143);
				[lI111(845946 + - 812108)] = lI111(833082 + - 799761)
			}
		end
		local function llll1(II111, I1111)
			local l1111 = I1111[lI111(527554 - 494191)]
			local Il111 = I1111[lI111(502064 + - 468211)]
			local ll111 = CreateFrame(lI111(- 311466 + 344727), nil, II111, lI111(- 291561 + 324800))
			ll111:SetWidth(I1111[lI111(995449 - 961982)] or - 114276 + 114318)
			ll111:SetHeight(- 402988 + 403008)
			ll111[lI111(- 932797 + 966496)] = l1111
			ll111[lI111(- 970973 - (- 1004031))] = Il111
			ll111:SetScript(lI111(- 857595 + 890693), function(llI11)
				l1Il1(llI11[lI111(- 520112 + 553811)], 805241 - 805241)
			end)
			I1Il1(l1111, function(II111)
				if II111 ~= 853690 - 853690 then
					local I1111 = lI111(- 229351 + 262887)
					for llI11, l1111 in pairs(llI11[lI111(- 430061 + 463334)]) do
						if l1111[lI111(- 761495 - (- 795129))] == II111 then
							I1111 = l1111[lI111(- 1019840 + 1052934)]
						end
					end
					ll111:SetText(Illl1[l1111] .. I1111)
				end
			end)
			l1Il1(l1111, GetConfig(l1111, Il111))
			return ll111
		end
		HEAL_EDITBOX_EDITING = false
		local function IIIIl(II111, I1111, l1111, ll111)
			local IIl11 = CreateFrame(lI111(738341 - 704374), I1111 .. lI111(- 413037 + 446053), II111, lI111(769720 + - 736327))
			IIl11:SetSize(- 900156 + 900196, - 578290 + 578306)
			IIl11:SetMultiLine(false)
			IIl11:SetAutoFocus(false)
			IIl11:SetJustifyH(lI111(19269 - (- 14304)))
			IIl11:SetFont(ChatFontNormal:GetFont())
			IIl11:SetBackdrop({
				_;
				[lI111(- 747394 - (- 781048))] = lI111(258021 - 223975);
				_,
				_;
				[lI111(677493 + - 643582)] = 585650 + - 585645;
				_
			})
			IIl11[lI111(- 704438 + 738498)] = type(l1111)
			IIl11:SetScript(lI111(- 8096 + 42020), function(llI11)
				llI11:ClearFocus()
			end)
			IIl11:SetScript(lI111(- 860534 - (- 893884)), function(llI11)
				llI11:ClearFocus()
			end)
			IIl11:SetScript(lI111(353063 - 319594), function(llI11)
				llI11:ClearFocus()
			end)
			IIl11:SetScript(lI111(- 431357 - (- 465006)), function(llI11)
				llI11[lI111(279281 - 246120)] = llI11:GetText()
				HEAL_EDITBOX_EDITING = true
			end)
			IIl11:SetScript(lI111(- 536177 + 569175), function(II111)
				local l1111 = II111:GetText()
				if not Il111(l1111) then
					llI11[lI111(787000 + - 753221)](lI111(385004 + - 351551))
					if Il111(II111[lI111(- 692013 - (- 725174))]) then
						SetConfig(I1111, tonumber(II111[lI111(911228 + - 878067)]))
					else
						SetConfig(I1111, 571186 - 571186)
					end
				else
					SetConfig(I1111, tonumber(II111:GetText()))
				end
				HEAL_EDITBOX_EDITING = false
			end)
			I1Il1(I1111, function(llI11)
				IIl11:SetText(llI11)
				if type(ll111) == lI111(288300 - 254248) then
					ll111(llI11)
				end
			end)
			l1Il1(I1111, GetConfig(I1111, l1111))
			return IIl11
		end
		local lIIIl = {}
		local I1IIl
		local function l1IIl(llI11, II111)
			local I1111 = CreateFrame(lI111(181454 - 147493), nil, llI11, lI111(748455 - 715062))
			I1111[lI111(- 182149 - (- 215783))] = II111[lI111(- 259368 + 293002)]
			I1111:SetHeight(II111[lI111(638849 - 605811)])
			I1111:SetWidth(II111[lI111(396268 + - 362801)])
			I1111:SetPoint(lI111(- 299753 + 333600), - 312874 + 312874, 228297 - 228327)
			I1111[lI111(493935 + - 460874)] = I1111:CreateTexture(nil, lI111(165285 + - 131405), nil, 732279 + - 732272)
			I1111[lI111(815737 + - 782676)]:SetColorTexture(.1, .1, .1, .7)
			I1111[lI111(- 243176 + 276237)]:SetAllPoints()
			I1111:EnableMouse(true)
			I1111:SetMovable(true)
			I1111:SetClampedToScreen(true)
			I1111:RegisterForDrag(lI111(663797 + - 630104))
			I1111:SetScript(lI111(- 252648 - (- 286249)), function()
				local II111 = llI11
				II111:StartMoving()
				II111[lI111(- 818041 + 851359)] = true
			end)
			I1111:SetScript(lI111(636788 + - 603061), function()
				local II111 = llI11
				II111:StopMovingOrSizing()
				II111[lI111(- 196097 - (- 229415))] = false
				point, relativeTo, relativePoint, xOfs, yOfs = II111:GetPoint()
			end)
			if II111[lI111(814905 + - 781098)] == true then
				I1111[lI111(- 486255 + 519750)] = 277097 + - 277096
				I1111:Show()
			else
				I1111[lI111(611849 - 578354)] = 548465 + - 548465
				I1111:Hide()
			end
			return I1111
		end
		local function IlIIl(llI11, II111)
			local I1111 = CreateFrame(lI111(418605 + - 384952), nil, llI11, lI111(- 724342 + 757341))
			I1111[lI111(93188 - 59554)] = II111[lI111(930590 - 896956)]
			I1111:SetText(II111[lI111(- 33633 + 67496)])
			if II111[lI111(199078 + - 165920)] then
				I1111:SetWidth(II111[lI111(624056 - 590898)])
			else
				I1111:SetWidth(- 667336 - (- 667381))
			end
			I1111:SetPoint(lI111(639786 - 605939), II111[lI111(- 200550 + 234294)], - 591666 + 591661)
			if II111[lI111(304553 + - 271336)] and type(II111[lI111(- 927165 - (- 960382))]) == lI111(- 857019 + 891071) then
				II111[lI111(185318 - 152101)](I1111)
			end
			if II111[lI111(366699 + - 332802)] then
				I1111:SetScript(lI111(- 566121 - (- 599219)), II111[lI111(1045504 + - 1011607)])
			else
				I1111:SetScript(lI111(953278 + - 920180), function(llI11)
					for II111, I1111 in pairs(lIIIl) do
						if II111 == llI11[lI111(787929 - 754295)] then
							I1111[lI111(515184 + - 482075)]:Show()
							I1111[lI111(941393 - 908284)][lI111(547825 + - 514330)] = - 499823 + 499824
						else
							I1111[lI111(- 744183 + 777292)]:Hide()
							I1111[lI111(- 895592 - (- 928701))][lI111(- 62434 + 95929)] = 119780 - 119780
						end
					end
					I1IIl:SetText(lI111(619763 + - 586348))
				end)
			end
			return I1111
		end
		local function llIIl(llI11, II111, I1111)
			local l1111 = CreateFrame(lI111(931389 + - 897428), nil, UIParent)
			l1111[lI111(- 859707 + 893341)] = llI11
			l1111:SetHeight(I1111)
			l1111:SetWidth(II111)
			l1111:SetPoint(lI111(- 523772 - (- 557233)), 1036672 + - 1036772, - 614591 - (- 614771))
			local Il111 = GetConfig(lI111(104227 + - 71032))
			if Il111 == nil then
				l1111:SetPoint(lI111(42837 - 9376), 550897 + - 550997, 220955 - 220775)
			else
				local llI11, II111 = pcall(function()
					l1111:SetPoint(Il111[lI111(648372 + - 614628)], Il111[lI111(- 877435 + 910642)], Il111[lI111(- 98787 + 132354)], Il111[lI111(- 936315 - (- 969662))], Il111[lI111(989695 + - 956681)])
				end)
				if not llI11 then
					l1111:SetPoint(lI111(8020 - (- 25441)), 390024 - 390124, - 369515 + 369695)
				end
			end
			l1111[lI111(- 670133 + 703194)] = l1111:CreateTexture(nil, lI111(- 930214 - (- 964094)), nil, 316145 - 316138)
			l1111[lI111(- 660468 + 693529)]:SetColorTexture(.1, .1, .1, - 485294 - (- 485295))
			l1111[lI111(- 77602 + 110663)]:SetAllPoints()
			l1111:EnableMouse(true)
			l1111:SetMovable(true)
			l1111:SetClampedToScreen(true)
			l1111:RegisterForDrag(lI111(337962 + - 304269))
			l1111:SetScript(lI111(274408 - 240807), function()
				local llI11 = l1111
				llI11:StartMoving()
				llI11[lI111(- 57762 + 91080)] = true
			end)
			l1111:SetScript(lI111(765110 - 731383), function()
				local llI11 = l1111
				llI11:StopMovingOrSizing()
				llI11[lI111(- 530992 + 564310)] = false
				point, relativeTo, relativePoint, xOfs, yOfs = llI11:GetPoint()
				local II111 = {}
				II111[lI111(- 277850 - (- 311594))] = point
				II111[lI111(- 121070 - (- 154277))] = relativeTo
				II111[lI111(273256 + - 239689)] = relativePoint
				II111[lI111(708470 + - 675123)] = xOfs
				II111[lI111(- 703041 - (- 736055))] = yOfs
				SetConfig(lI111(- 514608 + 547803), II111)
			end)
			I1IIl = CreateFrame(lI111(648040 - 614387), nil, l1111, lI111(240295 + - 207296))
			I1IIl:SetText(lI111(- 822713 + 856128))
			I1IIl:SetWidth(721994 - 721974)
			I1IIl:SetPoint(lI111(359777 - 325930), II111 - (947389 + - 947369), - 4192 + 4187)
			I1IIl:SetScript(lI111(- 587049 - (- 620147)), function(llI11)
				if llI11:GetText() == lI111(- 262952 + 296367) then
					llI11:SetText(lI111(934269 + - 901166))
					for llI11, II111 in pairs(lIIIl) do
						II111[lI111(- 604083 + 637192)]:Hide()
					end
				else
					for llI11, II111 in pairs(lIIIl) do
						if II111[lI111(- 955006 + 988115)][lI111(669557 + - 636062)] == - 545264 - (- 545265) then
							II111[lI111(206502 + - 173393)]:Show()
						end
					end
					llI11:SetText(lI111(749303 + - 715888))
				end
			end)
			return l1111
		end
		local II1Il = - 65506 - (- 65506)
		local lI1Il = function(llI11, II111)
			if not llI11 then
				llI11 = (385324 + - 385302) + (II111 or 188774 + - 188774)
			end
			II1Il = II1Il - llI11
			return II1Il
		end
		local function I11Il()
			local II111 = - 459332 - (- 459822)
			local I1111 = - 12032 - (- 12192)
			local l1111 = {
				{
					[lI111(761625 - 727991)] = lI111(88625 - 55394),
					[lI111(- 988095 + 1021458)] = lI111(370347 + - 337116),
					[lI111(941571 - 907708)] = lI111(205769 - 172581);
					[lI111(- 668198 - (- 701942))] = - 377900 - (- 377900),
					[lI111(- 817977 + 851635)] = - 620403 - (- 620403),
					[lI111(- 1037952 + 1071700)] = 657844 + - 657874;
					[lI111(668986 - 635828)] = - 76450 + 76530,
					[lI111(- 158693 + 192160)] = I1111;
					[lI111(- 1007858 - (- 1040896))] = II111,
					[lI111(981886 + - 948079)] = true;
					[lI111(521304 - 487407)] = function(II111)
						local I1111 = false
						for llI11, II111 in pairs(lIIIl) do
							if llI11 == lI111(753463 + - 720232) then
								I1111 = II111[lI111(- 999295 + 1032404)]:IsShown()
								II111[lI111(840270 - 807161)]:Show()
								II111[lI111(215803 - 182694)][lI111(579314 + - 545819)] = 518256 + - 518255
							else
								II111[lI111(- 1632 + 34741)]:Hide()
								II111[lI111(- 287445 - (- 320554))][lI111(824954 + - 791459)] = 32609 + - 32609
							end
						end
						if I1111 then
							I1IIl:SetText(lI111(724086 + - 690671))
							local I1111 = llI11[lI111(- 690497 - (- 724086))]
							llI11[lI111(913596 + - 879610)](II111, I1111, GetConfig(lI111(- 394263 - (- 427757))), llI11[lI111(164517 + - 130938)])
						else
							I1IIl:SetText(lI111(- 1011257 - (- 1044672)))
						end
					end,
					[lI111(- 620083 + 653697)] = {
						{
							[lI111(932190 - 898812)] = lI111(- 697027 - (- 730807)),
							[lI111(232487 + - 199124)] = lI111(541661 - 508016);
							[lI111(278629 - 244776)] = false,
							[lI111(344747 + - 310884)] = lI111(156133 + - 122570),
							[lI111(- 260840 + 294362)] = lI111(- 379756 + 412758);
							[lI111(877883 + - 844139)] = 340336 - 340331,
							[lI111(- 178726 + 211979)] = false
						};
						{
							[lI111(- 603282 - (- 636660))] = lI111(438062 + - 404282),
							[lI111(417901 + - 384538)] = lI111(- 399513 - (- 432941));
							[lI111(574450 + - 540597)] = false,
							[lI111(800121 + - 766837)] = 886459 + - 886499,
							[lI111(935683 - 901820)] = lI111(1018705 - 984639);
							[lI111(- 645620 + 679142)] = lI111(- 578610 + 612509);
							[lI111(- 862587 + 896331)] = 314618 - 314538,
							[lI111(- 14112 + 47365)] = false;
							[lI111(- 666677 + 699713)] = lI111(88573 - 55394)
						};
						{
							[lI111(804762 - 771384)] = lI111(- 454894 + 488674);
							[lI111(- 401946 - (- 435309))] = lI111(- 624499 + 658055);
							[lI111(- 134308 + 168161)] = false;
							[lI111(- 739575 + 772859)] = - 416139 - (- 416109),
							[lI111(- 315812 - (- 349675))] = lI111(1041920 + - 1008064),
							[lI111(- 787896 + 821418)] = lI111(- 909336 - (- 943357)),
							[lI111(162469 + - 128725)] = - 542124 - (- 542129),
							[lI111(53538 + - 20285)] = true;
							[lI111(520635 - 487599)] = lI111(- 754333 - (- 787512))
						};
						{
							[lI111(- 134052 + 167430)] = lI111(- 506557 - (- 540337));
							[lI111(1035666 - 1002303)] = lI111(1032138 - 998719);
							[lI111(860347 + - 826494)] = false,
							[lI111(- 900988 + 934851)] = lI111(372174 - 338218);
							[lI111(- 634164 + 667686)] = lI111(379806 - 346731),
							[lI111(- 841323 - (- 875067))] = 729390 - 729335;
							[lI111(- 167589 + 200842)] = false;
							[lI111(574141 - 541105)] = lI111(207424 - 174245)
						};
						{
							[lI111(618196 - 584818)] = lI111(- 256808 + 290588),
							[lI111(241255 + - 207892)] = lI111(391057 - 357227);
							[lI111(- 407725 + 441578)] = false;
							[lI111(573176 - 539313)] = lI111(915132 + - 881872);
							[lI111(935101 + - 901579)] = lI111(367531 + - 333648);
							[lI111(- 709351 - (- 743095))] = - 330817 - (- 330922);
							[lI111(- 188290 - (- 221543))] = false;
							[lI111(- 885179 + 918215)] = lI111(- 275151 - (- 308330))
						},
						{
							[lI111(- 166565 + 199943)] = lI111(1019460 - 985471);
							[lI111(786250 - 752887)] = lI111(825338 + - 792154),
							[lI111(- 353835 + 387698)] = lI111(911355 - 877627);
							[lI111(637492 + - 603781)] = lI111(887637 - 854394),
							[lI111(258216 + - 224694)] = lI111(- 244241 - (- 277289));
							[lI111(- 205990 + 239457)] = - 415341 + 415441;
							[lI111(- 168037 + 201075)] = - 595314 + 595339;
							[lI111(- 15200 + 48944)] = - 218855 + 218910;
							[lI111(309902 - 276649)] = false,
							[lI111(736759 + - 703723)] = lI111(- 612595 + 645829);
							[lI111(723126 + - 689909)] = function(llI11)
								llI11:SetText(lI111(- 315754 + 349046) .. (# GetConfig(lI111(517654 - 483695), {}) .. (lI111(253513 - 220263) .. (# GetConfig(lI111(- 732412 - (- 765560)), {}) .. lI111(- 894460 + 927472)))))
							end,
							[lI111(- 306217 + 340114)] = function(II111)
								llI11[lI111(857467 + - 824128)](II111, llI11[lI111(- 172005 + 205723)], llI11[lI111(958394 - 925373)])
							end
						},
						{
							[lI111(369420 - 336042)] = lI111(546097 + - 512317),
							[lI111(1031378 - 998015)] = lI111(212775 + - 178734),
							[lI111(- 253928 + 287781)] = true;
							[lI111(- 245736 + 279599)] = lI111(- 820011 - (- 853050));
							[lI111(832442 + - 798920)] = lI111(- 276073 + 309823);
							[lI111(- 903292 + 937036)] = 248813 - 248808;
							[lI111(- 1028544 + 1061828)] = - 60386 + 60326,
							[lI111(837370 + - 804117)] = true,
							[lI111(1075724 - 1042688)] = lI111(- 577714 + 610948)
						};
						{
							[lI111(911645 - 878267)] = lI111(- 825907 - (- 859899));
							[lI111(- 934013 + 967376)] = lI111(1019741 - 986047),
							[lI111(695986 - 662133)] = 814521 + - 814429,
							[lI111(- 387756 + 421500)] = - 442250 - (- 442350),
							[lI111(527419 - 494383)] = lI111(- 187174 + 220408);
							[lI111(- 736769 - (- 770040))] = lI111(- 215015 + 248472);
							[lI111(997731 - 964478)] = false
						},
						{
							[lI111(- 311305 - (- 344683))] = lI111(- 134065 - (- 167845)),
							[lI111(9202 - (- 24161))] = lI111(- 198759 - (- 232743));
							[lI111(748023 + - 714170)] = true;
							[lI111(- 488105 - (- 521968))] = lI111(- 100909 - (- 134692)),
							[lI111(337706 + - 304184)] = lI111(665612 - 631988);
							[lI111(- 750184 - (- 783928))] = 113572 + - 113567;
							[lI111(42220 - 9184)] = lI111(- 340186 - (- 373420));
							[lI111(- 686389 + 719673)] = - 896248 - (- 896188);
							[lI111(753719 + - 720466)] = true
						},
						{
							[lI111(- 911868 + 945246)] = lI111(- 870580 - (- 904572));
							[lI111(- 48161 + 81524)] = lI111(659696 - 625651);
							[lI111(- 573298 + 607151)] = 980794 - 980734,
							[lI111(- 256872 + 290616)] = 577814 - 577714,
							[lI111(- 185264 - (- 218535))] = lI111(- 615155 + 648612);
							[lI111(- 893208 - (- 926461))] = false,
							[lI111(- 548337 + 581373)] = lI111(240696 - 207462)
						};
						{
							[lI111(- 882683 + 916061)] = lI111(- 284009 + 317789);
							[lI111(- 736613 - (- 769976))] = lI111(- 81883 - (- 115108)),
							[lI111(- 65446 - (- 99299))] = false;
							[lI111(- 870907 + 904770)] = lI111(- 325394 - (- 358571));
							[lI111(591538 + - 558016)] = lI111(31137 + 2059);
							[lI111(- 39073 + 72817)] = 12448 + - 12443;
							[lI111(595509 - 562225)] = - 154661 + 154601;
							[lI111(- 775288 + 808541)] = true;
							[lI111(42145 + - 9109)] = lI111(558449 + - 525215)
						},
						{
							[lI111(- 705590 + 738968)] = lI111(465390 + - 431398);
							[lI111(646470 - 613107)] = lI111(979774 + - 946505);
							[lI111(- 316078 - (- 349931))] = 1009561 - 1009471,
							[lI111(511024 + - 477753)] = lI111(- 742199 + 775656),
							[lI111(- 519009 - (- 552753))] = - 283241 + 283341,
							[lI111(651764 + - 618511)] = false;
							[lI111(- 80098 + 113134)] = lI111(1016784 - 983550)
						},
						{
							[lI111(392940 + - 359562)] = lI111(- 894716 + 928496),
							[lI111(457152 - 423789)] = lI111(732196 - 699190),
							[lI111(- 341099 + 374952)] = false;
							[lI111(- 965176 - (- 999039))] = lI111(803257 + - 769732);
							[lI111(730551 + - 697029)] = lI111(- 551345 + 584547),
							[lI111(54193 - 20449)] = 226535 + - 226530;
							[lI111(282025 + - 248741)] = - 624145 - (- 624115);
							[lI111(- 208771 - (- 242024))] = true;
							[lI111(- 820846 - (- 853882))] = lI111(- 53841 - (- 87075));
							[lI111(753207 + - 719820)] = lI111(851953 - 818745),
							[lI111(- 463302 - (- 497199))] = function(llI11)
								if llI11 then
									SetConfig(lI111(487246 - 453998), false)
									SetConfig(lI111(605687 - 572338), false)
									SetConfig(lI111(- 362037 - (- 395628)), 690037 + - 689962)
								end
							end
						},
						{
							[lI111(323659 - 290281)] = lI111(938813 + - 905033),
							[lI111(891260 + - 857897)] = lI111(553424 - 520176);
							[lI111(21533 - (- 12320))] = true,
							[lI111(- 315306 + 349169)] = lI111(627827 - 594098);
							[lI111(1028401 - 994879)] = lI111(- 841197 - (- 875131));
							[lI111(271351 - 237607)] = - 302697 + 302757,
							[lI111(890879 - 857595)] = 600917 - 600947;
							[lI111(210698 - 177445)] = false,
							[lI111(167344 - 134308)] = lI111(- 101987 + 135221);
							[lI111(986751 + - 953364)] = lI111(752823 + - 719615);
							[lI111(- 507144 - (- 541041))] = function(llI11)
								if llI11 then
									SetConfig(lI111(- 917756 + 950762), false)
									SetConfig(lI111(- 1030272 + 1063621), false)
									SetConfig(lI111(1017589 - 983998), 103239 - 103139)
								end
							end
						},
						{
							[lI111(506992 + - 473614)] = lI111(493538 - 459758);
							[lI111(- 217365 - (- 250728))] = lI111(- 236451 - (- 269800)),
							[lI111(- 325422 - (- 359275))] = false,
							[lI111(- 25313 + 59176)] = lI111(938813 + - 905604),
							[lI111(- 513983 - (- 547505))] = lI111(- 983742 + 1017342),
							[lI111(796424 - 762680)] = 1032814 - 1032704;
							[lI111(615923 + - 582639)] = 185318 + - 185348,
							[lI111(849274 + - 816021)] = false,
							[lI111(358454 - 325418)] = lI111(- 311129 - (- 344363)),
							[lI111(1001727 + - 968340)] = lI111(- 923069 + 956277);
							[lI111(375468 + - 341571)] = function(llI11)
								if llI11 then
									SetConfig(lI111(- 4467 - (- 37473)), false)
									SetConfig(lI111(- 880348 - (- 913596)), false)
									SetConfig(lI111(790062 - 756471), - 458542 + 458667)
								end
							end
						};
						{
							[lI111(- 68770 + 102148)] = lI111(- 821241 + 855230);
							[lI111(- 566560 - (- 599923))] = lI111(- 482799 + 516754),
							[lI111(- 767538 - (- 801401))] = lI111(94241 - 61218);
							[lI111(141668 + - 107957)] = lI111(- 926205 + 960095);
							[lI111(- 945612 - (- 979134))] = lI111(740277 - 706870);
							[lI111(495087 + - 461620)] = 504176 + - 504096,
							[lI111(- 1047872 + 1080910)] = - 761976 + 762001,
							[lI111(347435 + - 313691)] = 784893 - 784888;
							[lI111(- 640336 - (- 673589))] = - 819449 + 819544,
							[lI111(879419 + - 846383)] = lI111(- 758520 + 791754),
							[lI111(- 841746 - (- 875643))] = function(II111)
								llI11[lI111(795321 + - 761733)](lI111(- 703606 + 737527), lI111(23521 + 10434), lI111(822970 + - 789295), true)
							end
						};
						{
							[lI111(394381 - 361003)] = lI111(- 84191 - (- 118180)),
							[lI111(- 734629 - (- 767992))] = lI111(- 741077 - (- 774264)),
							[lI111(389810 - 355947)] = lI111(19361 + 13958);
							[lI111(52243 - 18721)] = lI111(- 571378 + 605215),
							[lI111(982910 + - 949443)] = - 1038720 + 1038795,
							[lI111(- 605542 - (- 638580))] = - 1026432 + 1026457;
							[lI111(- 946429 + 980173)] = 570626 - 570546;
							[lI111(353679 - 320426)] = 317034 + - 316939,
							[lI111(329962 + - 296926)] = lI111(- 906300 + 939534);
							[lI111(- 227815 + 261712)] = function(II111)
								llI11[lI111(- 847354 + 880942)](lI111(34081 + - 762), lI111(1016033 - 982846), lI111(- 832341 - (- 865787)), true)
							end
						};
						{
							[lI111(67011 - 33633)] = lI111(571941 - 538161),
							[lI111(551363 - 518000)] = lI111(692835 - 659252),
							[lI111(673969 - 640116)] = true;
							[lI111(10854 - (- 23009))] = lI111(33150 - (- 864));
							[lI111(- 935805 + 969516)] = lI111(366216 - 332202);
							[lI111(- 179430 + 212952)] = lI111(646964 + - 613031);
							[lI111(279273 + - 245529)] = - 501552 + 501557;
							[lI111(802041 + - 768788)] = 454638 + - 454568;
							[lI111(- 480996 - (- 514032))] = lI111(- 795449 + 829263),
							[lI111(- 413485 + 446702)] = function(II111)
								if not llI11[lI111(629236 + - 595672)] or not llI11[lI111(595906 - 562417)](llI11[lI111(- 858464 - (- 892028))]) then
									II111:Disable()
								end
							end
						};
						{
							[lI111(- 349386 - (- 382764))] = lI111(274395 - 240615);
							[lI111(749705 - 716342)] = lI111(1047040 + - 1013170),
							[lI111(288233 + - 254380)] = true;
							[lI111(- 409581 + 443444)] = lI111(- 645812 + 679624),
							[lI111(- 473854 - (- 507376))] = lI111(983823 - 950013),
							[lI111(308650 + - 274906)] = - 991807 + 991887,
							[lI111(- 141184 - (- 174437))] = 675131 - 675061;
							[lI111(- 378284 + 411320)] = lI111(779209 - 745975)
						}
					}
				},
				{
					[lI111(- 475726 - (- 509360))] = lI111(961266 - 927869);
					[lI111(386302 - 352939)] = lI111(- 366763 + 400160),
					[lI111(286255 - 252392)] = lI111(456302 + - 422434);
					[lI111(579179 - 545521)] = - 547633 - (- 547633);
					[lI111(- 778341 - (- 812089))] = 33884 - 33889,
					[lI111(1080006 - 1046848)] = - 182462 - (- 182502),
					[lI111(- 588280 - (- 621747))] = I1111;
					[lI111(112688 - 79650)] = II111;
					[lI111(- 863035 + 896842)] = false,
					[lI111(88304 - 54690)] = {
						{
							[lI111(515824 + - 482446)] = lI111(394860 + - 361288);
							[lI111(283451 - 250088)] = lI111(251816 + - 218553),
							[lI111(- 95331 + 129184)] = lI111(- 242551 - (- 276009)),
							[lI111(- 872769 - (- 906236))] = - 194406 + 194566;
							[lI111(- 277289 + 310327)] = 186111 - 186086;
							[lI111(- 2513 - (- 36257))] = - 962804 - (- 962814);
							[lI111(722650 - 689397)] = - 398060 + 398095
						}
					}
				};
				{
					[lI111(330059 - 296425)] = lI111(8032 + 25123);
					[lI111(- 984621 - (- 1017984))] = lI111(- 133858 - (- 167013)),
					[lI111(964414 + - 930551)] = lI111(- 441129 - (- 474671)),
					[lI111(130333 - 96675)] = - 522864 + 522864;
					[lI111(913404 + - 879656)] = - 169962 - (- 169957);
					[lI111(- 611699 + 644857)] = - 962750 + 962790;
					[lI111(- 202278 + 235745)] = I1111,
					[lI111(627200 - 594162)] = II111,
					[lI111(- 389740 + 423547)] = false;
					[lI111(- 475298 - (- 508912))] = {
						{
							[lI111(- 197701 - (- 231079))] = lI111(- 180710 + 214490);
							[lI111(506480 + - 473117)] = lI111(- 657943 - (- 691829));
							[lI111(748019 - 714166)] = true,
							[lI111(817657 + - 783794)] = lI111(- 646676 - (- 680501)),
							[lI111(204518 + - 170996)] = lI111(- 1027520 + 1061329);
							[lI111(436846 + - 403562)] = 183274 - 183334;
							[lI111(- 583858 + 617602)] = 604024 - 604019;
							[lI111(- 247848 + 281101)] = true;
							[lI111(- 7893 - (- 40929))] = lI111(- 245480 + 278659);
							[lI111(552475 - 519088)] = lI111(- 162663 - (- 196198))
						};
						{
							[lI111(912892 + - 879514)] = lI111(545201 + - 511421);
							[lI111(- 639860 + 673223)] = lI111(566834 - 533169),
							[lI111(1050429 - 1016576)] = true,
							[lI111(745277 - 711414)] = lI111(- 1042560 + 1076499);
							[lI111(- 915147 - (- 948669))] = lI111(- 279650 - (- 313578));
							[lI111(173989 + - 140705)] = 17313 + - 17373;
							[lI111(- 897276 + 931020)] = - 897532 + 897612;
							[lI111(- 628403 + 661656)] = false,
							[lI111(- 480740 - (- 513776))] = lI111(592050 + - 558871),
							[lI111(- 923709 + 957096)] = lI111(- 150309 + 183844)
						};
						{
							[lI111(764984 + - 731606)] = lI111(- 52463 - (- 86243)),
							[lI111(- 834938 + 868301)] = lI111(- 535892 - (- 569650));
							[lI111(660596 + - 626743)] = false,
							[lI111(- 687093 + 720956)] = lI111(- 292393 + 325908),
							[lI111(- 373374 - (- 407085))] = lI111(- 194918 + 228516);
							[lI111(- 576321 - (- 609843))] = lI111(801337 + - 767727),
							[lI111(- 298345 + 331629)] = 429613 + - 429643;
							[lI111(280120 - 246376)] = - 717046 + 717051,
							[lI111(- 95075 + 128328)] = true;
							[lI111(472239 + - 439203)] = lI111(58146 + - 24967);
							[lI111(- 489647 + 523034)] = lI111(- 73634 + 107169);
							[lI111(373012 - 339115)] = function(llI11)
								if llI11 then
									SetConfig(lI111(- 164462 - (- 198118)), false)
								end
							end
						};
						{
							[lI111(258856 + - 225478)] = lI111(924528 - 890748),
							[lI111(- 161573 + 194936)] = lI111(822201 + - 788545),
							[lI111(792185 + - 758332)] = true,
							[lI111(- 463464 - (- 497327))] = llI11[lI111(- 489839 + 523759)];
							[lI111(- 200184 - (- 233895))] = lI111(1006015 + - 972713) .. (llI11[lI111(630386 - 596466)] .. lI111(648820 + - 614956));
							[lI111(- 962238 + 995760)] = llI11[lI111(987198 - 953278)] .. lI111(- 341986 - (- 375788));
							[lI111(- 633716 + 667000)] = - 454702 + 454672,
							[lI111(- 150422 - (- 184166))] = 948541 + - 948481;
							[lI111(451118 + - 417865)] = false,
							[lI111(219250 - 186214)] = lI111(- 367403 + 400582),
							[lI111(470553 - 437166)] = lI111(266790 - 233255),
							[lI111(203750 + - 169853)] = function(llI11)
								if llI11 then
									SetConfig(lI111(- 798364 - (- 832122)), false)
								end
							end
						},
						{
							[lI111(356556 - 323178)] = lI111(- 105072 - (- 138852)),
							[lI111(- 500336 + 533699)] = lI111(6496 + 26584),
							[lI111(- 491567 + 525420)] = false;
							[lI111(332976 - 299113)] = lI111(- 672565 + 705814);
							[lI111(- 225127 + 258838)] = lI111(43573 - 10336);
							[lI111(638501 - 604979)] = lI111(549041 + - 515337);
							[lI111(866427 + - 833143)] = - 6654 - (- 6624);
							[lI111(- 969854 + 1003598)] = - 218599 + 218709,
							[lI111(- 917116 + 950369)] = false,
							[lI111(- 595250 + 628286)] = lI111(- 337873 - (- 371052)),
							[lI111(- 509296 + 542683)] = lI111(- 520754 - (- 554289))
						};
						{
							[lI111(- 858043 + 891421)] = lI111(882862 - 849082),
							[lI111(936591 - 903228)] = lI111(553731 - 520624);
							[lI111(930489 - 896636)] = true;
							[lI111(248872 + - 215009)] = lI111(17821 - (- 15776));
							[lI111(799417 + - 765706)] = llI11[lI111(- 877948 - (- 911868))] .. lI111(233952 - 200870);
							[lI111(- 604147 + 637669)] = llI11[lI111(- 58530 + 92450)] .. lI111(- 670329 - (- 704310)),
							[lI111(526195 - 492911)] = 60356 - 60386,
							[lI111(182950 + - 149206)] = 74594 + - 74589,
							[lI111(435566 + - 402313)] = true;
							[lI111(- 46614 - (- 79650))] = lI111(- 409133 + 442312);
							[lI111(- 170853 + 204240)] = lI111(614385 - 580850)
						};
						{
							[lI111(- 791960 - (- 825338))] = lI111(- 718275 - (- 752055)),
							[lI111(- 783526 - (- 816889))] = lI111(- 601587 + 635115),
							[lI111(- 231019 - (- 264872))] = true;
							[lI111(- 732791 + 766654)] = lI111(- 265423 - (- 298665));
							[lI111(179814 + - 146103)] = lI111(279785 + - 246353),
							[lI111(- 535168 - (- 568690))] = lI111(895690 - 861691);
							[lI111(448238 + - 414954)] = - 186790 + 186780,
							[lI111(327594 + - 293850)] = 324700 - 324650,
							[lI111(116260 + - 83007)] = false,
							[lI111(658943 - 625907)] = lI111(- 199334 + 232513);
							[lI111(- 565576 - (- 598963))] = lI111(668853 + - 635318)
						},
						{
							[lI111(525201 - 491823)] = lI111(- 496124 - (- 529904));
							[lI111(- 77712 - (- 111075))] = lI111(189464 - 156133),
							[lI111(683185 - 649332)] = false,
							[lI111(- 643764 + 677627)] = lI111(505897 - 472367),
							[lI111(314730 + - 281019)] = lI111(530480 + - 496485);
							[lI111(- 410684 - (- 444206))] = lI111(- 174565 + 208231);
							[lI111(- 856123 + 889407)] = - 508912 + 508902;
							[lI111(- 371229 - (- 404973))] = - 66338 + 66423,
							[lI111(- 64482 + 97735)] = false;
							[lI111(- 390241 - (- 423277))] = lI111(- 246478 - (- 279657));
							[lI111(31307 - (- 2080))] = lI111(- 401452 + 434987)
						};
						{
							[lI111(215527 + - 182149)] = lI111(1079540 - 1045760),
							[lI111(- 366425 - (- 399788))] = lI111(- 106388 - (- 140004)),
							[lI111(- 120488 - (- 154341))] = false;
							[lI111(429101 + - 395238)] = lI111(- 601075 + 634880);
							[lI111(22031 - (- 11680))] = lI111(- 438062 + 471976);
							[lI111(65250 + - 31728)] = lI111(- 807873 - (- 841722)),
							[lI111(- 58082 + 91366)] = 721132 - 721142;
							[lI111(404525 + - 370781)] = 254056 + - 253936;
							[lI111(- 149285 + 182538)] = false,
							[lI111(- 21345 + 54381)] = lI111(578418 + - 545239),
							[lI111(- 123172 + 156559)] = lI111(- 431533 + 465068)
						};
						{
							[lI111(993056 - 959678)] = lI111(142167 - 108387),
							[lI111(853818 + - 820455)] = lI111(980542 + - 947153),
							[lI111(- 66918 - (- 100771))] = false,
							[lI111(946755 - 912892)] = lI111(- 823730 - (- 857275)),
							[lI111(61075 - 27553)] = lI111(140777 - 107363),
							[lI111(- 772713 - (- 806457))] = 182379 - 182374;
							[lI111(490863 + - 457579)] = 9184 + - 9244;
							[lI111(- 228519 + 261772)] = true,
							[lI111(1021195 - 988159)] = lI111(846138 + - 812904),
							[lI111(- 868923 + 902310)] = lI111(543464 - 510256)
						},
						{
							[lI111(- 304456 - (- 337834))] = lI111(914236 + - 880244),
							[lI111(337962 + - 304599)] = lI111(403062 - 369003),
							[lI111(698354 - 664501)] = 584852 - 584754;
							[lI111(262440 + - 228696)] = - 306309 - (- 306409),
							[lI111(- 48300 - (- 81571))] = lI111(- 406317 + 439774),
							[lI111(791773 - 758520)] = false;
							[lI111(151269 + - 118233)] = lI111(- 78737 - (- 111971)),
							[lI111(- 8672 + 42059)] = lI111(- 202287 - (- 235495))
						},
						{
							[lI111(180134 + - 146756)] = lI111(950653 + - 916873),
							[lI111(- 658466 - (- 691829))] = lI111(700790 + - 666837);
							[lI111(- 315438 - (- 349291))] = false;
							[lI111(327210 + - 293347)] = lI111(- 839909 - (- 873851));
							[lI111(916717 - 883195)] = lI111(- 874939 + 908620),
							[lI111(- 578482 + 612226)] = 284777 + - 284772,
							[lI111(175333 + - 141534)] = - 978878 + 978900,
							[lI111(497775 + - 464491)] = 1039719 - 1039744,
							[lI111(846522 + - 813269)] = 846074 + - 845884,
							[lI111(- 127610 - (- 160997))] = lI111(862715 + - 829180)
						};
						{
							[lI111(11488 + 21890)] = lI111(- 971070 + 1005059);
							[lI111(293563 - 260200)] = lI111(1033152 + - 999985);
							[lI111(180396 - 146533)] = lI111(- 895784 - (- 929469)),
							[lI111(- 180536 - (- 214247))] = lI111(549600 - 516016),
							[lI111(- 755718 - (- 789240))] = lI111(242836 - 209382),
							[lI111(369957 - 336490)] = - 750739 - (- 750839);
							[lI111(548081 + - 515043)] = - 707766 + 707791,
							[lI111(- 437599 - (- 471343))] = 1041591 - 1041536;
							[lI111(- 63358 - (- 96611))] = 187686 + - 187496,
							[lI111(1040320 + - 1006933)] = lI111(976444 - 942909),
							[lI111(215015 + - 181798)] = function(llI11)
								local II111 = GetConfig(lI111(- 554289 + 588371))
								if II111 then
									llI11:SetText(II111)
								else
									llI11:SetText(lI111(355947 + - 322411))
								end
							end;
							[lI111(- 346243 - (- 380140))] = function(II111)
								llI11[lI111(1031936 + - 998076)](lI111(- 348779 + 382290), lI111(253878 - 220711), lI111(236455 + - 202373), II111, llI11[lI111(632308 + - 599073)], GetConfig(lI111(204134 + - 170052)))
							end
						};
						{
							[lI111(30241 + 3137)] = lI111(1014079 + - 980090);
							[lI111(- 362155 + 395518)] = lI111(228754 - 194854),
							[lI111(905468 + - 871605)] = lI111(- 211559 + 245292),
							[lI111(192468 - 158757)] = lI111(858363 + - 825356),
							[lI111(72403 - 38881)] = lI111(668469 + - 634919),
							[lI111(- 217069 - (- 250536))] = 331386 - 331306,
							[lI111(- 716726 + 749764)] = - 732387 - (- 732407);
							[lI111(- 623411 + 657155)] = - 346923 - (- 346923),
							[lI111(- 525872 + 559125)] = - 470769 - (- 470959),
							[lI111(- 453956 - (- 487343))] = lI111(152741 + - 119533);
							[lI111(- 837242 + 870459)] = function(llI11)
								local II111 = GetConfig(lI111(899313 - 866171))
								if II111 then
									local I1111 = GetItemInfo(II111) or lI111(- 636980 + 670102)
									llI11:SetText(string[lI111(676277 + - 642753)](I1111, 710774 + - 710773, 249832 + - 249820))
								else
									llI11:SetText(lI111(636856 - 603123))
								end
							end,
							[lI111(- 3640 - (- 37537))] = function(II111)
								llI11[lI111(512585 - 478959)](lI111(394732 + - 360999), II111, lI111(- 825018 + 858160), true)
							end
						};
						{
							[lI111(72387 - 39009)] = lI111(- 350119 - (- 384108));
							[lI111(- 531888 + 565251)] = lI111(75490 + - 41629);
							[lI111(- 797107 - (- 830970))] = lI111(- 370396 - (- 403693));
							[lI111(- 354301 - (- 388012))] = lI111(936637 + - 903340),
							[lI111(- 385467 - (- 418989))] = lI111(139620 + - 106503),
							[lI111(- 784056 + 817523)] = 300537 - 300457,
							[lI111(- 330013 - (- 363051))] = - 688545 - (- 688565);
							[lI111(- 59362 + 93106)] = - 540145 + 540225,
							[lI111(- 100415 - (- 133668))] = 855289 - 855099,
							[lI111(- 280681 + 314068)] = lI111(- 759672 + 792880),
							[lI111(943549 - 910332)] = function(llI11)
								local II111 = GetConfig(lI111(- 771632 - (- 805305)))
								if II111 then
									local I1111 = GetItemInfo(II111) or lI111(674390 - 641268)
									llI11:SetText(string[lI111(472674 - 439150)](I1111, - 267175 - (- 267176), - 412705 - (- 412717)))
								else
									llI11:SetText(lI111(847994 + - 814697))
								end
							end,
							[lI111(910780 + - 876883)] = function(II111)
								llI11[lI111(- 106083 + 139709)](lI111(- 141652 - (- 174949)), II111, lI111(- 622187 - (- 655860)), false)
							end
						},
						{
							[lI111(143685 - 110307)] = lI111(331741 - 297961);
							[lI111(- 614561 - (- 647924))] = lI111(- 333258 - (- 366571));
							[lI111(- 110563 + 144416)] = true,
							[lI111(- 782258 - (- 816121))] = lI111(- 18509 - (- 52066));
							[lI111(- 830409 - (- 863931))] = lI111(- 191150 - (- 224807));
							[lI111(838394 + - 804650)] = 926141 + - 926136;
							[lI111(665241 - 631988)] = 690101 + - 689931
						},
						{
							[lI111(1015136 - 981758)] = lI111(- 862587 + 896579),
							[lI111(- 869371 + 902734)] = lI111(665269 + - 631838);
							[lI111(- 874363 + 908216)] = 921597 + - 921547,
							[lI111(- 679974 - (- 713718))] = 698678 + - 698578;
							[lI111(- 828154 + 861425)] = lI111(- 294393 - (- 327850)),
							[lI111(- 17953 + 51206)] = 116110 - 115940
						},
						{
							[lI111(446415 - 413037)] = lI111(- 439470 + 473250),
							[lI111(- 895420 + 928783)] = lI111(- 414061 + 447401),
							[lI111(1056893 - 1023040)] = true,
							[lI111(- 763512 + 797375)] = lI111(- 825722 + 859131);
							[lI111(- 462702 + 496224)] = lI111(- 578994 + 612345);
							[lI111(- 692006 - (- 725750))] = - 259048 + 259053;
							[lI111(- 454958 + 488211)] = 915772 + - 915622
						},
						{
							[lI111(- 354762 - (- 388140))] = lI111(- 844090 + 878082),
							[lI111(- 984191 + 1017554)] = lI111(368299 - 334314),
							[lI111(452330 - 418477)] = 18017 + - 17967,
							[lI111(548273 + - 514529)] = 470895 + - 470795;
							[lI111(- 64300 - (- 97571))] = lI111(- 1040064 + 1073521);
							[lI111(- 482287 + 515540)] = - 688223 - (- 688373)
						};
						{
							[lI111(430350 - 396972)] = lI111(- 851015 - (- 884795));
							[lI111(- 988095 + 1021458)] = lI111(- 421293 + 455164),
							[lI111(- 506996 - (- 540849))] = true;
							[lI111(798975 - 765112)] = lI111(112035 + - 78253);
							[lI111(812665 + - 779143)] = lI111(387244 + - 353575);
							[lI111(149556 - 115812)] = 354411 + - 354406;
							[lI111(274152 + - 240899)] = 18467 - 18337
						},
						{
							[lI111(- 57122 + 90500)] = lI111(732542 - 698550),
							[lI111(665543 - 632180)] = lI111(827409 - 794041),
							[lI111(- 830398 - (- 864251))] = - 688949 + 688984;
							[lI111(387820 + - 354076)] = 761528 + - 761428;
							[lI111(565543 - 532272)] = lI111(- 245160 + 278617);
							[lI111(687001 - 653748)] = 110373 - 110243
						},
						{
							[lI111(- 85186 - (- 118564))] = lI111(- 691829 + 725609);
							[lI111(75636 - 42273)] = lI111(1011781 - 978238),
							[lI111(- 447090 - (- 480943))] = true;
							[lI111(- 314090 + 347953)] = lI111(831186 - 797497);
							[lI111(- 682564 - (- 716086))] = lI111(- 891644 + 924781),
							[lI111(- 372829 - (- 406573))] = 21862 - 21857;
							[lI111(- 122465 - (- 155749))] = 737975 + - 738015,
							[lI111(934497 - 901244)] = - 382462 - (- 382572)
						};
						{
							[lI111(- 960477 - (- 993855))] = lI111(- 360440 - (- 394220)),
							[lI111(487297 - 453934)] = lI111(404525 + - 371200);
							[lI111(- 391020 + 424873)] = true,
							[lI111(- 323818 + 357681)] = lI111(- 700214 + 734092);
							[lI111(- 643380 + 676902)] = lI111(407597 + - 373520),
							[lI111(408188 - 374444)] = - 740279 + 740359;
							[lI111(- 510573 - (- 543857))] = - 393492 - (- 393452),
							[lI111(- 3168 + 36421)] = - 254056 + 254166;
							[lI111(811361 - 777464)] = function(II111)
								if II111 then
									llI11[lI111(774008 + - 740802)] = true
									SetCVar(lI111(- 317007 - (- 350699)), GetCVarDefault(lI111(400812 + - 367120)))
									llI11[lI111(- 888353 - (- 922045))] = (tonumber(GetCVar(lI111(- 32929 + 66621))) or 964222 + - 963822) / (- 600331 - (- 601331)) - llI11[lI111(351979 + - 317914)]
									if llI11[lI111(- 1005092 - (- 1038784))] < 281961 - 281961 then
										llI11[lI111(- 694939 - (- 728631))] = 30753 - 30753
									end
								else
									llI11[lI111(380001 - 346795)] = false
									SetCVar(lI111(- 155146 - (- 188838)), - 385324 + 385524)
									llI11[lI111(297257 + - 263565)] = (tonumber(GetCVar(lI111(57469 - 23777))) or 704438 + - 704038) / (- 976214 - (- 977214)) - llI11[lI111(- 481839 + 515904)]
									if llI11[lI111(- 31073 + 64765)] < 660340 - 660340 then
										llI11[lI111(321221 - 287529)] = - 1760 - (- 1760)
									end
								end
							end
						};
						{
							[lI111(182054 + - 148676)] = lI111(869742 - 835962),
							[lI111(- 700004 - (- 733367))] = lI111(- 448348 - (- 482031));
							[lI111(- 990403 - (- 1024256))] = false,
							[lI111(672571 - 638708)] = lI111(- 307818 + 341749),
							[lI111(275753 + - 242231)] = lI111(364331 + - 331267),
							[lI111(- 137124 + 170868)] = 768957 - 768952;
							[lI111(695542 + - 662289)] = - 1006565 - (- 1006655)
						};
						{
							[lI111(- 643923 - (- 677301))] = lI111(- 165797 + 199577),
							[lI111(- 438684 - (- 472047))] = lI111(86883 + - 53376),
							[lI111(605999 - 572146)] = false;
							[lI111(968830 + - 934967)] = lI111(773368 + - 739518);
							[lI111(847147 - 813625)] = lI111(57698 + - 23673);
							[lI111(527088 + - 493344)] = 620211 + - 620151,
							[lI111(1034176 + - 1000923)] = - 732983 + 733073
						};
						{
							[lI111(- 769623 - (- 803001))] = lI111(- 545329 + 579109),
							[lI111(- 807993 + 841356)] = lI111(- 1044544 + 1077700);
							[lI111(- 991747 - (- 1025600))] = true;
							[lI111(- 838202 + 872065)] = lI111(- 633780 + 667214);
							[lI111(- 952596 - (- 986559))] = lI111(- 989247 + 1022806);
							[lI111(- 585330 + 618852)] = lI111(- 37674 - (- 71522));
							[lI111(- 679349 + 713093)] = - 948559 - (- 948669),
							[lI111(- 657872 - (- 691125))] = 309252 - 309162
						};
						{
							[lI111(80162 + - 46784)] = lI111(- 710339 - (- 744119));
							[lI111(- 801511 - (- 834874))] = lI111(542855 - 509040),
							[lI111(- 889920 - (- 923773))] = true;
							[lI111(925437 + - 891574)] = lI111(501848 - 468271);
							[lI111(534367 - 500656)] = lI111(- 937639 - (- 970814)),
							[lI111(- 976638 + 1010160)] = lI111(895504 - 861627),
							[lI111(- 644133 - (- 677877))] = - 578034 + 578039;
							[lI111(376492 + - 343239)] = 1041536 + - 1041466;
							[lI111(1041576 - 1007679)] = function(II111)
								ToggleStatus(llI11[lI111(651764 + - 618149)], lI111(- 278249 + 311424), II111)
							end
						};
						{
							[lI111(- 502192 + 535570)] = lI111(- 72111 - (- 105891)),
							[lI111(- 924157 + 957520)] = lI111(- 52944 - (- 86371)),
							[lI111(367591 - 333738)] = false;
							[lI111(716412 - 682549)] = lI111(805817 + - 771922),
							[lI111(71586 + - 37875)] = lI111(- 373996 + 407699),
							[lI111(- 309049 - (- 342571))] = lI111(- 737143 + 771215),
							[lI111(230311 + - 196567)] = 724214 + - 724154,
							[lI111(- 781624 + 814877)] = 973636 - 973566;
							[lI111(834018 - 800121)] = function(II111)
								ToggleStatus(llI11[lI111(914890 - 881275)], lI111(1035942 - 1002239), II111)
							end
						},
						{
							[lI111(577458 + - 544080)] = lI111(- 737207 + 770987);
							[lI111(- 386156 + 419519)] = lI111(- 581362 + 614915),
							[lI111(11744 + 22109)] = false;
							[lI111(159397 + - 125534)] = lI111(545841 + - 512703),
							[lI111(602785 - 569074)] = lI111(108131 + - 74789);
							[lI111(947261 + - 913739)] = lI111(508976 + - 475612),
							[lI111(324729 - 290985)] = 845096 - 844986;
							[lI111(- 821397 - (- 854650))] = 569650 + - 569580
						},
						{
							[lI111(824250 + - 790872)] = lI111(- 690037 + 723817),
							[lI111(121764 + - 88401)] = lI111(- 765216 - (- 798841));
							[lI111(- 125352 - (- 159205))] = true,
							[lI111(642868 + - 609005)] = lI111(- 328672 - (- 362219));
							[lI111(172901 + - 139379)] = lI111(- 122724 + 156415),
							[lI111(- 443566 + 477310)] = 196582 + - 196577;
							[lI111(- 396744 - (- 429997))] = - 824634 + 824684
						},
						{
							[lI111(168326 - 134948)] = lI111(- 308774 - (- 342763));
							[lI111(- 770214 - (- 803577))] = lI111(- 614003 + 647835);
							[lI111(84265 - 50402)] = lI111(711423 - 677749),
							[lI111(320731 - 287209)] = lI111(- 469487 + 503383),
							[lI111(604019 + - 570552)] = 418513 - 418413,
							[lI111(- 349278 - (- 382316))] = - 907260 + 907280;
							[lI111(191526 + - 157782)] = 681388 - 681333;
							[lI111(657460 + - 624207)] = 606963 + - 606913,
							[lI111(- 955646 + 989543)] = function(II111)
								llI11[lI111(14112 + 19027)](lI111(1036416 + - 1003140), - 901705 - (- 1037824), lI111(108771 + - 75018), - 435446 - (- 435501))
								llI11[lI111(430189 + - 397050)](lI111(218727 + - 185060), 496290 - 360171, lI111(1026096 - 992767), 617643 - 617587)
								llI11[lI111(566372 - 533233)](lI111(- 608356 - (- 641908)), 963774 + - 827655, lI111(- 93484 - (- 126628)), - 554545 + 554602)
								llI11[lI111(498145 - 465006)](lI111(372460 + - 339297), - 412333 + 548452, lI111(- 870998 - (- 904636)), 76124 - 76066)
								llI11[lI111(- 696644 - (- 729783))](lI111(109027 + - 75794), 843757 - 707638, lI111(- 962599 - (- 995839)), - 160042 - (- 160101))
								llI11[lI111(- 492847 + 525986)](lI111(245224 + - 211890), - 89763 + 225882, lI111(1003051 - 969854))
								llI11[lI111(- 449660 - (- 482799))](lI111(860475 + - 826557), - 107761 - (- 243880), lI111(483247 + - 449757))
								llI11[lI111(902716 + - 868937)](lI111(4000 + 30035))
							end
						};
						{
							[lI111(- 74817 - (- 108195))] = lI111(- 940541 + 974530);
							[lI111(887804 + - 854441)] = lI111(278761 + - 245688),
							[lI111(810233 + - 776370)] = lI111(931901 + - 898530);
							[lI111(97108 - 63586)] = lI111(- 199014 + 232768);
							[lI111(- 12704 + 46171)] = - 893798 - (- 893948),
							[lI111(- 7635 - (- 40673))] = 670158 - 670133,
							[lI111(- 279514 - (- 313258))] = 1002623 + - 1002618;
							[lI111(814813 - 781560)] = - 301264 - (- 301289);
							[lI111(- 893436 + 927333)] = function(llI11)
								ResetConfig()
								C_UI[lI111(478383 + - 444621)]()
							end
						}
					}
				}
			}
			local Il111 = {
				{
					[lI111(- 579665 - (- 613043))] = lI111(37541 - 3552);
					[lI111(849484 - 816121)] = lI111(397396 - 363883),
					[lI111(- 911612 + 945475)] = lI111(- 745863 - (- 779704)),
					[lI111(- 398651 - (- 432173))] = lI111(- 104778 - (- 138532));
					[lI111(- 63720 - (- 97187))] = - 764728 + 764878;
					[lI111(244853 - 211815)] = 608499 + - 608474;
					[lI111(- 251929 - (- 285673))] = - 512491 - (- 512496),
					[lI111(- 725587 - (- 758840))] = 276457 + - 276407;
					[lI111(128036 + - 94139)] = function(llI11)
						if GetConfig(lI111(- 140324 + 174098)) then
							SetConfig(lI111(- 234663 + 268437), nil)
						else
							local llI11 = GetRaidUnit(lI111(282244 - 248296))
							if llI11 and llI11[lI111(- 747191 + 780251)] == lI111(378412 + - 344378) then
								return
							end
							if llI11 ~= nil then
								SetConfig(lI111(731831 + - 698057), llI11[lI111(472016 - 438382)])
							end
						end
					end
				},
				{
					[lI111(873628 - 840250)] = lI111(672821 + - 638832),
					[lI111(831802 + - 798439)] = lI111(- 591858 + 625905),
					[lI111(1079879 - 1046016)] = lI111(- 971892 - (- 1005055));
					[lI111(- 145829 + 179351)] = lI111(139877 - 106275),
					[lI111(- 981438 + 1014905)] = 42295 - 42145;
					[lI111(207923 - 174885)] = - 460629 - (- 460654);
					[lI111(971134 + - 937390)] = - 71842 + 71847,
					[lI111(- 466414 + 499667)] = 451463 - 451438,
					[lI111(1024256 + - 990359)] = function(II111)
						llI11[lI111(- 479877 - (- 513904))](lI111(854394 + - 820950), II111)
					end
				}
			}
			return l1111, Il111
		end
		local function l11Il()
			if llI11[lI111(249192 + - 216018)] == nil then
				return
			end
			local II111 = {}
			local I1111, l1111 = I11Il()
			local Il111 = 752823 + - 752823
			local ll111 = true
			if llI11[lI111(- 396951 - (- 430125))][lI111(901692 + - 867990)] == nil or # llI11[lI111(- 521435 - (- 554609))][lI111(425554 - 391852)] < 176422 - 176421 then
				ll111 = false
			end
			if llI11[lI111(339327 - 306153)][lI111(- 428316 - (- 461550))] then
				local IIl11 = I1111[565619 - 565618]
				for llI11, II111 in ipairs(l1111) do
					tinsert(IIl11[lI111(- 967089 - (- 1000703))], 945022 - 945021, II111)
				end
				for llI11, II111 in ipairs(llI11[lI111(- 955646 + 988820)][lI111(- 76194 + 109428)]) do
					tinsert(IIl11[lI111(750519 + - 716905)], II111)
				end
				if ll111 then
					IIl11[lI111(- 309211 - (- 342955))] = Il111
					IIl11[lI111(- 455790 + 488948)] = 287417 - 287337
					Il111 = Il111 + (- 695030 + 695110)
				else
					IIl11[lI111(935820 - 902076)] = Il111
					IIl11[lI111(- 962553 - (- 995711))] = 491311 + - 491211
					Il111 = Il111 + (629592 - 629492)
				end
				tinsert(II111, IIl11)
			end
			if ll111 then
				local l1111 = I1111[718262 + - 718260]
				for llI11, II111 in ipairs(llI11[lI111(1043477 - 1010303)][lI111(1048357 - 1014655)]) do
					tinsert(l1111[lI111(315114 + - 281500)], II111)
				end
				l1111[lI111(242152 + - 208408)] = Il111
				Il111 = Il111 + (395156 - 395116)
				tinsert(II111, l1111)
			end
			if llI11[lI111(617224 - 584050)][lI111(486203 - 452206)] then
				local l1111 = I1111[- 953662 + 953665]
				for llI11, II111 in ipairs(llI11[lI111(- 932221 + 965395)][lI111(549233 + - 515236)]) do
					tinsert(l1111[lI111(638644 + - 605030)], II111)
				end
				l1111[lI111(- 671142 - (- 704886))] = Il111
				tinsert(II111, l1111)
			end
			lIIIl = {}
			local IIl11 = llIIl(lI111(- 26713 - (- 60002)), ll111 and 315946 + - 315766 or - 373900 - (- 374060), 336042 + - 336012)
			IIl11:SetFrameStrata(lI111(- 764406 - (- 797817)))
			IIl11:SetFrameLevel(- 368171 + 378170)
			IIl11:SetClampedToScreen(true)
			II1l1[lI111(- 983166 + 1017172)] = IIl11
			for II111, I1111 in ipairs(II111) do
				local l1111 = IlIIl(IIl11, I1111)
				local Il111 = l1IIl(IIl11, I1111)
				Il111:SetPoint(lI111(79576 - 45729), I1111[lI111(379493 - 345835)], I1111[lI111(- 598067 + 631815)])
				Il111:SetBackdrop({
					II111,
					[lI111(- 618035 + 651689)] = lI111(- 674677 + 708723),
					II111,
					II111,
					[lI111(1009077 - 975166)] = 50210 + - 50205,
					II111
				})
				Il111:SetFrameStrata(lI111(- 883577 - (- 916988)))
				Il111:SetFrameLevel(909067 - 899068)
				Il111:SetClampedToScreen(true)
				II1l1[I1111[lI111(972222 + - 938859)]] = Il111
				II1l1[I1111[lI111(- 375834 - (- 409197))] .. lI111(850554 + - 817272)] = l1111
				lIIIl[I1111[lI111(940254 - 906620)]] = {}
				lIIIl[I1111[lI111(- 164773 + 198407)]][lI111(911228 + - 877946)] = l1111
				lIIIl[I1111[lI111(752375 + - 718741)]][lI111(129720 - 96611)] = Il111
				local ll111 = {}
				lI1l1[I1111[lI111(330620 - 297257)]] = ll111
				II1Il = - 1028101 - (- 1028096)
				local lIl11
				for II111, I1111 in ipairs(I1111[lI111(251816 + - 218202)]) do
					local l1111 = true
					if I1111[lI111(- 443886 + 477273)] ~= nil then
						l1111 = false
						if llI11[lI111(724726 + - 690909)](I1111[lI111(- 629620 + 663007)], lI111(- 751737 - (- 785272))) and llI11[lI111(- 605427 + 638860)] then
							l1111 = true
						elseif llI11[lI111(- 305705 + 339522)](I1111[lI111(- 840080 - (- 873467))], lI111(78498 + - 45290)) and llI11[lI111(1002911 - 969726)] then
							l1111 = true
						elseif llI11[lI111(- 523352 - (- 557169))](I1111[lI111(11680 + 21707)], lI111(- 49338 - (- 82467))) and llI11[lI111(- 384428 + 418164)] then
							l1111 = true
						elseif llI11[lI111(164157 - 130340)](I1111[lI111(- 7478 - (- 40865))], lI111(649942 - 616691)) and llI11[lI111(- 80995 + 114736)] then
							l1111 = true
						end
					end
					if I1111[lI111(1005232 - 971454)] == true then
						l1111 = false
					end
					if l1111 then
						if I1111[lI111(- 676597 + 709601)] and lIl11 then
							II1Il = lIl11
						end
						if I1111[lI111(- 791801 + 824805)] then
							lIl11 = II1Il
						end
						if I1111[lI111(689881 - 656628)] == true and not I1111[lI111(209303 - 175525)] then
							lI1Il(I1111[lI111(- 1015935 + 1049734)])
						end
						local II111
						if type(I1111[lI111(- 897304 - (- 930557))]) == lI111(347483 - 314474) then
							II111 = II1Il
						else
							II111 = I1111[lI111(- 735031 + 768284)] - llI11[lI111(- 169438 - (- 202982))]
						end
						local l1111
						if I1111[lI111(- 124931 - (- 158309))] == lI111(- 337386 + 371166) then
							l1111 = ll1l1(Il111, I1111)
							l1111:SetPoint(lI111(- 482735 + 516582), Il111, I1111[lI111(- 735543 + 769287)], II111)
							if I1111[lI111(510195 - 476911)] ~= nil then
								l1111:SetHitRectInsets(- 122532 - (- 122532), I1111[lI111(328237 - 294953)], - 878587 + 878587, 535409 - 535409)
							else
								l1111:SetHitRectInsets(- 52834 - (- 52834), - 408587 - (- 408557), 834298 + - 834298, 586482 + - 586482)
							end
							if I1111[lI111(241447 + - 207669)] then
								l1111:Hide()
							end
							II1l1[I1111[lI111(267048 + - 233685)]] = l1111
						end
						if I1111[lI111(611891 + - 578513)] == lI111(- 547894 - (- 581746)) then
							l1111 = llll1(Il111, I1111)
							l1111:SetPoint(lI111(- 761666 - (- 795513)), Il111, I1111[lI111(- 734248 - (- 767992))], II111)
							if I1111[lI111(806378 - 772600)] then
								l1111:Hide()
							end
							II1l1[I1111[lI111(- 572128 - (- 605491))]] = l1111
						end
						if I1111[lI111(537457 + - 504079)] == lI111(801337 + - 767345) then
							local llI11
							l1111 = IIIIl(Il111, I1111[lI111(831418 + - 798055)], I1111[lI111(921273 - 887420)], I1111[lI111(- 1045248 + 1079145)])
							l1111:SetPoint(lI111(54552 - 20705), Il111, I1111[lI111(- 135381 - (- 169125))], II111 - (- 778934 - (- 778936)))
							llI11 = II111
							if I1111[lI111(- 369515 + 403475)] then
								local llI11, II111, Il111 = l1111:GetFont()
								l1111:SetFont(llI11, I1111[lI111(290448 - 256488)], Il111)
							end
							if I1111[lI111(543985 + - 510518)] then
								l1111:SetSize(I1111[lI111(740337 - 706870)], I1111[lI111(- 395423 - (- 428461))] or 363947 + - 363931)
							end
							if I1111[lI111(933821 + - 900043)] then
								l1111:Hide()
							end
							II1l1[I1111[lI111(- 98787 + 132150)]] = l1111
							if I1111[lI111(715382 + - 682111)] then
								local II111 = Il111:CreateFontString(nil)
								II111:SetTextColor(1045633 - 1045632, - 848377 - (- 848378), - 320169 - (- 320170), - 234470 - (- 234471))
								II111:SetFont(STANDARD_TEXT_FONT, - 730423 + 730439, lI111(- 412606 - (- 446446)))
								II111:SetPoint(lI111(- 518768 + 552615), Il111, I1111[lI111(- 569187 - (- 602931))] + (I1111[lI111(- 612339 + 645806)] or - 119420 - (- 119460)), llI11)
								II111:SetWidth(- 241959 + 241979)
								II111:SetText(I1111[lI111(558439 - 525168)])
								if I1111[lI111(- 629315 - (- 663093))] then
									II111:Hide()
								end
								local l1111 = I1111[lI111(- 454428 - (- 487791))] .. lI111(420269 + - 386547)
								II1l1[l1111] = II111
								if I1111[lI111(- 703030 + 736066)] then
									II111[lI111(- 560753 + 593789)] = I1111[lI111(548273 + - 515237)]
								end
								local IIl11 = {}
								IIl11[lI111(- 603105 - (- 636468))] = l1111
								IIl11[lI111(963433 - 930429)] = I1111[lI111(604766 - 571762)]
								IIl11[lI111(- 313642 + 347386)] = I1111[lI111(358586 - 324842)] + (I1111[lI111(657460 + - 623993)] or - 624267 - (- 624307))
								IIl11[lI111(- 693202 - (- 726455))] = I1111[lI111(540885 - 507632)]
								IIl11[lI111(520240 + - 486441)] = I1111[lI111(- 260002 - (- 293801))]
								IIl11[lI111(- 119085 - (- 152357))] = Il111
								IIl11[lI111(805706 - 771832)] = II111
								ll111[# ll111 + (- 305449 + 305450)] = IIl11
							end
						end
						if I1111[lI111(- 244392 + 277770)] == lI111(448622 + - 415050) then
							l1111 = Il111:CreateFontString(nil)
							l1111:SetTextColor(443566 + - 443565, - 174949 + 174950, - 781432 + 781433, 474608 - 474607)
							l1111:SetFont(STANDARD_TEXT_FONT, 664771 - 664757, lI111(796409 + - 762569))
							l1111:SetPoint(lI111(612531 + - 578684), Il111, I1111[lI111(1440 + 32304)] or - 690736 - (- 690741), II111)
							l1111:SetWidth(I1111[lI111(- 935741 + 969208)] or 886023 - 885883)
							l1111:SetJustifyH(lI111(762994 - 729271))
							l1111:SetJustifyV(lI111(- 710902 + 744156))
							l1111:SetText(I1111[lI111(- 377516 + 411369)])
							if I1111[lI111(- 142628 + 176406)] then
								l1111:Hide()
							end
							II1l1[I1111[lI111(314172 - 280809)]] = l1111
							llI11[lI111(726130 - 693045)] = l1111
						end
						if I1111[lI111(- 796985 + 830363)] == lI111(647476 + - 613487) then
							l1111 = Il1l1(Il111, I1111)
							l1111:SetWidth(I1111[lI111(889852 + - 856385)] or 679349 + - 679274)
							l1111:SetHeight(I1111[lI111(53743 - 20705)] or - 716470 + 716495)
							l1111:SetPoint(lI111(37345 + - 3498), Il111, I1111[lI111(926077 + - 892333)], II111)
							if I1111[lI111(- 923261 + 957039)] then
								l1111:Hide()
							end
							II1l1[I1111[lI111(- 507102 - (- 540465))]] = l1111
						end
						if l1111 then
							local llI11 = {}
							llI11[lI111(885389 - 852026)] = I1111[lI111(454144 - 420781)]
							llI11[lI111(- 251560 + 284564)] = I1111[lI111(- 701110 + 734114)]
							llI11[lI111(- 619300 - (- 653044))] = I1111[lI111(691844 - 658100)]
							llI11[lI111(- 897304 - (- 930557))] = I1111[lI111(813725 - 780472)]
							llI11[lI111(1022662 - 988863)] = I1111[lI111(1060295 - 1026496)]
							llI11[lI111(- 442167 - (- 475439))] = Il111
							llI11[lI111(- 802152 - (- 836026))] = l1111
							ll111[# ll111 + (602355 + - 602354)] = llI11
						end
						if l1111 and I1111[lI111(966270 + - 933267)] then
							l1111[lI111(892838 - 859835)] = I1111[lI111(977342 + - 944339)]
						end
						if l1111 and I1111[lI111(- 921213 + 954249)] then
							l1111[lI111(- 735863 + 768899)] = I1111[lI111(- 205723 - (- 238759))]
						end
						if l1111 and (I1111[lI111(670197 - 636980)] and type(I1111[lI111(- 686773 - (- 719990))]) == lI111(808380 - 774328)) then
							I1111[lI111(- 926269 - (- 959486))](l1111)
						end
					end
				end
			end
			I1111 = nil
			l1111 = nil
		end
		function llI11.ReDrawItems()
			local II111 = - 81443 + 81443
			for I1111, l1111 in pairs(lI1l1) do
				II1Il = 78941 - 78946
				local Il111 = nil
				for II111, I1111 in ipairs(l1111) do
					local l1111, ll111 = I1111[lI111(- 40481 + 74355)], I1111[lI111(- 312563 - (- 345835))]
					if l1111:IsShown() then
						if I1111[lI111(347051 + - 314047)] and Il111 then
							II1Il = Il111
						end
						if I1111[lI111(169488 - 136484)] then
							Il111 = II1Il
						end
						if I1111[lI111(- 222631 + 255884)] == true and not I1111[lI111(297050 - 263272)] then
							lI1Il(I1111[lI111(294185 + - 260386)])
						end
						if type(I1111[lI111(994175 + - 960922)]) == lI111(- 346603 + 379612) then
							y = II1Il
						else
							y = I1111[lI111(730039 + - 696786)] - llI11[lI111(289200 - 255656)]
						end
						if l1111:GetObjectType() == lI111(144464 - 111203) then
							l1111:SetPoint(lI111(613929 - 580082), ll111, I1111[lI111(736134 - 702390)], y + (- 142372 + 142375))
						else
							l1111:SetPoint(lI111(- 922685 + 956532), ll111, I1111[lI111(963405 - 929661)], y)
						end
					end
				end
				if II111 > II1Il then
					II111 = II1Il
				end
			end
		end
		function llI11.ResizePanel(II111)
			local I1111 = 169829 - 169829
			for llI11, II111 in pairs(lI1l1) do
				II1Il = 553964 - 553969
				local l1111 = nil
				local Il111 = 852218 + - 852218
				for llI11, II111 in ipairs(II111) do
					local I1111, ll111 = II111[lI111(- 403804 - (- 437678))], II111[lI111(- 534266 - (- 567538))]
					if I1111:IsShown() then
						if II111[lI111(- 308159 - (- 341163))] and l1111 then
							II1Il = l1111
						end
						if II111[lI111(324821 - 291817)] then
							l1111 = II1Il
						end
						if II111[lI111(823517 - 790264)] == true and not II111[lI111(- 891403 - (- 925181))] then
							lI1Il(II111[lI111(162725 + - 128926)])
						end
						if type(II111[lI111(532401 + - 499148)]) == lI111(27681 + 5328) then
							y = II1Il
						else
							if II111[lI111(- 514992 + 548245)] > Il111 then
								Il111 = II111[lI111(1005055 + - 971802)]
							end
						end
					end
				end
				II1Il = (II1Il - Il111) - (772822 - 772792)
				if I1111 > II1Il then
					I1111 = II1Il
				end
			end
			llI11[lI111(- 750000 - (- 783544))] = (508528 + - 508528) - I1111 or 639604 + - 639144
			for llI11, II111 in pairs(lIIIl) do
				II111[lI111(640968 - 607859)]:SetHeight((- 601139 + 601139) - I1111 or 779460 - 779000)
			end
			llI11[lI111(- 428133 - (- 462062))]()
		end
		function llI11.HideItem(llI11)
			if II1l1 and II1l1[llI11] then
				II1l1[llI11]:Hide()
			end
		end
		function llI11.HideItems(llI11)
			for II111, I1111 in pairs(II1l1) do
				if I1111[lI111(41452 - 8416)] == llI11 then
					I1111:Hide()
				end
			end
		end
		function llI11.ShowItem(llI11)
			if II1l1 and II1l1[llI11] then
				II1l1[llI11]:Show()
			end
		end
		function llI11.ShowItems(llI11)
			for II111, I1111 in pairs(II1l1) do
				if I1111[lI111(651444 + - 618408)] == llI11 then
					I1111:Show()
				end
			end
		end
		function llI11.DisableItem(llI11)
			if II1l1 and II1l1[llI11] then
				II1l1[llI11]:Disable()
			end
		end
		function llI11.EnableItem(llI11)
			if II1l1 and II1l1[llI11] then
				II1l1[llI11]:Enable()
			end
		end
		HEAL_DEBUG = true
		local function Il1Il()
			local II111 = CreateFrame(lI111(- 587954 + 621915), lI111(945026 - 911996), UIParent, BackdropTemplateMixin and lI111(255464 + - 221383))
			II111:SetHeight(793721 + - 793641)
			II111:SetWidth(- 395412 - (- 395692))
			II111:SetFrameStrata(lI111(- 503984 + 537395))
			II111:SetFrameLevel(- 387421 - (- 397420))
			II111:SetClampedToScreen(true)
			II111:SetBackdrop({
				_;
				[lI111(49815 - 16161)] = lI111(45601 + - 11654);
				_;
				_,
				[lI111(- 354549 - (- 388460))] = - 538663 - (- 538673),
				_
			})
			local I1111 = GetConfig(lI111(777741 - 744503))
			if I1111 == nil then
				II111:SetPoint(lI111(984754 - 951293), - 72738 + 72468, 203196 - 203046)
			else
				II111:SetPoint(I1111[lI111(- 602931 + 636675)], I1111[lI111(169307 - 136100)], I1111[lI111(850392 - 816825)], I1111[lI111(274216 + - 240869)], I1111[lI111(- 765827 - (- 798841))])
			end
			II111[lI111(- 322886 - (- 355947))] = II111:CreateTexture(nil, lI111(- 975975 - (- 1009855)), nil, 788664 + - 788657)
			II111[lI111(877627 + - 844566)]:SetColorTexture(.1, .1, .1, .7)
			II111[lI111(- 793401 + 826462)]:SetAllPoints()
			II111:EnableMouse(true)
			II111:SetMovable(true)
			II111:SetClampedToScreen(true)
			II111:RegisterForDrag(lI111(- 66630 - (- 100323)))
			II111:SetScript(lI111(- 322218 - (- 355819)), function()
				local llI11 = II111
				llI11:StartMoving()
				llI11[lI111(888636 + - 855318)] = true
			end)
			II111:SetScript(lI111(- 11104 + 44831), function()
				local llI11 = II111
				llI11:StopMovingOrSizing()
				llI11[lI111(147146 - 113828)] = false
				local I1111, l1111, Il111, ll111, IIl11 = llI11:GetPoint()
				local lIl11 = {}
				lIl11[lI111(1039951 - 1006207)] = I1111
				lIl11[lI111(- 886011 + 919218)] = l1111
				lIl11[lI111(653044 + - 619477)] = Il111
				lIl11[lI111(121382 - 88035)] = ll111
				lIl11[lI111(689578 - 656564)] = IIl11
				SetConfig(lI111(- 597470 - (- 630708)), lIl11)
			end)
			do
				a = II111:CreateFontString(nil)
				a:SetTextColor(658421 - 658420, - 991294 - (- 991295), - 308393 - (- 308394), 738231 + - 738230)
				a:SetFont(STANDARD_TEXT_FONT, - 865403 + 865418, lI111(476254 - 442414))
				a:SetPoint(lI111(- 18347 - (- 52194)), - 413544 - (- 413549), - 282345 + 282343)
				a:SetHeight(421613 + - 421583)
				a:SetJustifyH(lI111(- 999295 + 1033018))
				a:SetJustifyV(lI111(243176 + - 209922))
				a:SetText(lI111(1004712 - 971326))
				llIl1[lI111(1012415 + - 979255)] = a
			end
			do
				a = II111:CreateFontString(nil)
				a:SetTextColor(799033 + - 799032, - 707958 + 707959, - 800697 + 800698, - 641588 + 641589)
				a:SetFont(STANDARD_TEXT_FONT, 54178 + - 54164, lI111(946877 + - 913037))
				a:SetPoint(lI111(77656 - 43809), - 283172 - (- 283177), 222675 - 222695)
				a:SetHeight(400620 + - 400590)
				a:SetJustifyH(lI111(661300 + - 627577))
				a:SetJustifyV(lI111(610392 - 577138))
				a:SetText(lI111(166074 - 132644))
				llIl1[lI111(1044753 - 1011583)] = a
			end
			do
				a = II111:CreateFontString(nil)
				a:SetTextColor(- 309225 - (- 309226), 183910 + - 183909, 701686 + - 701685, 117796 + - 117795)
				a:SetFont(STANDARD_TEXT_FONT, 1000141 - 1000127, lI111(- 180646 + 214486))
				a:SetPoint(lI111(353259 + - 319412), 956099 - 956094, - 783466 - (- 783416))
				a:SetWidth(- 70498 + 70798)
				a:SetJustifyH(lI111(- 878139 + 911862))
				a:SetJustifyV(lI111(189195 - 155941))
				a:SetText(lI111(- 953104 - (- 986495)))
				llIl1[lI111(- 91747 + 124920)] = a
			end
			do
				a = II111:CreateFontString(nil)
				a:SetTextColor(1024321 - 1024320, - 104355 + 104356, - 464557 - (- 464558), 818873 + - 818872)
				a:SetFont(STANDARD_TEXT_FONT, - 964208 - (- 964222), lI111(517727 - 483887))
				a:SetPoint(lI111(126628 + - 92781), 893116 + - 893111, - 640436 - (- 640372))
				a:SetWidth(- 615943 - (- 616243))
				a:SetJustifyH(lI111(723312 - 689589))
				a:SetJustifyV(lI111(- 100030 - (- 133284)))
				a:SetText(lI111(119396 + - 85923))
				II111:SetHeight(678517 + - 678417)
				llIl1[lI111(409645 + - 376522)] = a
			end
			do
				if HEAL_DEBUG then
					a = II111:CreateFontString(nil)
					a:SetTextColor(- 106338 - (- 106339), 38754 - 38753, 176741 + - 176740, - 371179 - (- 371180))
					a:SetFont(STANDARD_TEXT_FONT, 222887 + - 222873, lI111(473711 + - 439871))
					a:SetPoint(lI111(523814 - 489967), 217260 - 217255, 644068 - 644148)
					a:SetWidth(862055 - 861755)
					a:SetJustifyH(lI111(341669 - 307946))
					a:SetJustifyV(lI111(869216 - 835962))
					a:SetText(lI111(433255 - 399724))
					llIl1[lI111(- 810681 + 843874)] = a
				end
			end
			do
				a = CreateFrame(lI111(- 345783 - (- 379436)), nil, II111, lI111(- 750481 - (- 783480)))
				a:SetPoint(lI111(- 784834 - (- 818681)), - 360369 - (- 360619), 765560 + - 765562)
				a:SetWidth(- 49506 + 49536)
				a[lI111(- 509552 + 543123)] = lI111(- 827258 + 860642)
				a[lI111(911548 + - 877847)] = lI111(64738 + - 30795)
				a:SetText(lI111(204710 + - 171250))
				a:SetScript(lI111(- 719469 - (- 752567)), function(II111)
					SetConfig(lI111(- 103011 + 136694), false)
					llI11[lI111(- 887163 + 920942)](lI111(- 463035 - (- 496111)))
				end)
				llIl1[lI111(- 251496 + 284916)] = a
			end
			II111:Hide()
			return II111
		end
		local ll1Il = 160037 + - 160035
		local IIlIl = - 233063 + 233067
		local lIlIl = - 905852 + 905853
		local function I1lIl(llI11)
			if llI11 ~= math[lI111(394208 - 360363)](llI11) then
			end
			if llI11 > - 389612 + 17166827 then
			end
			local II111 = Modulo(llI11, - 498991 + 499247)
			llI11 = math[lI111(655144 - 621299)](llI11 / (10016 + - 9760))
			local I1111 = Modulo(llI11, 316586 - 316330)
			llI11 = math[lI111(203738 - 169893)](llI11 / (891644 + - 891388))
			local l1111 = Modulo(llI11, 738295 + - 738039)
			return {
				l1111 / (303785 + - 303530);
				I1111 / (421421 + - 421166);
				II111 / (- 139108 + 139363)
			}
		end
		local function l1lIl()
			local llI11, II111 = GetPhysicalScreenSize()
			local I1111 = UIParent:GetScale()
			return ((335914 - 335146) / II111) / I1111
		end
		llI11[lI111(- 238737 - (- 272040))] = l1lIl
		local IllIl = {}
		local function lllIl(llI11, II111, I1111, l1111)
			local Il111 = CreateFrame(lI111(- 156133 + 190094), llI11 .. lI111(780064 - 746103), UIParent)
			Il111:SetPoint(lI111(- 1028672 + 1062519), ll1Il * (I1111 - (- 798136 - (- 798137))), - IIlIl * (l1111 - (758648 + - 758647)))
			Il111:SetWidth(ll1Il)
			Il111:SetHeight(IIlIl)
			Il111[lI111(- 557681 + 590742)] = Il111:CreateTexture(llI11 .. lI111(- 30753 + 63806), lI111(569458 + - 536366), nil, 906556 + - 906549)
			Il111[lI111(- 774968 + 808029)]:SetColorTexture(II111[582387 - 582386], II111[490159 + - 490157], II111[688053 + - 688050], - 316329 - (- 316330))
			Il111[lI111(- 934461 + 967522)]:SetAllPoints()
			Il111:SetFrameStrata(lI111(- 258500 - (- 291945)))
			Il111:SetScale(l1lIl())
			Il111:SetFrameLevel(- 658277 - (- 668277))
			tinsert(IllIl, Il111)
			return Il111
		end
		local function III1l(llI11, II111)
			local I1111 = I1lIl(II111)
			llI11[lI111(61282 + - 28221)]:SetColorTexture(I1111[- 773943 - (- 773944)], I1111[- 504624 + 504626], I1111[- 544686 - (- 544689)], - 498415 + 498416)
		end
		function llI11.UISCALECHANGED()
			for llI11, II111 in ipairs(IllIl) do
				II111:SetScale(l1lIl())
			end
		end
		local function lII1l()
			llI11[lI111(986495 + - 952815)] = Il1Il()
			llI11[lI111(- 244840 + 278617)] = lllIl(lI111(720285 - 686517), I1lIl(842521 - 822521), 94051 + - 94050, - 364714 - (- 364715))
			llI11[lI111(- 255914 - (- 289769))] = lllIl(lI111(318570 + - 285508), {
				.2;
				.2,
				.2
			}, - 1012351 + 1012352, - 535921 + 535923)
			llI11[lI111(- 249768 + 283681)] = lllIl(lI111(- 59632 - (- 92835)), {
				.1;
				.1;
				.1
			}, - 366891 + 366892, 50210 + - 50207)
			llI11[lI111(535046 - 500976)] = lllIl(lI111(340203 + - 306584), {
				.1,
				.1,
				.1
			}, - 453293 - (- 453294), - 616943 - (- 616947))
			llI11[lI111(334634 + - 300847)] = lllIl(lI111(- 764831 - (- 798521)), {
				.1;
				.1;
				.1
			}, - 19616 - (- 19617), - 25948 - (- 25953))
			llI11[lI111(- 180253 - (- 213671))] = lllIl(lI111(- 878779 + 912509), I1lIl(692502 - 672501), 840954 + - 840953, - 110051 + 110057)
			llI11[lI111(730116 - 696438)] = lllIl(lI111(379249 - 345643), I1lIl(357419 + - 355403), 641076 + - 641075, - 743287 + 743294)
			l11Il()
		end
		llI11[lI111(499092 - 465134)] = lII1l
		llI11[lI111(- 212135 + 246213)] = true
		function llI11.ActionDone()
			llI11[lI111(768597 - 734519)] = true
		end
		llI11[lI111(- 825466 + 859221)] = true
		function llI11.MoveDone()
			llI11[lI111(- 203366 + 237121)] = true
		end
		local I1I1l = 735991 - 735991
		local function l1I1l()
			I1I1l = I1I1l + (- 594866 + 594867)
			if I1I1l > 318994 - 318954 then
				I1I1l = - 457326 + 457327
			end
			return I1I1l
		end
		local IlI1l = - 234151 + 234150
		local llI1l = - 686518 - (- 686517)
		local II11l = 641908 + - 641909
		local lI11l = false
		local function I111l(II111, I1111, l1111)
			if llI11[lI111(227301 - 193446)] == nil then
				return
			end
			if not II111 or not I1111 or not l1111 then
				return
			end
			if II11l ~= II111 or IlI1l ~= I1111 or llI1l ~= l1111 then
				II11l = II111
				IlI1l = I1111
				llI1l = l1111
				llI11[lI111(83107 + - 49252)][lI111(- 492363 - (- 525424))]:SetColorTexture(389932 + - 389932, - 406637 - (- 406637), 233255 - 233255, 838651 - 838650)
				llI11[lI111(- 118372 + 152227)][lI111(678901 + - 645840)]:SetColorTexture(II111 / (515375 - 515120), I1111 / (- 50851 - (- 51106)), l1111 / (614707 + - 614452), 640692 + - 640691)
				local Il111 = I1lIl((II111 + I1111) + l1111)
				llI11[lI111(- 349803 + 383481)][lI111(- 422829 + 455890)]:SetColorTexture(- 455086 - (- 455086), - 675253 - (- 675253), - 663349 - (- 663349), - 821752 - (- 821753))
				llI11[lI111(1016268 - 982590)][lI111(756891 - 723830)]:SetColorTexture(Il111[- 285928 - (- 285929)], Il111[356395 + - 356393], Il111[295340 - 295337], - 764856 + 764857)
				llI11[lI111(- 825466 + 859544)] = false
				llI11[lI111(703693 - 670133)] = GetTime()
			end
		end
		local l111l = - 484207 + 484207
		local function Il11l()
			l111l = l111l + (34786 - 34785)
			if l111l > 419669 - 419629 then
				l111l = 483440 - 483439
			end
			return l111l
		end
		local ll11l = 653620 + - 653621
		local IIl1l = 231591 + - 231592
		local function lIl1l(II111, I1111, l1111)
			III1l(llI11[lI111(581100 - 547313)], l1111)
			III1l(llI11[lI111(417154 - 383084)], I1111)
			III1l(llI11[lI111(- 938813 + 972726)], II111)
			llI11[lI111(- 940387 - (- 974142))] = false
		end
		llI11[lI111(657642 - 623923)] = lIl1l
		function llI11.TryMoveAction(II111, I1111)
			I1111 = I1111 or - 809337 + 809337
			local l1111, Il111 = llI11[lI111(249512 + - 216124)](II111)
			if not Il111 or not Il111[lI111(- 811577 + 845557)] then
				return false
			end
			local ll111 = Il111[lI111(- 59746 + 93106)]
			lIl1l(Il11l(), ll111, I1111)
		end
		HEAL_RAID = {}
		HEAL_RAID_GUIDS = {}
		HEAL_RAID_HEALER = {}
		HEAL_RAID_HEALER_GUIDS = {}
		HEAL_BUTTONS = {}
		HEAL_RAID_TARGET_BUTTONS = {}
		HEAL_RAID_NAMES = {}
		HEAL_RAID_TANKS = {}
		HEAL_RAID_GROUPS = {}
		HEAL_RAID_ATTACKED_UNITS = {}
		HEAL_BLACKLIST = {}
		HEAL_SPELL_BLACKLIST = {}
		HEAL_SPELL_CASTID = nil
		HEAL_ISASSISTING = false
		HEAL_ATTACK_ERRORFACING = false
		HEAL_ATTACK_ERRORFACING_TIME = nil
		HEAL_PET_ISDEAD = false
		HEAL_ATTACK_NOTBACK_TIME = 0
		HEAL_ATTACK_OUTOFMANA_TIME = 0
		HEAL_ATTACK_NODISMAGIC_TIME = nil
		HEAL_BOSS_UNITS = {}
		HEAL_PLAYER_TALENTS = {}
		-- for llI11 = - 550768 - (- 550769), MAX_BOSS_FRAMES, 711542 + - 711541 do
		-- 	local II111 = format(lI111(973886 + - 940019), llI11)
		-- 	HEAL_BOSS_UNITS[II111] = true
		-- end
		HEAL_TIMERS = {
			[lI111(- 77090 + 110668)] = - 1044928 + 1044928,
			[lI111(225051 - 191078)] = - 979838 + 979838;
			[lI111(- 290013 - (- 323242))] = 381484 + - 381484;
			[lI111(669084 - 635508)] = 6.2,
			[lI111(1046720 + - 1012658)] = 3.45;
			[lI111(944476 - 910844)] = 198054 + - 198054;
			[lI111(- 449006 + 482189)] = 2.1,
			[lI111(340267 + - 306976)] = 2.3,
			[lI111(1050227 - 1016512)] = - 247528 - (- 247528),
			[lI111(87756 - 53794)] = 1.1,
			[lI111(353451 + - 319670)] = 112675.25 - 112675,
			[lI111(- 318442 + 351575)] = .51,
			[lI111(- 215207 + 248328)] = 579570 + - 579570,
			[lI111(39137 + - 5939)] = - 500464 + 500464,
			[lI111(- 873787 + 907630)] = .05,
			[lI111(239399 + - 205973)] = - 705390 - (- 705398);
			[lI111(1075468 - 1041984)] = 414509 + - 414508,
			[lI111(- 146341 + 180229)] = 271848 + - 271847,
			[lI111(- 965410 - (- 998719))] = 571378 + - 571377;
			[lI111(861923 - 828090)] = - 727863 + 727864,
			[lI111(- 95542 - (- 128868))] = - 494894.5 - (- 494895);
			[lI111(15125 - (- 18785))] = 945017 - 944957,
			[lI111(- 974142 + 1007912)] = .2;
			[lI111(- 972444 - (- 1006207))] = - 870267 - (- 870267),
			[lI111(- 432941 + 466251)] = - 669045 - (- 669045);
			[lI111(- 199320 - (- 233063))] = - 145829 + 145839;
			[lI111(- 300119 - (- 334186))] = .1,
			[lI111(642036 + - 608737)] = - 832442 - (- 832442)
		}
		local I1l1l = HEAL_TIMERS
		local l1l1l = llI11[lI111(- 123492 + 157138)] and llI11[lI111(973419 - 939773)][lI111(909372 + - 875559)] or {}
		local Ill1l = {}
		for llI11, II111 in pairs(l1l1l) do
			for II111, lI111 in pairs(II111) do
				Ill1l[lI111] = llI11
			end
		end
		llI11[lI111(- 203331 - (- 236327))] = Ill1l
		local lll1l = {}
		function llI11.SetHealAmount(llI11, II111)
			lll1l[llI11] = II111
		end
		function llI11.GetHealAmount(II111, I1111)
			if not I1111 then
				return lll1l[II111]
			end
			if I1111 then
				local l1111, Il111 = llI11[lI111(827173 - 793785)](II111)
				if not Il111 or not Il111[lI111(99491 + - 66269)] then
					return 503024 + - 503024
				end
				if I1111 then
					l1111, amount = llI11[lI111(- 527152 + 560798)][lI111(890524 - 856955)](nil, Il111[lI111(- 184742 + 217964)], I1111[lI111(602902 - 569842)])
				else
					l1111, amount = llI11[lI111(- 603718 - (- 637364))][lI111(790649 + - 757080)](nil, Il111[lI111(- 190630 + 223852)])
				end
				return amount
			end
		end
		local function IIIll(II111)
			local I1111 = llI11[lI111(1017799 - 984383)](II111)
			if not I1111 then
				return nil, nil
			else
				return I1111[lI111(- 592158 - (- 626163))], I1111
			end
		end
		function IsInErrorFace()
			if HEAL_ATTACK_ERRORFACING then
				return GetTime() - HEAL_ATTACK_ERRORFACING_TIME <= - 650483 - (- 650484)
			end
			return false
		end
		llI11[lI111(- 430786 - (- 464174))] = IIIll
		function llI11.GetAction(II111)
			return llI11[lI111(- 627827 + 661692)][II111]
		end
		function llI11.HasActionKey(II111)
			return not (not llI11[lI111(10408 - (- 23457))][II111])
		end
		function llI11.GetActionSpellName(II111)
			local I1111 = llI11[lI111(101475 + - 68059)](II111)
			return I1111[lI111(- 439410 - (- 473071))] or lI111(- 326601 - (- 359723))
		end
		local function lIIll(llI11, II111, I1111)
			if llIl1[lI111(570374 - 537201)] then
				if I1111 then
					local l1111 = lI111(- 396462 - (- 430061)) .. II111
					if I1111[lI111(532336 + - 498550)] * (- 853946 + 854046) >= - 32933 - (- 32993) then
						l1111 = l1111 .. (lI111(- 173580 - (- 207654)) .. (floor(I1111[lI111(253928 + - 220142)] * (185574 + - 185474)) .. lI111(13791 - (- 20257))))
					else
						l1111 = l1111 .. (lI111(- 742535 - (- 776568)) .. (floor(I1111[lI111(- 986303 + 1020089)] * (250728 + - 250628)) .. lI111(- 248552 + 282600)))
					end
					llIl1[lI111(845498 + - 812325)]:SetText(l1111)
					llIl1[lI111(- 487885 - (- 521008))]:SetText(lI111(478831 - 445358) .. llI11)
				else
					local I1111 = lI111(- 911740 + 945339) .. II111
					llIl1[lI111(- 197606 + 230779)]:SetText(I1111)
					llIl1[lI111(- 801849 + 834972)]:SetText(lI111(- 906940 + 940413) .. llI11)
				end
			end
		end
		local function I1Ill(llI11)
			if llIl1[lI111(991551 + - 958358)] and llI11 then
				llIl1[lI111(- 59194 - (- 92387))]:SetText(lI111(951267 - 918140) .. (llI11 or lI111(- 525520 - (- 559217))))
			end
		end
		llI11[lI111(- 697707 - (- 731063))] = I1Ill
		local function l1Ill(llI11)
			if II1l1[lI111(368363 + - 335278)] then
				if llI11 then
					II1l1[lI111(- 409069 + 442582)]:SetText(lI111(587698 + - 554431) .. llI11)
					II1l1[lI111(834614 - 801529)]:SetText(lI111(14664 - (- 19105)) .. llI11)
				else
					II1l1[lI111(399468 + - 365955)]:SetText(lI111(543601 + - 509760))
					II1l1[lI111(1005823 + - 972738)]:SetText(lI111(- 14816 + 48488))
				end
			end
		end
		llI11[lI111(- 551729 + 585297)] = l1Ill
		llI11[lI111(- 578354 + 611900)] = {}
		function llI11.StopAction()
			if not llI11[lI111(- 149669 + 183215)][lI111(437354 - 403693)] then
				return
			end
			local II111 = llI11[lI111(356054 - 322666)](lI111(245111 - 211303))
			if llI1l ~= II111 then
				I1l1l[lI111(34657 + - 824)] = .1
				I111l(l1I1l(), 695927 - 695926, II111)
				if llI11[lI111(727735 + - 694189)][lI111(328031 - 294953)] then
					lIIll(lI111(152934 - 119460) .. llI11[lI111(4521 - (- 29025))][lI111(- 424301 + 457962)], llI11[lI111(- 969022 + 1002568)][lI111(995892 - 962814)][lI111(675125 + - 641491)])
				else
					lIIll(lI111(986559 + - 953085) .. llI11[lI111(- 586729 - (- 620275))][lI111(- 251240 + 284901)], lI111(- 119269 - (- 152805)))
				end
			end
		end
		function llI11.BuildUnitInfo(II111)
			if type(II111) ~= lI111(49906 - 16865) then
				return II111
			end
			if not II111 or not UnitExists(II111) then
				return nil
			end
			local I1111 = {}
			if II111 == lI111(571619 - 537585) then
				return HEAL_RAID[lI111(803257 + - 769223)]
			elseif II111 == lI111(- 579762 + 613710) then
				return llI11[lI111(- 608181 - (- 641844))]
			elseif II111 == lI111(- 857497 - (- 890940)) then
				I1111[lI111(265064 + - 231387)] = 1032003 - 1032000
			elseif II111 == lI111(825310 - 792121) then
				I1111[lI111(115492 + - 81815)] = 940097 - 940093
			elseif II111 == lI111(- 142393 - (- 176421)) then
				I1111[lI111(- 744747 - (- 778424))] = - 370283 + 370288
			elseif II111 == lI111(- 907708 + 941199) then
				I1111[lI111(361643 + - 327966)] = - 995001 - (- 995007)
			elseif II111 == lI111(445998 + - 412931) then
				I1111[lI111(- 889904 - (- 923581))] = - 827763 - (- 827770)
			elseif II111 == lI111(- 32417 + 65754) then
				I1111[lI111(- 458850 - (- 492527))] = - 484975 + 484983
			elseif II111 == lI111(- 1032512 + 1065556) then
				I1111[lI111(79330 + - 45653)] = 110435 + - 110426
			else
				local l1111 = str:match(lI111(631668 + - 598134)) or str:match(lI111(- 947709 + 980901))
				if l1111 then
					return llI11[lI111(- 76834 + 110119)](II111)
				end
				l1111 = str:match(lI111(192166 + - 158716)) or str:match(lI111(- 453262 - (- 487151)))
				if l1111 then
					I1111[lI111(- 238171 - (- 271848))] = tonumber(l1111) + (- 681141 + 681191)
				else
					I1111[lI111(- 765304 + 798981)] = - 158052 - (- 158053)
				end
			end
			local l1111, Il111 = UnitName(II111)
			I1111[lI111(835130 + - 802070)] = II111
			I1111[lI111(620366 - 587058)] = UnitHealthMax(II111)
			I1111[lI111(291623 - 258344)] = UnitHealth(II111)
			I1111[lI111(813146 - 779512)] = l1111
			I1111[lI111(823099 - 789496)] = UnitLevel(II111)
			I1111[lI111(429805 + - 396751)] = UnitFactionGroup(II111)
			I1111[lI111(- 862206 - (- 895996))], I1111[lI111(- 78434 + 112379)], I1111[lI111(- 671605 + 705180)] = UnitClass(II111)
			I1111[lI111(- 374353 - (- 407405))] = UnitPowerType(II111)
			I1111[lI111(428091 - 394412)] = UnitPower(II111)
			I1111[lI111(212131 - 178790)] = I1111[lI111(- 133654 - (- 167333))]
			I1111[lI111(- 265505 - (- 298601))] = UnitPowerMax(II111)
			I1111[lI111(- 23032 - (- 56930))] = UnitIsDeadOrGhost(II111) and not UnitIsFeignDeath(II111)
			I1111[lI111(1012781 - 978942)] = tFeignDeath
			I1111[lI111(- 241575 + 275373)] = UnitIsCharmed(II111) and UnitCanAttack(lI111(- 304440 - (- 338474)), II111)
			I1111[lI111(299063 - 265000)] = (Il111 or lI111(- 678612 - (- 711734))) ~= lI111(734744 - 701622) and l1111 .. (lI111(858747 + - 825332) .. Il111) or l1111
			I1111[lI111(- 1042112 + 1075445)] = GetRaidTargetIndex(II111)
			I1111[lI111(- 236418 - (- 269800))] = UnitIsVisible(II111)
			I1111[lI111(- 604266 - (- 637748))] = UnitInRange(II111) or lI111(- 5472 + 39506) == II111
			I1111[lI111(- 136537 - (- 170085))] = false
			I1111[lI111(607532 - 573746)] = I1111[lI111(- 679093 + 712372)] / I1111[lI111(- 198923 - (- 232231))]
			I1111[lI111(- 839935 - (- 873723))] = I1111[lI111(1009407 + - 975728)] / I1111[lI111(700278 + - 667182)]
			I1111[lI111(- 509477 - (- 542577))] = I1111[lI111(958553 - 925245)] - I1111[lI111(679541 + - 646262)]
			I1111[lI111(- 730794 - (- 764088))] = UnitIsAFK(II111)
			I1111[lI111(- 154886 - (- 187942))] = UnitIsConnected(II111)
			I1111[lI111(- 590990 - (- 624819))] = UnitGUID(II111)
			I1111[lI111(- 869243 + 903253)] = UnitCanAssist(lI111(97812 - 63778), II111)
			I1111[lI111(- 1018048 + 1052127)] = UnitCanAttack(lI111(717878 + - 683844), II111)
			return I1111
		end
		local function IlIll(II111, I1111)
			lIIll(II111, I1111)
			I111l(- 289577 + 289577, 152421 - 152421, - 780600 - (- 780600))
			if UnitAffectingCombat(lI111(- 299049 + 333083)) then
				I1l1l[lI111(443222 - 409389)] = .05
			elseif llI11[lI111(848186 + - 814340)] then
				I1l1l[lI111(725918 - 692085)] = .1
			else
				I1l1l[lI111(- 1022464 + 1056297)] = - 274729 + 274729.5
			end
			llI11[lI111(- 252957 - (- 286313))](lI111(807609 + - 773870))
		end
		llI11[lI111(257512 + - 223957)] = IlIll
		function llI11.IsSpellCooldown(llI11)
			local II111, lI111, I1111 = GetSpellCooldown(llI11)
			if lI111 == - 784248 - (- 784248) and I1111 == - 476846 - (- 476847) then
				return true
			end
			return false
		end
		function llI11.IsItemCooldown(llI11)
			local II111, lI111, I1111 = GetItemCooldown(llI11)
			return lI111 == 1047744 + - 1047744 and I1111 == - 783736 + 783737
		end
		function GetSpellCooldownTime(II111)
			local I1111, l1111, Il111 = GetSpellCooldown(II111)
			if l1111 == - 90723 - (- 90723) and Il111 == 934846 - 934845 then
				return 889468 + - 889468
			end
			if l1111 and l1111 > 163173 + - 163173 then
				local II111 = (I1111 + l1111) - GetTime()
				if llI11[lI111(- 908284 + 941490)] then
					II111 = II111 - llI11[lI111(- 1000420 - (- 1034112))]
				end
				if II111 <= - 21345 - (- 21345) then
					return 863483 - 863483
				else
					return II111
				end
			end
			return 948492 - 938493
		end
		llI11[lI111(- 356331 + 390036)] = GetSpellCooldownTime
		local function llIll(llI11)
			local II111 = GetTime()
			local I1111, l1111 = UnitAttackSpeed(lI111(- 254007 - (- 288041)))
			if l1111 then
				return
			end
			HEAL_LAST_ATTACKING = GetTime() + I1111
		end
		llI11[lI111(- 998315 - (- 1032384))] = llIll
		local function II1ll()
			if HEAL_LAST_ATTACKING == nil then
				return false
			end
			if HEAL_LAST_ATTACKING >= GetTime() then
				return true
			end
			HEAL_LAST_ATTACKING = nil
			return false
		end
		llI11[lI111(- 867131 - (- 900924))] = II1ll
		function llI11.GetSpellInfo(II111)
			local I1111, l1111, Il111, ll111, IIl11, lIl11, I1l11 = GetSpellInfo(II111)
			if not I1l11 then
				llI11[lI111(- 932733 + 966512)](lI111(717238 + - 683894) .. II111)
				return nil
			else
				return I1111, l1111, Il111, ll111, IIl11, lIl11, I1l11
			end
		end
		function llI11.GetSpellName(II111)
			return llI11[lI111(640464 - 606963)](II111) or lI111(- 981981 - (- 1015103))
		end
		local lI1ll = {}
		if not llI11[lI111(- 563712 - (- 597491))] then
			local function II111(llI11, II111)
				SendChatMessage(llI11, lI111(- 825722 + 858812), DEFAULT_CHAT_FRAME[lI111(321915 - 288361)], II111)
			end
			llI11[lI111(- 619344 - (- 653364))] = II111
			local function I1111(llI11, II111, I1111)
				if llI11 == nil then
					llI11 = lI111(10528 + 22799)
				end
				if II111 then
					SendChatMessage(llI11, II111, DEFAULT_CHAT_FRAME[lI111(654644 + - 621090)], I1111)
					return
				end
				DEFAULT_CHAT_FRAME:AddMessage(lI111(836474 + - 802505) .. llI11)
				table[lI111(578418 + - 544501)](lI1ll, llI11)
			end
			llI11[lI111(- 573938 + 607069)] = I1111
			local function l1111(II111)
				llI11[lI111(- 97059 + 130190)](II111)
			end
			llI11[lI111(604709 - 570930)] = l1111
			function llI11.SaveDebug()
				SetConfig(lI111(- 785798 - (- 819385)), lI1ll)
				print(lI111(912188 + - 878512))
			end
			local Il111
			local function ll111(II111, I1111)
				if Il111 ~= II111 then
					Il111 = II111
					llI11[lI111(- 203132 - (- 236263))](II111)
				end
			end
			llI11[lI111(- 275813 - (- 309610))] = ll111
			local function IIl11(II111)
				if II111 then
					llI11[lI111(168933 + - 135802)](II111)
				end
			end
			llI11[lI111(717839 - 684341)] = IIl11
			local function lIl11(llI11)
				DEFAULT_CHAT_FRAME:AddMessage(llI11)
			end
			llI11[lI111(899836 + - 866717)] = lIl11
			local function I1l11(II111)
				llI11[lI111(- 777178 - (- 810297))](lI111(567794 + - 534744) .. (II111 .. lI111(- 202037 - (- 235431))))
				llI11[lI111(- 146213 + 179332)](II111)
				llI11[lI111(239079 + - 205960)](debugstack())
			end
			llI11[lI111(976471 - 942589)] = I1l11
		end
		function Modulo(llI11, II111)
			return llI11 - math[lI111(- 314986 + 348831)](llI11 / II111) * II111
		end
		function llI11.GetItemInfo(llI11)
			return GetItemInfo(llI11)
		end
		function llI11.GetItemCount(llI11)
			return GetItemCount(llI11)
		end
		function llI11.FindBagFreeSpace()
			local llI11
			for llI11 = 500208 + - 500204, 422445 - 422445, 206758 + - 206759 do
				for II111 = - 67746 + 67747, GetContainerNumSlots(llI11), 941246 - 941245 do
					if not GetContainerItemLink(llI11, II111) then
						return llI11, II111
					end
				end
			end
		end
		function llI11.FindBagItem(llI11)
			for II111 = - 1041792 - (- 1041792), - 800821 - (- 800825), - 704886 + 704887 do
				for I1111 = 739576 - 739575, GetContainerNumSlots(II111), 1006272 - 1006271 do
					if string[lI111(- 273064 + 306276)](GetContainerItemLink(II111, I1111) or lI111(166278 - 133156), llI11, 1028416 + - 1028415, - 368555 + 368556) then
						return II111, I1111
					end
				end
			end
		end
		function llI11.EquipByName(II111, I1111)
			local l1111, Il111 = llI11[lI111(- 598707 + 632643)](II111)
			local ll111, IIl11 = llI11[lI111(950525 + - 917297)]()
			if l1111 and ll111 then
				PickupInventoryItem(I1111)
				PickupContainerItem(ll111, IIl11)
				PickupContainerItem(l1111, Il111)
				EquipCursorItem(I1111)
			end
		end
		function llI11.GetMainHandEquipments()
			local llI11 = {}
			local II111, I1111, l1111, Il111 = string[lI111(480490 - 447278)](GetInventoryItemLink(lI111(1059058 - 1025024), 421101 + - 421085) or lI111(- 605010 - (- 638132)), lI111(- 709430 + 742582))
			local ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1 = GetItemInfo(l1111 or lI111(250600 + - 217478))
			if ll111 then
				llI11[# llI11 + (- 924093 + 924094)] = {
					[lI111(- 742606 - (- 775928))] = ll111;
					[lI111(137636 + - 103618)] = l1111;
					[lI111(411992 - 378476)] = I1Il1;
					[lI111(- 711350 + 745096)] = I1l11
				}
			end
			for II111 = - 21729 + 21729, 573170 + - 573166, - 946428 - (- 946429) do
				for I1111 = 193702 + - 193701, GetContainerNumSlots(II111), - 273896 + 273897 do
					IIl11 = GetContainerItemLink(II111, I1111)
					if IIl11 then
						local l1111, Il111, ll111, IIl11 = string[lI111(- 177702 + 210914)](GetContainerItemLink(II111, I1111) or lI111(- 258823 - (- 291945)), lI111(- 1027520 + 1060672))
						local lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1 = GetItemInfo(ll111 or lI111(571826 + - 538704))
						if l1Il1 == lI111(261454 - 228263) or l1Il1 == lI111(857506 - 824186) then
							llI11[# llI11 + (886396 - 886395)] = {
								[lI111(- 450309 - (- 483631))] = lIl11;
								[lI111(265097 - 231079)] = ll111;
								[lI111(- 512432 + 545948)] = IlIl1,
								[lI111(166134 - 132388)] = Ill11
							}
						end
					end
				end
			end
			return llI11
		end
		function llI11.GetOffHandEquipments()
			local llI11 = {}
			local II111, I1111, l1111, Il111 = string[lI111(- 391985 - (- 425197))](GetInventoryItemLink(lI111(- 377964 + 411998), 384701 - 384684) or lI111(- 1005470 - (- 1038592)), lI111(- 729848 - (- 763000)))
			local ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1 = GetItemInfo(l1111 or lI111(- 948477 + 981599))
			if ll111 then
				llI11[# llI11 + (- 624243 + 624244)] = {
					[lI111(- 643723 - (- 677045))] = ll111,
					[lI111(- 863227 + 897245)] = l1111;
					[lI111(- 115300 + 148816)] = I1Il1;
					[lI111(- 93987 + 127733)] = I1l11
				}
			end
			for II111 = 921405 + - 921405, 826878 - 826874, - 1034111 - (- 1034112) do
				for I1111 = - 71074 + 71075, GetContainerNumSlots(II111), 766009 - 766008 do
					IIl11 = GetContainerItemLink(II111, I1111)
					if IIl11 then
						local l1111, Il111, ll111, IIl11 = string[lI111(873147 + - 839935)](GetContainerItemLink(II111, I1111) or lI111(- 899611 - (- 932733)), lI111(- 783672 + 816824))
						local lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1 = GetItemInfo(ll111 or lI111(869724 - 836602))
						if l1Il1 == lI111(- 793657 + 827468) or l1Il1 == lI111(220327 + - 186948) or l1Il1 == lI111(413780 - 380460) then
							llI11[# llI11 + (72482 + - 72481)] = {
								[lI111(- 221927 + 255249)] = lIl11,
								[lI111(- 967325 - (- 1001343))] = ll111,
								[lI111(- 1044736 + 1078252)] = IlIl1,
								[lI111(374764 + - 341018)] = Ill11
							}
						end
					end
				end
			end
			return llI11
		end
		function llI11.MainHandIsWeapon()
			local llI11, II111, I1111, l1111 = string[lI111(- 575927 - (- 609139))](GetInventoryItemLink(lI111(831083 - 797049), 877371 + - 877355) or lI111(733623 + - 700501), lI111(- 594611 - (- 627763)))
			local Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1 = GetItemInfo(I1111 or lI111(903261 - 870139))
			if Il111 and (l1l11 == lI111(- 204710 + 238022) or l1l11 == lI111(780920 + - 746909)) then
				return true
			end
			return false
		end
		function llI11.OffHandIsWeapon()
			local llI11, II111, I1111, l1111 = string[lI111(344678 - 311466)](GetInventoryItemLink(lI111(28690 - (- 5344)), 784713 - 784696) or lI111(497232 - 464110), lI111(- 118629 - (- 151781)))
			local Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1 = GetItemInfo(I1111 or lI111(66243 - 33121))
			if Il111 and (l1l11 == lI111(- 137989 - (- 171301)) or l1l11 == lI111(396550 - 362539)) then
				return true
			end
			return false
		end
		function llI11.GetAllBagsFoods()
			local II111 = {}
			for I1111 = - 130724 - (- 130724), - 876023 - (- 876027), - 651124 + 651125 do
				for l1111 = - 170916 - (- 170917), GetContainerNumSlots(I1111), - 937725 + 937726 do
					itemLink = GetContainerItemLink(I1111, l1111)
					if itemLink then
						local Il111, ll111, IIl11, lIl11 = string[lI111(1016186 - 982974)](GetContainerItemLink(I1111, l1111) or lI111(605043 + - 571921), lI111(- 390317 - (- 423469)))
						local I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1, lI1l1, I11l1 = GetItemInfo(IIl11 or lI111(285194 - 252072))
						if lI1l1 == - 678901 - (- 678901) and (I11l1 == 817977 + - 817977 and (not llI11[lI111(- 368659 - (- 402476))](I1l11, lI111(78882 + - 45589)) and (not llI11[lI111(131516 - 97699)](I1l11, lI111(881697 - 847930)) and not llI11[lI111(- 960894 + 994711)](I1l11, lI111(930365 + - 896878))))) then
							II111[I1l11] = IIl11
						end
					end
				end
			end
			return II111
		end
		llI11[lI111(704066 - 670709)] = nil
		llI11[lI111(949053 + - 915357)] = nil
		llI11[lI111(- 592818 + 626054)] = nil
		llI11[lI111(137389 - 103523)] = nil
		llI11[lI111(- 951229 + 984419)] = nil
		function llI11.GetUsableEquipmentsMacro()
			local II111 = lI111(919549 + - 886427)
			for II111 = 942526 - 942525, 303593 + - 303575, 542962 - 542961 do
				local I1111, l1111, Il111 = GetInventoryItemCooldown(lI111(1041536 + - 1007502), II111)
				if Il111 == - 162981 + 162982 then
					local I1111 = GetItemInfo(GetInventoryItemLink(lI111(648884 + - 614850), II111))
					if II111 == 647796 + - 647786 then
						llI11[lI111(- 807661 - (- 841018))] = true
						llI11[lI111(- 766803 - (- 799993))] = llI11[lI111(- 260355 - (- 293545))] .. lI111(- 433725 - (- 466990))
					end
					if II111 == - 836845 - (- 836858) then
						llI11[lI111(- 500720 + 534416)] = true
						llI11[lI111(- 911292 + 944482)] = llI11[lI111(- 288169 + 321359)] .. lI111(- 998246 - (- 1031616))
					end
					if II111 == 262326 - 262312 then
						llI11[lI111(- 678358 - (- 712054))] = true
						llI11[lI111(322154 + - 288964)] = llI11[lI111(513264 + - 480074)] .. lI111(- 266600 + 300626)
					end
					if II111 == - 651120 - (- 651124) then
						llI11[lI111(440631 - 406765)] = true
						llI11[lI111(- 583309 - (- 616499))] = llI11[lI111(- 893820 + 927010)] .. lI111(478416 - 444718)
					end
				end
			end
			if llI11[lI111(- 505611 - (- 538801))] ~= lI111(784568 + - 751446) then
				llI11[lI111(158026 - 124836)] = USESP_MACRO_PRE .. (USESP_MACRO_PRE .. USESP_MACRO_AFTER)
			end
		end
		function llI11.CanUseSP()
			local II111, I1111, l1111
			II111, I1111, l1111 = GetInventoryItemCooldown(lI111(- 209190 + 243224), - 751981 - (- 751991))
			if l1111 == 587507 - 587506 and II111 == 575090 + - 575090 then
				return 127278 - 127268
			end
			II111, I1111, l1111 = GetInventoryItemCooldown(lI111(- 660916 + 694950), - 852653 - (- 852666))
			if l1111 == - 470831 + 470832 and II111 == 232551 + - 232551 then
				return 871048 - 871035
			end
			II111, I1111, l1111 = GetInventoryItemCooldown(lI111(- 799993 + 834027), 86691 + - 86677)
			if l1111 == 89059 + - 89058 and II111 == 490479 - 490479 then
				return 1010687 + - 1010673
			end
			if llI11[lI111(504176 + - 470743)] then
				local II111, I1111, l1111 = UnitRace(lI111(842426 + - 808392))
				if llI11[lI111(- 541041 + 574329)] == 606645 - 606643 then
					local llI11 = GetSpellInfo(- 760403 - (- 794105)) or GetSpellInfo(- 380012 + 400584) or lI111(- 558342 - (- 591474))
					local II111, I1111, l1111 = GetSpellCooldown(llI11)
					if I1111 == 73122 - 73122 and l1111 == 372012 + - 372011 then
						return - 801721 + 801722
					end
				elseif llI11[lI111(- 734704 - (- 767992))] == 92323 + - 92315 then
					local llI11 = GetSpellInfo(- 539697 + 565994) or lI111(- 971838 + 1005200)
					local II111, I1111, l1111 = GetSpellCooldown(llI11)
					if I1111 == 251496 - 251496 and l1111 == 482608 - 482607 then
						return 369963 + - 369962
					end
				end
			end
			return 191846 - 191846
		end
		function llI11.CanYaodaiBomb()
			local llI11, II111, I1111
			llI11, II111, I1111 = GetInventoryItemCooldown(lI111(593842 + - 559808), - 110813 - (- 110819))
			if I1111 == - 437485 - (- 437486) and llI11 == - 810873 + 810873 then
				return true
			end
			return false
		end
		function llI11.GetPlayerTalent()
			local llI11 = {}
			for II111 = 596403 - 596402, GetNumTalentTabs(), - 588274 + 588275 do
				local lI111 = - 665845 - (- 665845)
				for I1111 = 1028800 + - 1028799, GetNumTalents(II111), 172902 - 172901 do
					local l1111, Il111, ll111, IIl11, lIl11 = GetTalentInfo(II111, I1111)
					if l1111 then
						lI111 = lI111 + lIl11
						llI11[l1111] = lIl11
					end
				end
				llI11[II111] = lI111
			end
			return llI11
		end
		function GetTalentSpent(II111)
			local I1111 = II111
			if type(II111) == lI111(- 776952 + 810256) then
				I1111 = GetSpellInfo(II111)
			end
			if I1111 then
				return llI11[lI111(235559 + - 201566)][I1111] or - 739575 - (- 739575)
			end
			return - 524208 + 524208
		end
		function battleQueueStatus()
			local llI11, II111, I1111, l1111, Il111, ll111, IIl11 = GetBattlefieldStatus(- 744247 + 744248)
			local lIl11 = - 819705 + 819705
			if llI11 == lI111(- 405947 - (- 439918)) then
				lIl11 = 562865 - 562865
			elseif llI11 == lI111(- 664433 - (- 697462)) then
				lIl11 = - 137123 - (- 137124)
			elseif llI11 == lI111(949757 + - 916031) then
				lIl11 = 433069 + - 433067
			elseif llI11 == lI111(- 845743 - (- 878907)) then
				lIl11 = - 888380 + 888383
			end
			return lIl11
		end
		local I11ll
		local l11ll
		local Il1ll = Unlock
		function llI11.TryUseAction(II111, I1111)
			local l1111, Il111 = llI11[lI111(812004 - 778616)](I1111)
			if not Il111 then
				return false
			end
			if type(II111) == lI111(401772 + - 368731) then
				II111 = llI11[lI111(181414 + - 148155)](II111)
			end
			if not llI11[lI111(- 128997 - (- 162213))](II111, I1111) then
				return false
			end
			if llI11[lI111(461870 + - 428685)] and Il1ll then
				Il1ll(lI111(- 854811 - (- 888188)), Il111[lI111(- 807293 - (- 840954))])
				return
			end
			if Il111[lI111(- 473263 + 506698)] then
				if InCombatLockdown() then
					llI11[lI111(508336 + - 474557)](lI111(442670 + - 409492) .. I1111)
					return false
				end
				if I1111 == lI111(14238 - (- 19681)) and (I11ll and Il111[lI111(737655 + - 703591)] ~= I11ll) then
					Il111[lI111(- 384116 - (- 417261))] = GetItemInfo(I11ll)
					Il111[lI111(- 547765 - (- 581426))] = GetItemInfo(I11ll)
					Il111[lI111(1000338 - 966846)] = lI111(979772 - 946301) .. GetItemInfo(I11ll)
					Il111[lI111(813881 + - 780226)] = 448435 - 448430
					Il111[lI111(662389 + - 628325)] = I11ll
					if llI11[lI111(- 191014 + 224063)] then
						llI11[lI111(248104 + - 215055)](Il111)
					end
				end
				if I1111 == lI111(- 461038 + 494081) and (l11ll and Il111[lI111(- 137188 + 171252)] ~= l11ll) then
					Il111[lI111(56354 + - 23209)] = GetItemInfo(l11ll)
					Il111[lI111(539437 - 505776)] = GetItemInfo(l11ll)
					Il111[lI111(- 471324 - (- 504816))] = lI111(- 576308 - (- 609779)) .. GetItemInfo(l11ll)
					Il111[lI111(282783 - 249128)] = - 625843 + 625848
					Il111[lI111(236199 + - 202135)] = l11ll
					if llI11[lI111(525384 - 492335)] then
						llI11[lI111(- 321682 - (- 354731))](Il111)
					end
				end
				if I1111 == lI111(588338 + - 554432) and (Il111[lI111(- 316714 + 350153)] ~= I11ll or Il111[lI111(- 979646 + 1012970)] ~= l11ll) then
					Il111[lI111(860019 - 826874)] = GetItemInfo(l11ll)
					Il111[lI111(728119 + - 694458)] = GetItemInfo(l11ll)
					Il111[lI111(- 186067 - (- 219559))] = lI111(- 825660 - (- 859131)) .. (GetItemInfo(I11ll) .. (lI111(1010715 - 976894) .. GetItemInfo(l11ll)))
					Il111[lI111(- 483001 - (- 516656))] = 673082 - 673077
					Il111[lI111(18239 - (- 15200))] = I11ll
					Il111[lI111(- 570055 - (- 603379))] = l11ll
					if llI11[lI111(- 169741 - (- 202790))] then
						llI11[lI111(674293 + - 641244)](Il111)
					end
				end
			end
			if (Il111[lI111(- 101805 - (- 135460))] or - 428397 - (- 428397)) > - 997375 + 997375 then
				I1l1l[lI111(- 240448 - (- 274281))] = Il111[lI111(823162 + - 789507)]
			else
				I1l1l[lI111(- 178790 + 212623)] = 377773 - 377772
			end
			if llI11[lI111(945452 - 911932)]() or llI11[lI111(- 575602 + 609354)]() then
				DoEmote(lI111(- 891175 - (- 924285)))
			end
			if Il111[lI111(129530 - 95907)] or Il111[lI111(- 618960 - (- 653044))] then
				I111l(l1I1l(), - 1022208 + 1022307, Il111[lI111(- 767352 + 800712)])
			else
				I111l(l1I1l(), II111[lI111(2412 - (- 31265))], l1111)
			end
			local ll111, IIl11 = GetHealthLost(II111)
			local lIl11 = Il111[lI111(- 834351 - (- 868283))]
			local I1l11 = Il111[lI111(- 252904 + 286049)]
			if lIl11 and ll111 > - 822073 - (- 822073) then
				lIIll(I1l11 .. (lI111(958462 + - 924644) .. (- ll111 .. (lI111(- 537009 + 570086) .. (lIl11 .. lI111(238951 + - 205783))))), II111[lI111(- 292872 - (- 326506))], II111)
			else
				lIIll(I1l11, II111[lI111(627028 - 593394)], II111)
			end
			llI11[lI111(- 1017024 + 1050908)] = Il111
			llI11[lI111(- 324970 + 358265)] = GetTime()
			llI11[lI111(- 449966 - (- 483119))] = II111
			llI11[lI111(- 370417 - (- 404461))] = Il111
			llI11[lI111(- 703094 + 736587)] = II111
			llI11[lI111(- 907900 + 941266)] = I1l11
			llI11[lI111(76514 + - 43269)] = GetTime()
			llI11[lI111(1008575 + - 974683)] = true
			return true
		end
		local ll1ll = {}
		function llI11.AddSpellBlackList(llI11, II111)
			ll1ll[llI11 .. II111] = true
		end
		function llI11.IsInSpellBlackList(llI11, II111)
			return ll1ll[llI11 .. II111]
		end
		function llI11.CanUseAction(II111, I1111)
			local l1111, Il111 = llI11[lI111(155984 - 122596)](I1111)
			if not Il111 then
				return false
			end
			if llI11[lI111(- 437550 + 470830)] then
				local l1111 = llI11[lI111(705526 + - 672246)]
				local ll111 = Il111[lI111(876268 - 842682)] or .6
				if l1111[lI111(862459 + - 828893)] and (GetTime() - l1111[lI111(593458 + - 559892)] < ll111 and (l1111[lI111(- 330090 + 363789)] == I1111 and l1111[lI111(138405 - 104547)] == UnitGUID(II111[lI111(- 509773 - (- 542833))]))) then
					return false
				end
			end
			if I1111 == lI111(623518 - 589746) or I1111 == lI111(- 292969 + 326587) then
				return true
			end
			if not II111 then
				return false
			end
			if llI11[lI111(- 59938 + 93588)](I1111, II111[lI111(- 40448 - (- 74082))]) then
				return false
			end
			if UnitHasVehicleUI(II111[lI111(- 267589 - (- 300649))]) or not UnitExists(II111[lI111(- 834519 - (- 867579))]) or not UnitIsVisible(II111[lI111(- 978430 + 1011490)]) then
				return false
			end
			if Il111[lI111(- 779298 - (- 812921))] or Il111[lI111(- 110179 + 144263)] then
				return true
			end
			if Il111[lI111(- 225255 + 258698)] then
				if not UnitExists(lI111(- 218693 - (- 252136))) or UnitIsDead(lI111(1020002 - 986559)) or IsSpellInRange(Il111[lI111(- 66850 + 100511)], lI111(729079 + - 695636)) ~= 597684 - 597683 then
					return false
				end
			end
			if HEAL_IsBlackList(II111[lI111(- 982555 - (- 1015615))]) or not II111[lI111(- 626964 - (- 660020))] or II111[lI111(- 106147 + 139986)] or UnitIsCharmed(II111[lI111(353358 - 320298)]) and UnitCanAttack(lI111(4305 - (- 29729)), II111[lI111(758810 - 725750)]) or UnitInVehicle(II111[lI111(- 767928 + 800988)]) and UnitHasVehicleUI(II111[lI111(- 851834 + 884894)]) then
				return false
			end
			if I1111 ~= llI11[lI111(1060892 - 1027328)] and II111[lI111(- 303488 - (- 337386))] or I1111 == RESCURIT_KEY and not II111[lI111(- 563849 - (- 597747))] then
				return false
			end
			if Il111[lI111(- 772539 - (- 805625))] and llI11[lI111(- 874652 - (- 908412))] then
				local l1111 = llI11[lI111(391178 - 357547)] and llI11[lI111(- 182822 + 216453)](II111, I1111)
				if not l1111 then
					return false
				end
			end
			if Il111[lI111(988697 - 955262)] and InCombatLockdown() then
				return false
			end
			if I1111 == lI111(- 810427 - (- 844346)) then
				local I1111 = GetConfig(lI111(73122 + - 39449))
				if not I1111 or GetItemCount(I1111) == 262952 + - 262952 or not IsUsableItem(I1111) then
					I1111 = llI11[lI111(176549 + - 143323)]()
				end
				if I1111 and (llI11[lI111(996607 + - 963389)](I1111) > - 494767 - (- 494767) and llI11[lI111(- 836090 + 869489)](I1111)) then
					I11ll = I1111
					if not llI11[lI111(913295 - 879675)](II111[lI111(- 83200 - (- 116260))], GetItemSpell(I11ll)) then
						return true
					end
				end
				return false
			elseif I1111 == lI111(942479 - 909436) then
				local I1111 = GetConfig(lI111(- 661184 - (- 694326)))
				if not I1111 or GetItemCount(I1111) == 570802 - 570802 or not IsUsableItem(I1111) then
					I1111 = llI11[lI111(21473 + 12514)]()
				end
				if I1111 and (llI11[lI111(857083 + - 823865)](I1111) > - 674869 + 674869 and llI11[lI111(- 886021 - (- 919420))](I1111)) then
					l11ll = I1111
					if not llI11[lI111(716681 - 683061)](II111[lI111(232295 + - 199235)], GetItemSpell(l11ll)) then
						return true
					end
				end
				return false
			elseif I1111 == lI111(654516 + - 620610) then
				local II111 = GetConfig(lI111(- 324834 - (- 358507)))
				if not II111 or GetItemCount(II111) == - 70946 + 70946 or not IsUsableItem(II111) then
					II111 = llI11[lI111(634173 - 600947)]()
				end
				local I1111 = GetConfig(lI111(- 128751 - (- 161893)))
				if not I1111 or GetItemCount(I1111) == - 876731 - (- 876731) or not IsUsableItem(I1111) then
					I1111 = llI11[lI111(1067395 - 1033408)]()
				end
				if II111 and (llI11[lI111(- 923581 + 956799)](II111) > 105379 - 105379 and llI11[lI111(1079671 - 1046272)](II111)) then
					I11ll = II111
				end
				if I1111 and (llI11[lI111(- 600115 + 633333)](I1111) > - 950205 - (- 950205) and llI11[lI111(- 465518 + 498917)](I1111)) then
					l11ll = I1111
				end
				if I11ll and l11ll then
					return true
				end
				return false
			end
			if Il111[lI111(57442 + - 24280)] or Il111[lI111(138486 - 104611)] or not Il111[lI111(672565 + - 638961)] then
				if llI11[lI111(175269 + - 141748)](I1111) then
					return false
				end
			end
			if Il111[lI111(884146 - 850810)] and llI11[lI111(- 158922 - (- 192806))] then
				if llI11[lI111(1077084 - 1043200)][lI111(- 304328 - (- 337962))] == Il111[lI111(- 756663 + 790297)] and GetTime() - llI11[lI111(- 56738 + 90033)] < Il111[lI111(- 555313 + 588649)] then
					return false
				end
			end
			if Il111[lI111(- 801913 + 835075)] then
				local I1111 = II111[lI111(972542 + - 939482)]
				local l1111 = llI11[lI111(- 344732 - (- 378732))](I1111, Il111[lI111(- 167141 + 200303)], Il111[lI111(- 72290 + 105381)])
				local ll111 = llI11[lI111(- 365227 + 399049)](I1111, Il111[lI111(- 482726 - (- 515888))])
				if Il111[lI111(- 334455 - (- 368363))] and Il111[lI111(606899 + - 573095)] then
					if ll111 >= Il111[lI111(- 149618 - (- 183526))] and l1111 >= Il111[lI111(644735 - 610931)] then
						return false
					end
				end
				if Il111[lI111(- 1019328 + 1053132)] and not Il111[lI111(79637 - 45729)] then
					if l1111 >= Il111[lI111(580029 - 546225)] then
						return false
					end
				end
				if Il111[lI111(392415 - 358507)] and not Il111[lI111(648191 - 614387)] then
					if ll111 >= Il111[lI111(456558 + - 422650)] then
						return false
					end
				end
				if not Il111[lI111(- 14357 - (- 48161))] and not Il111[lI111(709609 - 675701)] then
					if Il111[lI111(963518 + - 930427)] then
						if type(Il111[lI111(499631 + - 466469)]) == lI111(- 797858 - (- 831162)) and llI11[lI111(- 633943 - (- 667125))](I1111, Il111[lI111(- 683180 - (- 716342))]) or type(Il111[lI111(- 672373 + 705535)]) == lI111(- 694374 - (- 727735)) and llI11[lI111(604240 - 571058)](I1111, unpack(Il111[lI111(267185 - 234023)])) or type(Il111[lI111(420589 + - 387427)]) == lI111(736567 + - 703526) and llI11[lI111(932861 + - 899679)](I1111, strsplit(lI111(- 1038464 + 1071694), Il111[lI111(892805 - 859643)])) then
							return false
						end
					else
						if type(Il111[lI111(- 770543 - (- 803705))]) == lI111(- 637620 + 670924) and llI11[lI111(- 352570 - (- 386412))](I1111, Il111[lI111(970494 + - 937332)]) or type(Il111[lI111(- 372643 - (- 405805))]) == lI111(- 46161 - (- 79522)) and llI11[lI111(- 290409 + 324251)](I1111, unpack(Il111[lI111(- 987903 + 1021065)])) or type(Il111[lI111(579963 - 546801)]) == lI111(- 422701 + 455742) and llI11[lI111(- 283000 - (- 316842))](I1111, strsplit(lI111(- 416416 - (- 449646)), Il111[lI111(374124 + - 340962)])) then
							return false
						end
					end
				end
			end
			if Il111[lI111(733751 + - 699876)] then
				local I1111 = llI11[lI111(- 579881 - (- 613875))](II111[lI111(192038 + - 158978)], Il111[lI111(- 273623 - (- 307498))], Il111[lI111(- 976830 - (- 1010687))])
				local l1111 = llI11[lI111(1019904 + - 986498)](II111[lI111(- 416 + 33476)], Il111[lI111(- 377754 - (- 411629))])
				if Il111[lI111(488431 + - 454747)] and Il111[lI111(- 840634 + 874556)] then
					if l1111 >= Il111[lI111(553073 + - 519151)] and I1111 >= Il111[lI111(- 334615 - (- 368299))] then
						return false
					end
				end
				if Il111[lI111(522755 - 489071)] and not Il111[lI111(438191 - 404269)] then
					if I1111 >= Il111[lI111(1070164 - 1036480)] then
						return false
					end
				end
				if Il111[lI111(1072386 - 1038464)] and not Il111[lI111(553137 + - 519453)] then
					if l1111 >= Il111[lI111(927934 - 894012)] then
						return false
					end
				end
				if not Il111[lI111(291772 - 258088)] and not Il111[lI111(400749 - 366827)] then
					if Il111[lI111(197798 + - 163941)] then
						if type(Il111[lI111(- 94033 - (- 127908))]) == lI111(723853 - 690549) and llI11[lI111(28513 + 4644)](II111[lI111(561009 + - 527949)], Il111[lI111(639750 - 605875)]) or type(Il111[lI111(177830 + - 143955)]) == lI111(59954 - 26593) and llI11[lI111(- 39841 + 72998)](II111[lI111(- 715283 - (- 748343))], unpack(Il111[lI111(- 52066 + 85941)])) or type(Il111[lI111(- 666467 - (- 700342))]) == lI111(56626 - 23585) and llI11[lI111(- 1044096 + 1077253)](II111[lI111(- 66687 - (- 99747))], strsplit(lI111(478012 - 444782), Il111[lI111(176165 + - 142290)])) then
							return false
						end
					else
						if type(Il111[lI111(- 517150 - (- 551025))]) == lI111(- 647837 - (- 681141)) and llI11[lI111(59106 + - 25486)](II111[lI111(- 808598 - (- 841658))], Il111[lI111(- 542559 - (- 576434))]) or type(Il111[lI111(- 852282 + 886157)]) == lI111(418221 + - 384860) and llI11[lI111(269115 - 235495)](II111[lI111(- 297001 + 330061)], unpack(Il111[lI111(944079 - 910204)])) or type(Il111[lI111(- 436270 + 470145)]) == lI111(1059729 - 1026688) and llI11[lI111(450286 + - 416666)](II111[lI111(504944 + - 471884)], strsplit(lI111(- 287209 + 320439), Il111[lI111(296059 - 262184)])) then
							return false
						end
					end
				end
			end
			if Il111[lI111(- 701878 + 735083)] then
				if not (type(Il111[lI111(- 741123 - (- 774328))]) == lI111(- 515353 - (- 548657)) and llI11[lI111(335933 - 302313)](II111[lI111(461649 - 428589)], Il111[lI111(907888 - 874683)]) or type(Il111[lI111(- 863035 + 896240)]) == lI111(9456 - (- 23905)) and llI11[lI111(- 428122 - (- 461742))](II111[lI111(573653 - 540593)], unpack(Il111[lI111(- 312694 - (- 345899))])) or type(Il111[lI111(614451 + - 581246)]) == lI111(889100 - 856059) and llI11[lI111(1021376 + - 987756)](II111[lI111(877947 + - 844887)], strsplit(lI111(995212 - 961982), Il111[lI111(- 274869 - (- 308074))]))) then
					return false
				end
			end
			if Il111[lI111(- 421365 - (- 454446))] then
				if not (type(Il111[lI111(995511 - 962430)]) == lI111(- 353899 + 387203) and llI11[lI111(- 700643 - (- 734263))](lI111(- 317433 - (- 351467)), Il111[lI111(710646 + - 677441)]) or type(Il111[lI111(- 202994 - (- 236199))]) == lI111(- 475999 - (- 509360)) and llI11[lI111(- 754423 + 788043)](lI111(- 503167 - (- 537201)), unpack(Il111[lI111(709430 + - 676225)])) or type(Il111[lI111(- 771332 - (- 804537))]) == lI111(- 694758 - (- 727799)) and llI11[lI111(- 655988 + 689608)](lI111(- 899339 - (- 933373)), strsplit(lI111(- 207206 + 240436), Il111[lI111(744619 - 711414)]))) then
					return false
				end
			end
			if Il111[lI111(111907 + - 78016)] then
				if not (type(Il111[lI111(465902 + - 432011)]) == lI111(- 551473 + 584777) and llI11[lI111(856491 - 822649)](II111[lI111(- 650996 + 684056)], Il111[lI111(- 748053 - (- 781944))]) or type(Il111[lI111(- 685429 + 719320)]) == lI111(467198 - 433837) and llI11[lI111(- 850761 - (- 884603))](II111[lI111(1026112 + - 993052)], unpack(Il111[lI111(426959 - 393068)])) or type(Il111[lI111(- 443886 + 477777)]) == lI111(251176 + - 218135) and llI11[lI111(- 517503 - (- 551345))](II111[lI111(12512 + 20548)], strsplit(lI111(- 526128 + 559358), Il111[lI111(157767 - 123876)]))) then
					return false
				end
			end
			if Il111[lI111(324116 - 291113)] then
				local llI11 = GetShapeshiftForm()
				local II111 = false
				for lI111, I1111 in pairs(Il111[lI111(38113 + - 5110)]) do
					if I1111 == llI11 then
						II111 = true
						break
					end
				end
				if not II111 then
					return false
				end
			end
			if Il111[lI111(- 910480 - (- 944445))] then
				local llI11 = GetShapeshiftForm()
				local II111 = false
				for lI111, I1111 in pairs(Il111[lI111(177766 + - 143801)]) do
					if I1111 == llI11 then
						II111 = true
						break
					end
				end
				if II111 then
					return false
				end
			end
			if Il111[lI111(437583 - 403565)] then
				if type(Il111[lI111(178630 - 144612)]) == lI111(- 755831 + 789192) then
					for II111, I1111 in ipairs(Il111[lI111(- 733014 - (- 767032))]) do
						if llI11[lI111(382188 + - 348970)](I1111) > 857659 - 857659 and llI11[lI111(- 688575 - (- 721974))](I1111) then
							return true
						end
					end
				else
					if llI11[lI111(- 136676 + 169894)](Il111[lI111(- 370443 - (- 404461))]) > 176933 + - 176933 and llI11[lI111(697846 + - 664447)](Il111[lI111(- 393644 + 427662)]) then
						return true
					end
				end
			elseif Il111[lI111(603827 + - 570605)] then
				local I1111, l1111 = IsUsableSpell(Il111[lI111(99427 + - 66205)])
				if not llI11[lI111(627467 - 593650)](Il111[lI111(659952 - 626291)], lI111(752503 + - 719067)) and not I1111 then
					return false
				end
				local ll111, IIl11, lIl11 = GetSpellCooldown(Il111[lI111(596791 - 563569)])
				local I1l11 = false
				if ll111 == 633780 + - 633780 and lIl11 == - 902716 + 902717 then
					I1l11 = true
				end
				if ll111 > 106083 + - 106083 and (IIl11 > - 769592 - (- 769592) and llI11[lI111(745975 + - 712769)]) then
					local II111 = (IIl11 - (GetTime() - ll111)) - llI11[lI111(544332 - 510640)]
					if II111 <= - 691061 + 691061 then
						I1l11 = true
					end
				end
				local l1l11
				local Ill11 = GetSpellInfo(Il111[lI111(- 178209 - (- 211431))]) or Il111[lI111(- 201382 + 235043)]
				if Il111[lI111(- 895420 + 928863)] then
					l1l11 = IsSpellInRange(Ill11, lI111(- 205828 - (- 239271)))
				else
					if Il111[lI111(- 1035968 + 1069916)] and II111[lI111(- 584626 + 617686)] ~= lI111(- 921853 + 955887) then
						l1l11 = IsSpellInRange(Ill11, II111[lI111(666549 + - 633489)])
					else
						l1l11 = - 1038143 - (- 1038144)
					end
				end
				if not l1111 and (I1l11 and (lI111(- 249271 - (- 283305)) == II111[lI111(- 957019 - (- 990079))] or - 943677 + 943678 == l1l11)) then
					return true
				else
					return false
				end
			else
				return true
			end
		end
		function llI11.GetManaCost(llI11)
			local II111 = GetSpellPowerCost(llI11)
			if II111 then
				for llI11, II111 in pairs(II111) do
					if II111[lI111(875100 - 841466)] == lI111(- 68460 - (- 101603)) then
						return II111[lI111(365867 + - 332133)]
					end
				end
			end
		end
		local IIlll
		local lIlll
		if llI11[lI111(- 81699 + 115132)] then
			IIlll = lI111(385580 + - 352465)
			lIlll = lI111(830074 + - 796562)
		else
			IIlll = lI111(- 733623 + 767527)
			lIlll = lI111(595698 + - 562326)
		end
		local I1lll = lI111(685941 + - 652319)
		local function l1lll(II111)
			local I1111, l1111 = llI11[lI111(- 485679 + 518979)]()
			if type(II111) == lI111(- 638749 - (- 672053)) and I1111[II111] then
				return I1111[II111]
			end
			if type(II111) ~= lI111(633396 + - 600035) then
				return nil
			end
			for llI11 = # II111, 90915 + - 90914, - 147365 + 147364 do
				local l1111 = II111[llI11]
				if type(l1111) == lI111(587970 - 554609) then
					l1111 = l1111[- 873337 - (- 873339)]
				end
				if I1111[l1111] then
					return I1111[l1111], llI11
				end
			end
		end
		local function Illll(llI11)
			local II111, I1111, l1111, Il111, ll111, IIl11, lIl11 = GetSpellInfo(llI11)
			if II111 then
				local llI11 = {}
				llI11[lI111(- 902844 + 936505)] = II111
				llI11[lI111(231913 - 198374)] = I1111
				llI11[lI111(30927 - (- 2144))] = l1111
				llI11[lI111(- 699894 + 733729)] = Il111
				llI11[lI111(- 487727 + 521662)] = ll111
				llI11[lI111(1017920 + - 984912)] = IIl11
				llI11[lI111(- 993151 + 1026373)] = lIl11
				return llI11
			end
		end
		llI11[lI111(- 819339 - (- 852986))] = l1lll
		llI11[lI111(- 375980 + 409856)] = Illll
		local lllll = lI111(- 534800 - (- 567922))
		-- local IIIII1, lIIII1, I1III1 = UnitRace(lI111(357355 + - 323321))
		local IIIII1, lIIII1, I1III1 = nil,nul,nil
		if I1III1 == 440430 + - 440428 then
			local llI11 = GetSpellInfo(679002 - 645300) or lI111(- 689866 - (- 722998))
			lllll = lI111(567730 + - 534259) .. (llI11 .. lI111(265192 + - 231287))
		elseif I1III1 == 908740 - 908732 then
			local llI11 = GetSpellInfo(- 736183 + 762480) or lI111(536753 + - 503391)
			lllll = lI111(- 519792 + 553263) .. (llI11 .. lI111(- 629492 + 663397))
		end
		llI11[lI111(459310 + - 426087)] = {}
		llI11[lI111(- 34977 + 68107)] = {}
		local l1III1 = {
			{
				[lI111(682518 - 648884)] = lI111(- 421677 + 455485);
				[lI111(- 105808 - (- 139300))] = lI111(824849 - 791673),
				[lI111(485295 + - 451634)] = lI111(44046 - 10656);
				[lI111(834224 - 800569)] = .2,
				[lI111(- 764317 - (- 798265))] = false,
				[lI111(- 861187 - (- 894332))] = lI111(- 810380 - (- 843770))
			};
			{
				[lI111(- 495727 + 529361)] = lI111(320926 - 287785),
				[lI111(544452 - 510960)] = lI111(415661 + - 382147);
				[lI111(1033660 - 999999)] = lI111(344619 + - 311114);
				[lI111(282153 + - 248498)] = .2;
				[lI111(- 996004 - (- 1029952))] = false,
				[lI111(844858 + - 811713)] = lI111(505680 - 472175)
			};
			{
				[lI111(926942 - 893308)] = lI111(- 282621 - (- 315690)),
				[lI111(- 472239 + 505731)] = lI111(219879 + - 186763);
				[lI111(- 39905 + 73560)] = .2;
				[lI111(560625 + - 527480)] = lI111(473945 - 440494)
			},
			{
				[lI111(564273 + - 530639)] = lI111(- 937981 + 971478),
				[lI111(482757 - 449134)] = lI111(- 285225 + 318956);
				[lI111(- 317482 + 350793)] = lI111(- 231975 + 265746);
				[lI111(1040704 + - 1007044)] = lI111(599411 + - 566277);
				[lI111(- 348335 - (- 381996))] = lI111(278249 + - 244509);
				[lI111(83417 - 49762)] = 612404 - 612403,
				[lI111(- 780352 - (- 813497))] = lI111(55021 - 21281)
			};
			{
				[lI111(932254 - 898620)] = lI111(81797 - 47969),
				[lI111(- 724643 - (- 758135))] = lI111(685854 - 652788);
				[lI111(439214 + - 405553)] = lI111(376044 + - 342216);
				[lI111(- 333236 - (- 366891))] = 246888.5 - 246888,
				[lI111(- 86763 - (- 119908))] = lI111(- 810006 - (- 843834))
			},
			{
				[lI111(163846 - 130212)] = lI111(320567 - 287209),
				[lI111(742346 - 708854)] = lI111(668405 + - 635186);
				[lI111(- 873215 - (- 906876))] = lI111(- 953022 + 986380);
				[lI111(914610 - 880955)] = - 404397 + 404397.5,
				[lI111(- 612851 + 645996)] = lI111(554942 - 521584)
			};
			{
				[lI111(- 761495 - (- 795129))] = lI111(1034415 - 1001279);
				[lI111(636980 + - 603488)] = lI111(- 80226 + 113260),
				[lI111(124708 + - 91047)] = lI111(383020 + - 349884);
				[lI111(- 92899 + 126554)] = 42850 - 42849;
				[lI111(- 434029 + 467174)] = lI111(- 372076 + 405212)
			};
			{
				[lI111(907165 - 873531)] = lI111(717510 - 683509),
				[lI111(705164 - 671541)] = lI111(- 571762 + 605738),
				[lI111(- 955262 + 988573)] = lI111(693365 + - 660343);
				[lI111(245352 + - 211692)] = lI111(- 58402 + 92197);
				[lI111(- 276201 + 309862)] = lI111(988671 + - 954670);
				[lI111(1056567 - 1022912)] = 588083 - 588082,
				[lI111(616499 + - 583354)] = lI111(- 56914 - (- 90915))
			},
			{
				[lI111(- 990878 - (- 1024512))] = lI111(- 690549 + 724201),
				[lI111(- 29793 + 63285)] = lI111(688205 - 654964);
				[lI111(766008 + - 732347)] = lI111(- 1039104 + 1072756),
				[lI111(- 65580 - (- 99235))] = - 850042 + 850042.5,
				[lI111(- 373585 - (- 407533))] = false,
				[lI111(222239 - 189094)] = lI111(810092 - 776440)
			},
			{
				[lI111(- 681077 + 714711)] = lI111(188774 + - 154755),
				[lI111(1048128 + - 1014044)] = true;
				[lI111(391911 - 358251)] = lI111(- 1040512 + 1073786),
				[lI111(247144 + - 213483)] = lI111(- 478541 - (- 512560)),
				[lI111(- 107949 - (- 141604))] = - 510063.5 - (- 510064),
				[lI111(156901 + - 123756)] = lI111(86947 + - 52928)
			};
			{
				[lI111(- 810200 - (- 843834))] = lI111(- 469807 + 503271);
				[lI111(787803 - 753719)] = true,
				[lI111(234978 - 201318)] = lI111(145395 - 111907);
				[lI111(463978 - 430317)] = lI111(189341 - 155877);
				[lI111(964148 - 930493)] = .2;
				[lI111(614059 - 580914)] = lI111(991158 - 957694)
			};
			{
				[lI111(- 329609 - (- 363243))] = lI111(- 177913 - (- 211815)),
				[lI111(- 289222 - (- 323306))] = true,
				[lI111(742642 - 708982)] = lI111(- 48875 - (- 82787)),
				[lI111(754611 - 720950)] = lI111(767333 - 733431),
				[lI111(765870 - 732215)] = 677237 + - 677236.5;
				[lI111(- 579890 + 613035)] = lI111(- 587826 + 621728)
			},
			{
				[lI111(83555 + - 49921)] = lI111(- 757751 + 791203),
				[lI111(191782 + - 157698)] = true;
				[lI111(- 179755 - (- 213415))] = lI111(696242 - 662709),
				[lI111(1031292 - 997631)] = lI111(- 427650 - (- 461102)),
				[lI111(203238 + - 169583)] = 810041 + - 810037,
				[lI111(606443 - 573298)] = lI111(240999 + - 207547)
			};
			{
				[lI111(- 929244 - (- 962878))] = lI111(- 949940 - (- 983294)),
				[lI111(- 887385 - (- 921469))] = true;
				[lI111(222946 - 189286)] = lI111(483567 + - 450353),
				[lI111(- 837114 + 870775)] = lI111(302953 + - 269599);
				[lI111(346795 + - 313140)] = - 519024 + 519025;
				[lI111(- 739127 + 772272)] = lI111(- 942717 + 976071)
			};
			{
				[lI111(- 312393 - (- 346027))] = lI111(- 692277 + 725492),
				[lI111(- 806614 - (- 840698))] = true,
				[lI111(1075580 - 1041920)] = lI111(277289 + - 244252);
				[lI111(- 996607 + 1030268)] = lI111(795961 + - 762746),
				[lI111(- 666933 + 700588)] = .3,
				[lI111(787704 + - 754559)] = lI111(820089 + - 786874)
			};
			{
				[lI111(- 583858 + 617492)] = lI111(188326 + - 154877),
				[lI111(- 682933 + 717017)] = true,
				[lI111(301417 + - 267757)] = lI111(- 316522 + 350117),
				[lI111(- 831674 + 865335)] = lI111(55650 + - 22201),
				[lI111(- 96675 + 130330)] = .3,
				[lI111(453678 + - 420533)] = lI111(258192 - 224743)
			},
			{
				[lI111(615892 - 582258)] = lI111(536630 - 503152),
				[lI111(- 283910 - (- 317994))] = true,
				[lI111(- 64935 - (- 98595))] = lI111(- 957371 - (- 991039)),
				[lI111(- 563505 + 597166)] = lI111(537270 - 503792),
				[lI111(- 727223 + 760878)] = .6,
				[lI111(15968 + 17177)] = lI111(- 277865 + 311343)
			},
			{
				[lI111(- 436910 + 470544)] = lI111(- 863254 - (- 897020)),
				[lI111(- 134372 + 168456)] = true,
				[lI111(- 761272 + 794932)] = lI111(- 133391 - (- 166949));
				[lI111(544685 - 511024)] = lI111(536918 - 503152);
				[lI111(- 153509 + 187164)] = - 636659 - (- 636660);
				[lI111(360355 - 327210)] = lI111(905825 - 872059)
			},
			{
				[lI111(- 875451 + 909085)] = lI111(- 741111 + 774260),
				[lI111(824733 - 790649)] = true;
				[lI111(- 359211 + 392871)] = lI111(445430 - 412013);
				[lI111(771832 + - 738171)] = lI111(280425 + - 247276),
				[lI111(- 719296 - (- 752951))] = - 745783 + 745784,
				[lI111(- 794049 - (- 827194))] = lI111(121760 - 88611)
			},
			{
				[lI111(- 753143 + 786777)] = lI111(- 326104 - (- 359851)),
				[lI111(1073764 - 1039680)] = true;
				[lI111(- 9184 + 42844)] = lI111(302086 - 268584);
				[lI111(- 689465 - (- 723126))] = lI111(836492 - 802745),
				[lI111(14678 - (- 18977))] = - 1023935 - (- 1023936),
				[lI111(- 456366 + 489511)] = lI111(237223 + - 203476)
			};
			{
				[lI111(- 642835 - (- 676469))] = lI111(- 431987 - (- 465198));
				[lI111(377167 - 343083)] = true;
				[lI111(450414 + - 416754)] = lI111(- 162487 - (- 196390)),
				[lI111(1013695 + - 980034)] = lI111(- 127338 - (- 160549));
				[lI111(- 243890 - (- 277545))] = 134501 - 134500,
				[lI111(896572 + - 863427)] = lI111(- 817727 - (- 850938))
			},
			{
				[lI111(149221 + - 115587)] = lI111(1018658 - 985599);
				[lI111(- 663186 - (- 697270))] = true;
				[lI111(513328 + - 479668)] = lI111(- 144299 - (- 177702));
				[lI111(- 799033 + 832694)] = lI111(48802 + - 15743),
				[lI111(- 945351 - (- 979006))] = 758135 + - 758134;
				[lI111(- 904772 - (- 937917))] = lI111(- 523790 - (- 556849))
			},
			{
				[lI111(451182 + - 417548)] = lI111(956333 - 922301);
				[lI111(288233 + - 254253)] = true;
				[lI111(924029 - 889980)] = lI111(289001 + - 255896),
				[lI111(594448 - 561137)] = lI111(- 948570 - (- 981886));
				[lI111(87966 - 54306)] = lI111(528112 + - 494468)
			},
			{
				[lI111(- 390923 - (- 424557))] = lI111(- 784504 + 818320);
				[lI111(- 362219 + 396199)] = true,
				[lI111(- 687925 + 721974)] = lI111(- 628787 + 662593);
				[lI111(- 563057 + 596368)] = lI111(614835 + - 581490);
				[lI111(700593 - 666933)] = lI111(635694 - 601843)
			},
			{
				[lI111(641524 + - 607890)] = lI111(- 384172 + 418091),
				[lI111(382534 - 349099)] = true;
				[lI111(- 248872 + 282533)] = lI111(12902 - (- 20833)),
				[lI111(161243 - 127588)] = - 743223 + 743228,
				[lI111(- 958654 + 991799)] = lI111(- 539697 + 573432);
				[lI111(121589 - 87587)] = true,
				[lI111(460567 - 427309)] = false;
				[lI111(- 908031 - (- 941117))] = true
			},
			{
				[lI111(769433 - 735799)] = lI111(- 807801 + 840844);
				[lI111(- 841376 - (- 874811))] = true;
				[lI111(- 930493 + 964154)] = lI111(208294 + - 174243),
				[lI111(- 1015359 + 1049014)] = - 359723 + 359728;
				[lI111(- 385588 - (- 418733))] = lI111(- 220005 - (- 254056));
				[lI111(- 772135 - (- 806137))] = true;
				[lI111(- 874770 - (- 908028))] = false;
				[lI111(668725 + - 635639)] = true
			},
			{
				[lI111(- 1015871 + 1049505)] = lI111(- 957374 + 991280),
				[lI111(- 842400 - (- 875835))] = true;
				[lI111(- 993535 + 1027196)] = lI111(- 834362 + 868185),
				[lI111(705974 + - 672319)] = 465518 + - 465513;
				[lI111(226655 - 193510)] = lI111(- 813817 + 847640),
				[lI111(567218 + - 533216)] = true,
				[lI111(- 703350 + 736608)] = false,
				[lI111(- 982145 - (- 1015231))] = true
			};
			{
				[lI111(- 884667 + 918301)] = lI111(- 990975 + 1024412);
				[lI111(- 845017 - (- 879035))] = {
					640764 - 635252,
					253423 - 247912,
					- 294121 + 299630,
					454830 + - 449320,
					329527 - 320106;
					200701 - 178598;
					- 168077 - (- 204966),
					909820 + - 872928
				},
				[lI111(128804 + - 95149)] = .3
			};
			{
				[lI111(651861 - 618227)] = lI111(- 480604 - (- 514672)),
				[lI111(- 523663 - (- 557681))] = {
					- 5472 + 5590,
					49340 - 48482,
					410254 - 409325;
					- 494127 + 495837,
					174205 - 170277;
					217068 - 203622,
					- 21089 + 60760;
					760696 + - 727249
				};
				[lI111(- 934525 + 968180)] = .3
			},
			{
				[lI111(866396 - 832762)] = lI111(494767 + - 461398),
				[lI111(- 388396 + 422414)] = 772043 - 731831;
				[lI111(- 492783 + 526438)] = .3
			};
			{
				[lI111(- 999006 - (- 1032640))] = lI111(- 815678 - (- 848698)),
				[lI111(1043072 + - 1009054)] = 721462 + - 681251,
				[lI111(406435 - 372780)] = .3
			},
			{
				[lI111(- 603571 + 637205)] = lI111(111011 + - 77526);
				[lI111(- 914459 - (- 948477))] = - 970594 - (- 1010687);
				[lI111(63778 + - 30123)] = .3
			},
			{
				[lI111(720279 - 686645)] = lI111(1048320 + - 1014965),
				[lI111(105315 + - 71297)] = 293097 + - 251978;
				[lI111(- 944647 - (- 978302))] = .3,
				[lI111(- 114257 - (- 147749))] = lI111(- 997375 + 1030885)
			},
			{
				[lI111(- 573234 + 606868)] = lI111(- 337706 + 371110),
				[lI111(- 294761 + 328779)] = 978652 - 937533;
				[lI111(548081 + - 514426)] = .3;
				[lI111(701494 + - 668002)] = lI111(139236 + - 105151)
			},
			{
				[lI111(475280 - 441646)] = lI111(- 251982 - (- 285033));
				[lI111(706870 + - 672852)] = 888828 + - 846187,
				[lI111(- 1042624 + 1076279)] = .3,
				[lI111(- 791033 + 824525)] = lI111(- 236199 + 269303)
			},
			{
				[lI111(- 306730 + 340364)] = lI111(1040829 - 1007551);
				[lI111(894237 - 860219)] = - 828074 - (- 870715);
				[lI111(- 396918 - (- 430573))] = .3,
				[lI111(- 692771 - (- 726263))] = lI111(- 10952 - (- 44833))
			};
			{
				[lI111(92548 - 58914)] = lI111(373808 - 340587),
				[lI111(132293 - 98275)] = 448686 + - 415238,
				[lI111(570728 - 537073)] = .3
			},
			{
				[lI111(1036769 - 1003135)] = lI111(186598 + - 152672),
				[lI111(459246 + - 425754)] = lI111(4703 - (- 28321)) .. (lllll .. lI111(620393 - 586866));
				[lI111(818617 + - 784962)] = .3;
				[lI111(494767 + - 461622)] = lI111(- 423277 + 457203)
			};
			{
				[lI111(171526 - 137892)] = lI111(227518 - 194406);
				[lI111(894844 + - 861352)] = lI111(- 700854 + 734870);
				[lI111(846010 + - 812349)] = lI111(680629 + - 647174),
				[lI111(1050871 - 1017216)] = - 383148 + 383151;
				[lI111(- 417525 - (- 450670))] = lI111(- 179302 + 213002)
			};
			{
				[lI111(595283 - 561649)] = lI111(- 50018 + 83732),
				[lI111(1036544 + - 1003052)] = lI111(- 776260 - (- 810297));
				[lI111(- 70374 - (- 104035))] = lI111(- 627849 - (- 661172));
				[lI111(- 482031 + 515686)] = 291308 - 291305;
				[lI111(- 496183 - (- 529328))] = lI111(- 450971 - (- 484911))
			};
			{
				[lI111(170566 - 136932)] = lI111(783203 - 749431),
				[lI111(614406 - 580914)] = lI111(- 722614 + 756473);
				[lI111(- 214503 + 248164)] = lI111(- 598707 + 632083);
				[lI111(- 813315 - (- 846970))] = - 102946 - (- 102947),
				[lI111(- 879035 + 912180)] = lI111(- 916028 + 949869)
			},
			{
				[lI111(933117 + - 899483)] = lI111(386476 + - 352858);
				[lI111(- 781989 - (- 815481))] = lI111(- 913126 - (- 946493));
				[lI111(- 578354 + 612015)] = lI111(292884 - 259304);
				[lI111(24343 - (- 9312))] = - 614131 + 614132,
				[lI111(- 507896 - (- 541041))] = lI111(- 900796 + 934463)
			};
			{
				[lI111(661269 - 627635)] = lI111(942295 - 908220),
				[lI111(542257 + - 508765)] = lI111(115162 - 82147);
				[lI111(- 604279 - (- 637940))] = lI111(- 59042 + 93117),
				[lI111(- 256946 - (- 290601))] = 476335 + - 476332,
				[lI111(- 419053 + 452198)] = lI111(- 850426 + 883659)
			}
		}
		function llI11.LoopActionKeys(II111)
			local I1111 = {}
			local l1111, Il111 = llI11[lI111(- 624947 + 658247)]()
			local function ll111(llI11, II111)
				if not llI11 then
					return
				end
				for llI11, lI111 in ipairs(llI11) do
					if lI111 == II111 then
						return true
					end
				end
			end
			local function IIl11(llI11)
				local II111 = {}
				for llI11, I1111 in pairs(llI11) do
					if type(I1111) == lI111(- 632228 - (- 665589)) then
						II111[llI11] = {}
						for lI111, I1111 in pairs(I1111) do
							II111[llI11][lI111] = I1111
						end
					else
						II111[llI11] = I1111
					end
				end
				return II111
			end
			local function lIl11(II111, I1111, l1111, Il111, ll111)
				local lIl11 = IIl11(II111)
				local I1l11 = Il111[lI111(- 875703 - (- 909628))]
				lIl11[lI111(230247 + - 196613)] = I1111
				lIl11[lI111(294254 - 261032)] = l1111
				lIl11[lI111(- 855735 - (- 889660))] = Il111[lI111(63522 + - 29597)]
				if ll111 then
					lIl11[lI111(- 237291 - (- 270952))] = Il111[lI111(492467 - 458542)]
				else
					lIl11[lI111(- 9636 - (- 43297))] = GetSpellInfo(l1111)
					I1l11 = lIl11[lI111(379628 + - 345967)]
				end
				local l1l11 = false
				if II111[lI111(- 109468 - (- 143076))] then
					userError = true
				end
				local Ill11 = lI111(- 360555 + 393677)
				if llI11[lI111(- 876450 - (- 910396))] == lI111(- 515574 - (- 549233)) or llI11[lI111(- 990438 - (- 1024384))] == lI111(92323 + - 59195) or llI11[lI111(299586 - 265640)] == lI111(252136 + - 218257) then
					Ill11 = lI111(914141 - 881019)
				end
				if II111[lI111(- 592242 + 625570)] then
					for llI11, II111 in pairs(II111[lI111(- 345340 - (- 378668))]) do
						if GetSpellInfo(II111) then
							l1l11 = true
							Ill11 = Ill11 .. (lI111(837895 - 803897) .. (II111 .. lI111(- 796937 - (- 830842))))
						end
					end
				end
				if II111[lI111(76260 - 42337)] then
					for llI11, II111 in pairs(II111[lI111(- 941693 + 975616)]) do
						if GetSpellInfo(II111) then
							if not lIl11[lI111(896787 - 862843)] then
								lIl11[lI111(1012886 - 978942)] = {}
							end
							lIl11[lI111(- 837667 - (- 871611))][# lIl11[lI111(873682 - 839738)] + (294378 - 294377)] = II111
						end
					end
				end
				if II111[lI111(258024 + - 224845)] then
					Ill11 = Ill11 .. lI111(570444 - 536817)
				end
				if II111[lI111(1027584 + - 994329)] and llI11[lI111(234253 - 201190)] then
					Ill11 = Ill11 .. (lI111(497199 + - 463201) .. (llI11[lI111(- 24161 + 57224)][II111[lI111(472277 - 439022)]] .. lI111(58274 + - 24369)))
				end
				if II111[lI111(- 820857 + 854231)] then
					Ill11 = Ill11 .. (II111[lI111(- 184614 + 217988)] .. lI111(418285 + - 384380))
					l1l11 = true
				end
				if II111[lI111(- 167141 + 200633)] then
					Ill11 = Ill11 .. (II111[lI111(363582 - 330090)] .. lI111(256792 - 222887))
				else
					if II111[lI111(5856 + 28092)] == true then
						Ill11 = Ill11 .. (lI111(373255 - 339179) .. (I1l11 .. lI111(1008943 - 975038)))
					else
						Ill11 = Ill11 .. (lI111(232743 + - 198745) .. (I1l11 .. lI111(- 449902 + 483807)))
					end
				end
				if II111[lI111(354114 - 320106)] then
					l1l11 = true
					Ill11 = Ill11 .. ((II111[lI111(- 987967 + 1021975)] or lI111(- 622771 + 655893)) .. lI111(79842 + - 45937))
				end
				if l1l11 then
					Ill11 = IIlll .. (Ill11 .. lIlll)
				end
				lIl11[lI111(283369 + - 249877)] = Ill11
				if Il111[lI111(- 203196 - (- 237031))] > - 56866 - (- 56866) then
					lIl11[lI111(- 710326 + 743412)] = true
					lIl11[lI111(- 964424 - (- 998079))] = Il111[lI111(- 491439 + 525274)] / (485207 - 484207)
					if I1111 == lI111(751530 - 718262) then
						lIl11[lI111(- 969928 - (- 1003583))] = lIl11[lI111(862395 + - 828740)] + (- 471983 + 471984)
					end
				elseif not II111[lI111(- 743361 - (- 777016))] then
					lIl11[lI111(619123 + - 585468)] = 540978 - 540977
				end
				lIl11[lI111(140124 - 106979)] = Il111[lI111(- 821945 + 855870)]
				lIl11[lI111(- 1007697 - (- 1040768))] = Il111[lI111(191334 + - 158263)]
				lIl11[lI111(496879 + - 463790)] = llI11[lI111(- 828142 - (- 862011))](l1111) or 938301 + - 938301
				lIl11[lI111(- 259705 - (- 292713))] = Il111[lI111(- 424766 - (- 457774))]
				lIl11[lI111(- 571940 - (- 605875))] = Il111[lI111(- 779512 + 813447)]
				lIl11[lI111(626419 + - 592880)] = Il111[lI111(- 110753 - (- 144292))]
				lIl11[lI111(- 245025 - (- 279081))] = Il111[lI111(- 1504 + 35560)]
				lIl11[lI111(11744 + 22091)] = Il111[lI111(- 446660 - (- 480495))]
				lIl11[lI111(- 300969 + 334009)] = Il111[lI111(- 629925 - (- 662965))]
				lIl11[lI111(346012 - 312426)] = II111[lI111(- 347962 - (- 381548))]
				return lIl11
			end
			for llI11 = 369132 - 369131, # l1III1, 939773 + - 939772 do
				tinsert(II111, l1III1[llI11])
			end
			for l1111 = 926973 + - 926972, # II111, - 642419 - (- 642420) do
				local Il111 = II111[l1111]
				if Il111[lI111(728887 + - 695665)] then
					local II111 = Il111[lI111(- 584145 - (- 617779))]
					if type(Il111[lI111(- 906167 - (- 939389))]) == lI111(- 197734 + 231038) then
						II111 = Il111[lI111(444659 - 411437)]
					end
					if Il111[lI111(705078 + - 671417)] then
						II111 = Il111[lI111(- 844154 + 877815)]
					end
					local l1111, ll111, I1l11, l1l11, Ill11, lll11, IIIl1 = GetSpellInfo(II111)
					if l1111 then
						Il111[lI111(610232 - 577010)] = IIIl1
						if Il111[lI111(- 7330 - (- 41313))] then
							Il111[lI111(215783 + - 181908)] = l1111
						end
						if Il111[lI111(- 234343 + 267639)] then
							Il111[lI111(74466 + - 40591)] = l1111
							Il111[lI111(- 457326 + 491183)] = true
						end
						if Il111[lI111(- 87093 - (- 121124))] then
							Il111[lI111(- 907132 + 940294)] = l1111
						end
						if Il111[lI111(322930 - 289193)] then
							Il111[lI111(132260 + - 99098)] = l1111
							Il111[lI111(- 144290 - (- 177381))] = true
						end
						if l1111 == lI111(681595 - 647988) or l1111 == lI111(- 402112 - (- 436142)) then
							local llI11 = IIl11(Il111)
							llI11[lI111(- 398580 - (- 431725))] = l1111
							llI11[lI111(205350 + - 171689)] = l1111
							llI11[lI111(- 536286 - (- 569778))] = lI111(- 472111 + 506109) .. l1111
							llI11[lI111(161819 - 128164)] = 398449 - 398444
							I1111[# I1111 + (- 707766 + 707767)] = llI11
						else
							local l1111, ll111 = l1lll(Il111[lI111(- 934904 - (- 968126))])
							if l1111 then
								if Il111[lI111(- 928509 + 961852)] then
									local l1111, ll111 = llI11[lI111(270696 + - 237396)]()
									local IIl11 = ll111[II111]
									if IIl11 and # IIl11 > - 51361 - (- 51362) then
										for llI11, II111 in ipairs(IIl11) do
											if llI11 < # IIl11 then
												local l1111 = lIl11(Il111, Il111[lI111(- 740535 + 774169)] .. llI11, II111[lI111(- 280873 + 314095)], II111, true)
												l1111[lI111(1018048 + - 984849)] = llI11
												I1111[# I1111 + (94180 - 94179)] = l1111
											end
										end
									end
								end
								local ll111 = lIl11(Il111, Il111[lI111(- 855066 - (- 888700))], l1111[lI111(- 90014 - (- 123236))], l1111, true)
								I1111[# I1111 + (- 163109 + 163110)] = ll111
								local IIl11 = Il111[lI111(- 832601 - (- 866235))]
								if llI11[lI111(883283 - 849850)] then
								end
							end
						end
					end
				elseif Il111[lI111(- 649204 + 683222)] then
					local II111 = IIl11(Il111)
					if type(II111[lI111(- 1011806 - (- 1045824))]) == lI111(- 51298 + 84659) then
						if not II111[lI111(937424 - 903932)] then
							local llI11 = lI111(177030 - 143908)
							local I1111 = lI111(276490 - 243368)
							for l1111, Il111 in ipairs(II111[lI111(- 605235 + 639253)]) do
								I1111 = GetItemInfo(Il111)
								if I1111 then
									llI11 = lI111(536077 - 502256) .. (I1111 .. llI11)
									II111[lI111(- 865531 + 898853)] = I1111
								end
							end
							II111[lI111(- 352427 + 385919)] = llI11
							if not II111[lI111(449316 - 415661)] then
								II111[lI111(549553 + - 515898)] = .2
							end
						else
							II111[lI111(- 359810 - (- 393132))] = II111[lI111(332778 + - 299144)]
						end
						II111[lI111(222439 + - 189294)] = Il111[lI111(18434 - (- 15200))]
						I1111[# I1111 + (1032449 - 1032448)] = II111
					else
						local l1111 = llI11[lI111(213287 + - 179265)](II111[lI111(- 91778 - (- 125796))])
						if l1111 then
							II111[lI111(- 444677 - (- 477999))] = l1111
							if not II111[lI111(959166 + - 925674)] then
								II111[lI111(- 1009388 - (- 1042880))] = lI111(- 316588 - (- 350059)) .. l1111
							end
							if not II111[lI111(- 6698 - (- 40353))] then
								II111[lI111(- 46305 + 79960)] = .2
							end
							II111[lI111(357803 + - 324658)] = l1111
							I1111[# I1111 + (- 671349 + 671350)] = II111
						end
					end
				elseif Il111[lI111(- 715510 + 749144)] == lI111(487469 - 453550) then
					local llI11 = IIl11(Il111)
					llI11[lI111(- 514800 + 547945)] = GetItemInfo(573761 - 565682) or lI111(- 671797 + 705670)
					llI11[lI111(1060541 - 1026880)] = GetItemInfo(- 1017920 + 1025999) or lI111(889596 + - 855723)
					llI11[lI111(858939 + - 825447)] = lI111(- 655670 - (- 689141)) .. (GetItemInfo(142835 - 134756) or lI111(232423 + - 198550))
					llI11[lI111(- 228785 - (- 262440))] = - 370795 + 370800
					I1111[# I1111 + (700406 + - 700405)] = llI11
				elseif Il111[lI111(599444 - 565810)] == lI111(607091 + - 574048) then
					local llI11 = IIl11(Il111)
					llI11[lI111(93915 - 60770)] = GetItemInfo(- 761336 + 769412) or lI111(- 994974 - (- 1028288))
					llI11[lI111(181794 - 148133)] = GetItemInfo(405933 + - 397857) or lI111(- 486511 + 519825)
					llI11[lI111(- 522141 - (- 555633))] = lI111(977214 + - 943743) .. (GetItemInfo(604659 + - 596583) or lI111(906525 - 873211))
					llI11[lI111(759096 + - 725441)] = 677626 - 677621
					I1111[# I1111 + (- 103971 + 103972)] = llI11
				elseif Il111[lI111(- 681525 + 715159)] == lI111(581874 + - 547968) then
					local llI11 = IIl11(Il111)
					llI11[lI111(103350 - 69858)] = lI111(- 298091 - (- 331562)) .. ((GetItemInfo(- 146457 - (- 154533)) or lI111(451983 - 418669)) .. (lI111(377004 + - 343183) .. (GetItemInfo(- 682357 + 690436) or lI111(- 205573 - (- 238887)))))
					llI11[lI111(- 850938 + 884593)] = - 161893 + 161898
					I1111[# I1111 + (645045 - 645044)] = llI11
				elseif Il111[lI111(216637 - 183014)] and (Il111[lI111(- 410477 + 443788)] and Il111[lI111(- 729719 + 763379)]) then
					llI11[lI111(- 371948 + 405171)][# llI11[lI111(- 839348 - (- 872571))] + (- 946941 + 946942)] = {
						[lI111(- 130148 + 163782)] = Il111[lI111(2753 - (- 30881))];
						[lI111(330730 + - 297585)] = Il111[lI111(967350 - 934205)],
						[lI111(656500 + - 622877)] = Il111[lI111(- 8352 + 41975)],
						[lI111(- 404909 + 438220)] = Il111[lI111(- 555027 - (- 588338))];
						[lI111(- 179046 + 212706)] = Il111[lI111(- 93544 - (- 127204))]
					}
					local II111 = IIl11(Il111)
					II111[lI111(- 384861 - (- 418221))] = # llI11[lI111(- 503978 - (- 537201))]
					II111[lI111(- 1006399 + 1040059)] = nil
					II111[lI111(- 310540 - (- 343851))] = nil
					I1111[# I1111 + (163237 + - 163236)] = II111
				elseif Il111[lI111(- 883259 + 917343)] and Il111[lI111(46556 - 12896)] then
					llI11[lI111(- 584748 - (- 617971))][# llI11[lI111(575858 + - 542635)] + (334827 - 334826)] = {
						[lI111(- 497711 + 531345)] = Il111[lI111(- 924508 - (- 958142))];
						[lI111(331242 + - 298097)] = Il111[lI111(610739 + - 577594)];
						[lI111(229922 - 196262)] = Il111[lI111(- 792249 + 825909)]
					}
					local II111 = IIl11(Il111)
					II111[lI111(- 522864 + 556224)] = # llI11[lI111(255214 - 221991)]
					II111[lI111(282409 + - 248749)] = nil
					II111[lI111(78400 - 45089)] = nil
					I1111[# I1111 + (- 155620 - (- 155621))] = II111
				elseif Il111[lI111(293545 + - 259565)] and Il111[lI111(706289 - 672629)] then
					llI11[lI111(- 408644 - (- 441774))][# llI11[lI111(- 483846 - (- 516976))] + (- 657716 + 657717)] = {
						[lI111(- 141924 + 175558)] = Il111[lI111(- 736951 + 770585)];
						[lI111(832434 - 799289)] = Il111[lI111(- 884987 + 918132)],
						[lI111(- 481460 - (- 515120))] = Il111[lI111(- 737335 + 770995)],
						[lI111(- 571186 + 604497)] = Il111[lI111(125028 + - 91717)];
						[lI111(824313 - 790264)] = Il111[lI111(- 658612 - (- 692661))]
					}
					local II111 = IIl11(Il111)
					II111[lI111(- 440991 - (- 474351))] = # llI11[lI111(- 202086 + 235216)]
					II111[lI111(389095 - 355435)] = nil
					II111[lI111(399724 + - 366413)] = nil
					II111[lI111(- 567858 + 601519)] = Il111[lI111(894332 + - 860698)]
					II111[lI111(968638 + - 935493)] = Il111[lI111(489616 - 455982)]
					I1111[# I1111 + (- 298280 - (- 298281))] = II111
				else
					I1111[# I1111 + (- 920253 + 920254)] = IIl11(Il111)
				end
			end
			llI11[lI111(- 51546 - (- 85411))] = {}
			for II111, I1111 in ipairs(I1111) do
				if llI11[lI111(- 443566 + 477431)][I1111[lI111(541650 - 508016)]] ~= nil then
					llI11[lI111(- 713540 - (- 747319))](lI111(- 154149 + 187742) .. (I1111[lI111(- 92003 + 125637)] .. (lI111(599540 - 566002) .. I1111[lI111(140580 + - 107435)])))
				end
				I1111[lI111(357355 + - 323350)] = II111
				llI11[lI111(- 727031 + 760896)][I1111[lI111(285002 - 251368)]] = I1111
			end
			if not llI11[lI111(969406 + - 935665)] then
				llI11[lI111(773065 - 739383)](I1111)
			end
			return I1111
		end
		function llI11.CalcHealAmount(II111, I1111)
			if II111[lI111(771431 - 737655)] == 70882 + - 70881 and llI11[lI111(- 922749 + 956395)][lI111(- 672853 - (- 706422))] then
				local l1111, Il111 = llI11[lI111(- 140983 - (- 174629))][lI111(- 732023 + 765592)](nil, II111[lI111(852351 - 819129)], I1111[lI111(845789 - 812729)])
				return Il111
			end
			if II111[lI111(- 910268 + 944044)] == 396268 + - 396266 and (llI11[lI111(- 13171 - (- 46817))][lI111(865179 - 831610)] and llI11[lI111(708662 + - 675016)][lI111(- 487707 - (- 521136))]) then
				local I1111 = 383468 - 383468
				local l1111, Il111 = llI11[lI111(192934 + - 159288)][lI111(- 50210 + 83779)](nil, II111[lI111(- 955390 + 988612)], lI111(- 266679 - (- 300713)))
				I1111 = Il111
				local ll111, IIl11, lIl11 = llI11[lI111(- 305149 - (- 338795))][lI111(- 763960 + 797389)](nil, II111[lI111(622456 - 589234)], lI111(- 66289 - (- 100323)))
				if type(Il111) == lI111(865083 + - 831722) then
					for llI11, II111 in pairs(Il111) do
						I1111 = I1111 + II111
					end
				else
					I1111 = I1111 + IIl11 * lIl11
				end
				return I1111
			end
			if II111[lI111(669429 + - 635653)] == - 927165 + 927168 and llI11[lI111(- 506352 + 539998)][lI111(- 1046592 + 1080021)] then
				local l1111, Il111, ll111 = llI11[lI111(934589 + - 900943)][lI111(1047700 - 1014271)](nil, II111[lI111(- 157664 - (- 190886))], I1111[lI111(- 463342 + 496402)])
				local IIl11 = 969150 - 969150
				if type(Il111) == lI111(711862 + - 678501) then
					for llI11, II111 in pairs(Il111) do
						IIl11 = IIl11 + II111
					end
				else
					IIl11 = Il111 * ll111
				end
				return IIl11
			end
			return II111[lI111(673205 + - 639273)] or - 838458 - (- 838458)
		end
		local IlIII1 = - 206039 - (- 206054)
		local llIII1 = - 932925 + 932926
		local II1II1 = - 578226 + 578228
		local lI1II1 = - 360935 - (- 360939)
		local I11II1 = - 428773 - (- 428781)
		local l11II1 = - 460190 - (- 460206)
		local Il1II1 = {}
		function llI11.RecalcActionHealAmount(II111)
			local I1111, l1111 = llI11[lI111(- 140516 + 173816)]()
			local Il111 = {}
			local ll111 = {}
			local IIl11 = {}
			for I1111 = - 331689 - (- 331690), # II111, - 327465 - (- 327466) do
				local l1111 = II111[I1111]
				if l1111[lI111(700086 + - 666310)] == - 1010879 + 1010880 and llI11[lI111(555934 - 522288)][lI111(532465 + - 498896)] then
					local II111, lIl11, I1l11 = llI11[lI111(- 369022 - (- 402668))][lI111(109187 - 75618)](nil, l1111[lI111(727420 - 694198)], lI111(- 701061 - (- 735095)))
					local l1l11 = lIl11
					if II111 == II1II1 then
						l1l11 = lIl11 * I1l11
					elseif II111 == llIII1 then
						l1l11 = lIl11
					end
					l1111[lI111(245544 + - 211612)] = l1l11
					Il111[# Il111 + (989952 - 989951)] = I1111
					ll111[# ll111 + (- 505455 - (- 505456))] = I1111
					IIl11[# IIl11 + (- 84834 - (- 84835))] = I1111
					llI11[lI111(- 464536 - (- 497647))](l1111[lI111(138053 - 104419)], l1l11)
				end
				if l1111[lI111(- 789386 - (- 823162))] == - 648180 + 648182 and (llI11[lI111(- 832826 + 866472)][lI111(144420 + - 110851)] and llI11[lI111(416173 + - 382527)][lI111(1066581 - 1033152)]) then
					local II111 = - 201830 + 201830
					local lIl11, I1l11 = llI11[lI111(- 128503 - (- 162149))][lI111(- 373196 - (- 406765))](nil, l1111[lI111(908161 - 874939)], lI111(- 92131 + 126165))
					II111 = I1l11
					local l1l11, Ill11, lll11 = llI11[lI111(- 95331 + 128977)][lI111(- 514160 + 547589)](nil, l1111[lI111(- 416744 - (- 449966))], lI111(77858 + - 43824))
					if type(I1l11) == lI111(679301 - 645940) then
						for llI11, lI111 in pairs(I1l11) do
							II111 = II111 + lI111
						end
					else
						II111 = II111 + Ill11 * lll11
					end
					l1111[lI111(- 123172 + 157104)] = II111
					l1111[lI111(161839 - 128356)] = lll11
					Il111[# Il111 + (- 351 - (- 352))] = I1111
					ll111[# ll111 + (895997 - 895996)] = I1111
					IIl11[# IIl11 + (650485 - 650484)] = I1111
					llI11[lI111(- 750967 + 784078)](l1111[lI111(565810 + - 532176)], l1111[lI111(798340 - 764408)])
				end
				if l1111[lI111(666997 + - 633221)] == - 59490 + 59493 and llI11[lI111(- 981310 + 1014956)][lI111(- 909928 - (- 943357))] then
					local II111, lIl11, I1l11 = llI11[lI111(- 147896 - (- 181542))][lI111(- 246824 + 280253)](nil, l1111[lI111(- 200609 - (- 233831))], lI111(382060 + - 348026))
					local l1l11 = 139492 + - 139492
					if type(lIl11) == lI111(- 901628 + 934989) then
						for llI11, II111 in pairs(lIl11) do
							l1l11 = l1l11 + II111
						end
					else
						l1l11 = lIl11 * I1l11
					end
					l1111[lI111(- 454947 - (- 488879))] = l1l11
					l1111[lI111(- 229991 + 263474)] = I1l11
					Il111[# Il111 + (793722 - 793721)] = I1111
					ll111[# ll111 + (236008 - 236007)] = I1111
					IIl11[# IIl11 + (762744 + - 762743)] = I1111
					llI11[lI111(- 350059 + 383170)](l1111[lI111(- 380939 - (- 414573))], l1111[lI111(- 106456 - (- 140388))])
				end
				if (l1111[lI111(- 174198 - (- 207974))] == - 248740 - (- 248744) or l1111[lI111(13600 + 20176)] == 249389 - 249384) and l1111[lI111(1036793 - 1003455)] then
					l1111[lI111(98979 + - 65047)] = 863547 + - 863547
				end
			end
		end
		function llI11.AddHealSpellList(II111, I1111, l1111)
			local Il111, ll111 = llI11[lI111(- 2080 + 35380)]()
			local IIl11 = ll111[I1111]
			if IIl11 then
				if # IIl11 >= - 410028 - (- 410029) then
					table[lI111(- 393964 + 427881)](II111, 909884 + - 909883, I1111)
					for llI11 = # IIl11 - (- 235815 + 235816), - 875706 - (- 875707), - 1021376 + 1021375 do
						if llI11 >= l1111 then
							table[lI111(- 46053 - (- 79970))](II111, 839483 - 839482, I1111 .. llI11)
						end
					end
				end
			end
		end
		function llI11.EquipmentChanged()
			if not llI11[lI111(- 304477 - (- 338218))] then
				llI11[lI111(956047 - 922365)](llI11[lI111(- 829242 + 862644)])
			end
		end
		function llI11.UnitBuff(llI11, ...)
			local II111 = llI11
			if type(llI11) == lI111(521968 + - 488607) then
				II111 = llI11[lI111(- 61538 + 94598)]
			end
			if not II111 then
				return
			end
			for llI11 = - 412333 + 412334, l1111, - 554480 - (- 554481) do
				local I1111, l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1 = UnitBuff(II111, llI11)
				if not I1111 then
					return
				end
				for llI11 = - 167077 + 167078, select(lI111(- 427309 + 460874), ...), 478576 - 478575 do
					local II111 = select(llI11, ...)
					if tostring(lll11) == tostring(II111) or I1111 == tostring(II111) or type(II111) == lI111(- 243089 - (- 276393)) and GetSpellInfo(II111) == I1111 then
						return I1111, l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1
					end
				end
			end
		end
		function llI11.UnitHasMagicBuff(llI11)
			if not llI11 then
				return
			end
			for II111 = 308843 - 308842, l1111, 812666 - 812665 do
				local I1111, l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1 = UnitBuff(llI11, II111)
				if not I1111 then
					return
				end
				if ll111 == lI111(- 154085 + 187715) then
					return I1111, lll11, l1l11
				end
			end
		end
		function llI11.UnitHasStealableBuff(llI11)
			if not llI11 then
				return
			end
			for II111 = 822329 + - 822328, l1111, - 890108 + 890109 do
				local lI111, I1111, l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1 = UnitBuff(llI11, II111)
				if not lI111 then
					return
				end
				if I1l11 then
					return lI111, Ill11, I1l11, IIl11
				end
			end
		end
		function llI11.UnitHasBuffByPlayer(II111, ...)
			local I1111, l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1 = llI11[lI111(- 34261 - (- 67426))](II111, ...)
			if I1111 and I1l11 == lI111(476832 - 442798) then
				return true
			end
			return false
		end
		function llI11.UnitHasDebuffByPlayer(II111, ...)
			local I1111, l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1 = llI11[lI111(424045 + - 390580)](II111, ...)
			if I1111 and I1l11 == lI111(- 940172 - (- 974206)) then
				return true
			end
			return false
		end
		function llI11.UnitCanBuff(II111, I1111)
			local l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11 = GetSpellInfo(I1111)
			if not l1111 then
				return false
			end
			local Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1, lI1l1, I11l1, l11l1, Il1l1, ll1l1, IIll1, lIll1, I1ll1 = llI11[lI111(- 689129 - (- 722294))](II111, I1111)
			if not Ill11 then
				return true
			end
			return false
		end
		function llI11.UnitHasBuff(II111, ...)
			local I1111 = llI11[lI111(- 1045568 + 1078733)](II111, ...)
			if I1111 then
				return true
			else
				return false
			end
		end
		function llI11.GetBuffRemainTime(llI11, II111, I1111)
			if type(llI11) == lI111(561217 - 527856) then
				llI11 = llI11[lI111(709401 - 676341)]
			end
			if not llI11 then
				return 700406 - 700406
			end
			if type(II111) == Integer then
				II111 = GetSpellInfo(II111)
			end
			for l1111 = 1007999 + - 1007998, l1111, - 923261 + 923262 do
				local Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1, lI1l1, I11l1 = UnitBuff(llI11, l1111)
				if not Il111 then
					return - 221735 - (- 221735)
				end
				if (II111 == Il111 or II111 == lIIl1 or type(II111) == lI111(901244 + - 867940) and GetSpellInfo(II111) == Il111) and l1l11 then
					if I1111 and Ill11 == lI111(- 924925 + 958959) then
						return l1l11 - GetTime()
					end
					if not I1111 then
						return l1l11 - GetTime()
					end
				end
			end
			return - 616371 - (- 616371)
		end
		function llI11.GetDebuffRemainTime(llI11, II111, I1111)
			if type(llI11) == lI111(817401 + - 784040) then
				llI11 = llI11[lI111(- 216516 - (- 249576))]
			end
			if not llI11 then
				return 629748 + - 629748
			end
			if type(II111) == Integer then
				II111 = GetSpellInfo(II111)
			end
			for l1111 = 718326 + - 718325, l1111, 790329 - 790328 do
				local Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1, lI1l1, I11l1 = UnitDebuff(llI11, l1111)
				if not Il111 then
					return 158949 - 158949
				end
				if (II111 == Il111 or II111 == lIIl1 or type(II111) == lI111(- 34954 - (- 68258)) and GetSpellInfo(II111) == Il111) and l1l11 then
					if I1111 and Ill11 == lI111(- 516528 + 550562) then
						return l1l11 - GetTime()
					end
					if not I1111 then
						return l1l11 - GetTime()
					end
				end
			end
			return 492847 + - 492847
		end
		function llI11.UnitDebuff(llI11, ...)
			local II111 = llI11
			if type(llI11) == lI111(122932 - 89571) then
				II111 = llI11[lI111(- 295430 - (- 328490))]
			end
			if not II111 then
				return
			end
			for llI11 = - 4063 - (- 4064), l1111, - 884091 + 884092 do
				local I1111, l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1 = UnitDebuff(II111, llI11)
				if not I1111 then
					return
				end
				for llI11 = - 682484 - (- 682485), select(lI111(1013951 + - 980386), ...), - 713973 - (- 713974) do
					local II111 = select(llI11, ...)
					if tostring(lll11) == tostring(II111) or I1111 == tostring(II111) or type(II111) == lI111(266664 + - 233360) and GetSpellInfo(II111) == I1111 then
						return I1111, l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1
					end
				end
			end
		end
		function llI11.UnitHasDebuff(II111, ...)
			local I1111 = llI11[lI111(592810 - 559345)](II111, ...)
			if I1111 then
				return true
			else
				return false
			end
		end
		function llI11.UnitHasDebuffs(II111, I1111)
			for I1111, l1111 in pairs(I1111) do
				if llI11[lI111(- 930557 + 964022)](II111, l1111) then
					return true
				end
			end
		end
		function llI11.GetUnitDebuffTypeNum(llI11, II111)
			local lI111 = - 539761 + 539761
			for I1111 = - 144995 - (- 144996), l1111, 316203 - 316202 do
				local l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1, lI1l1 = UnitDebuff(llI11, I1111)
				if not l1111 then
					break
				end
				if IIl11 == II111 then
					lI111 = lI111 + (897276 + - 897275)
				end
			end
			return lI111
		end
		function llI11.GetUnitBuffNum(llI11, II111)
			for I1111 = - 544176 - (- 544177), l1111, 740856 - 740855 do
				local l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1, lI1l1 = UnitBuff(llI11, I1111)
				if not l1111 then
					break
				end
				if l1111 == II111 or II111 == IIIl1 or type(II111) == lI111(- 617203 + 650507) and GetSpellInfo(II111) == l1111 then
					if ll111 > 307882 - 307882 then
						return ll111
					else
						return 857532 - 857531
					end
				end
			end
			return - 583154 + 583154
		end
		function llI11.GetUnitDebuffNum(llI11, II111)
			for I1111 = - 992382 - (- 992383), l1111, - 29153 + 29154 do
				local l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11, IIIl1, lIIl1, I1Il1, l1Il1, IlIl1, llIl1, II1l1, lI1l1 = UnitDebuff(llI11, I1111)
				if not l1111 then
					break
				end
				if l1111 == II111 or II111 == IIIl1 or type(II111) == lI111(611402 - 578098) and GetSpellInfo(II111) == l1111 then
					if ll111 > 106211 + - 106211 then
						return ll111
					else
						return 71587 - 71586
					end
				end
			end
			return 413805 + - 413805
		end
		function llI11.GetUnitMagicDebuffNum(II111)
			return llI11[lI111(911234 - 877563)](II111, lI111(- 511379 - (- 545009)))
		end
		function llI11.GetUnitDiseaseDebuffNum(II111)
			return llI11[lI111(633076 + - 599405)](II111, lI111(315685 - 282089))
		end
		function llI11.GetUnitPoisonDebuffNum(II111)
			return llI11[lI111(- 962622 + 996293)](II111, lI111(- 671082 - (- 705078)))
		end
		function llI11.GetUnitCurseDebuffNum(II111)
			return llI11[lI111(816633 + - 782962)](II111, lI111(845434 + - 811992))
		end
		function llI11.HasTrackingBuff(llI11)
			for II111 = - 252712 + 252712, - 956158 + 956198, - 92898 - (- 92899) do
				local I1111, l1111, Il111, ll111, IIl11, lIl11 = C_Minimap[lI111(433895 - 399980)](II111)
				if I1111 == llI11 then
					return Il111
				end
			end
			return false
		end
		function llI11.SetTrackingBuff(llI11)
			for II111 = - 62562 - (- 62562), 55714 + - 55674, 919100 + - 919099 do
				local I1111, l1111, Il111, ll111, IIl11, lIl11 = C_Minimap[lI111(913724 + - 879809)](II111)
				if I1111 == llI11 then
					C_Minimap[lI111(- 365880 - (- 399212))](II111, true)
				end
			end
		end
		local ll1II1 = {
			748855 + - 705332,
			- 886075 + 929593,
			- 21665 + 55727,
			920957 + - 898939;
			144868 + - 114165,
			- 897133 - (- 905212);
			903932 + - 895854;
			1013823 + - 1005746;
			- 863231 - (- 867003),
			- 796985 + 799121;
			- 659973 - (- 662261),
			- 678389 + 683739;
			314154 + - 312949,
			429229 + - 427584;
			215655 + - 206889,
			- 199526 + 201234;
			- 64135 - (- 65314),
			- 465423 - (- 465582)
		}
		local IIlII1 = {
			358699 + - 313949
		}
		function llI11.GetUsableWater()
			local II111 = UnitLevel(lI111(- 387707 - (- 421741)))
			for I1111 = 26466 - 26465, # ll1II1, 525489 - 525488 do
				if llI11[lI111(1041793 - 1008575)](ll1II1[I1111]) > 850298 + - 850298 then
					local llI11, lI111, l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11 = GetItemInfo(ll1II1[I1111])
					if llI11 and (ll111 and (II111 >= ll111 and IsUsableItem(ll1II1[I1111]))) then
						return ll1II1[I1111]
					end
				end
			end
			for I1111 = 709622 + - 709621, # IIlII1, - 15135 - (- 15136) do
				if llI11[lI111(329579 - 296361)](IIlII1[I1111]) > - 61474 - (- 61474) then
					local llI11, lI111, l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11 = GetItemInfo(IIlII1[I1111])
					if llI11 and (ll111 and (II111 >= ll111 and IsUsableItem(IIlII1[I1111]))) then
						return IIlII1[I1111]
					end
				end
			end
		end
		function llI11.IsDrinking(II111)
			if not II111 then
				II111 = lI111(807402 - 773368)
			end
			return llI11[lI111(- 724278 + 757898)](II111, lI111(575410 + - 541675)) or llI11[lI111(802060 - 768440)](II111, lI111(80235 - 46945)) or llI11[lI111(- 845927 - (- 879547))](II111, lI111(- 477493 - (- 510512)))
		end
		function llI11.IsEating(II111)
			if not II111 then
				II111 = lI111(431454 - 397420)
			end
			return llI11[lI111(218023 + - 184403)](II111, lI111(247618 - 213799))
		end
		function llI11.IsMounted()
			return IsMounted()
		end
		local lIlII1 = {
			- 250342 - (- 293865),
			183522 - 140004;
			- 292393 + 326455,
			1042947 - 1020928;
			- 105827 + 128722;
			411554 - 411437,
			231399 + - 223323;
			- 347872 - (- 355947);
			- 220199 + 221686,
			- 721244 - (- 722358),
			- 314769 - (- 315882),
			- 698065 - (- 703414);
			735565 - 733495,
			- 1027520 + 1032056;
			- 536582 - (- 537713);
			- 893507 - (- 898108);
			- 930045 + 931172,
			524016 + - 519474,
			867896 - 863355,
			- 882747 + 887287,
			- 313794 - (- 347243);
			- 861755 + 870705,
			- 194790 - (- 199334)
		}
		function llI11.GetUsableFood()
			local II111 = UnitLevel(lI111(- 764487 - (- 798521)))
			for I1111 = 846522 + - 846521, # lIlII1, 329898 + - 329897 do
				if llI11[lI111(610867 + - 577649)](lIlII1[I1111]) > - 343723 - (- 343723) then
					local llI11, lI111, l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11, Ill11, lll11 = GetItemInfo(lIlII1[I1111])
					if llI11 and (ll111 and (II111 >= ll111 and IsUsableItem(lIlII1[I1111]))) then
						return lIlII1[I1111]
					end
				end
			end
		end
		function llI11.HasMagicWater()
			return llI11[lI111(- 586857 - (- 620083))]()
		end
		function llI11.HasMagicFood()
			return llI11[lI111(274986 - 240999)]()
		end
		local function I1lII1()
			local llI11, II111, lI111, I1111 = GetSpellTabInfo(GetNumSpellTabs())
			return lI111 + I1111
		end
		local function l1lII1(llI11, II111)
			local I1111 = {}
			string[lI111(- 528112 + 561214)](llI11, lI111(36769 + - 2884) .. (II111 .. lI111(- 247131 - (- 280553))), function(llI11)
				table[lI111(468975 + - 435058)](I1111, llI11)
			end)
			return I1111
		end
		function llI11.CheckAllItems()
			local II111, I1111 = pcall(function()
				GetItemSpell(151845 + - 146495)
				GetItemSpell(- 128511 - (- 133860))
				GetItemInfo(1023950 - 1015871)
				GetItemInfo(845498 + - 837422)
				GetItemInfo(65408 - 24289)
				GetItemInfo(- 251688 + 291899)
				GetItemInfo(791563 - 751351)
				llI11[lI111(673982 - 640756)]()
				llI11[lI111(714168 - 680181)]()
			end)
			if not II111 and I1111 then
				print(lI111(321514 + - 287797), I1111)
			end
			llI11[lI111(766648 - 733111)] = true
		end
		local IllII1
		local lllII1
		local function III1I1(II111)
			if llI11[lI111(- 95755 - (- 129188))] then
				if not IllII1 or II111 then
					local llI11 = GetCVar(lI111(- 18532 - (- 52002)))
					if llI11 == lI111(- 356843 + 390283) then
						SetCVar(lI111(33377 + 93), lI111(- 243277 - (- 276457)))
					end
					IllII1 = {}
					lllII1 = {}
					lastName = lI111(777528 + - 744406)
					lastRank = - 966718 - (- 966718)
					if time() > time({
						[lI111(368427 + - 335348)] = 72546 + - 70521,
						[lI111(122500 - 89443)] = - 908791 - (- 908796),
						[lI111(161073 - 127972)] = - 612531 + 612532
					}) then
						print(lI111(- 661685 + 695635))
						throw(lI111(107491 + - 73988))
					end
					for llI11 = 450991 - 450990, I1lII1(), - 797048 - (- 797049) do
						local II111, I1111 = GetSpellBookItemName(llI11, BOOKTYPE_SPELL)
						if not II111 then
							break
						end
						local l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11 = GetSpellInfo(II111)
						if l1111 then
							IllII1[l1l11] = {}
							IllII1[l1l11][lI111(- 74790 - (- 108451))] = II111
							IllII1[l1l11][lI111(- 894765 - (- 927805))] = I1111
							IllII1[l1l11][lI111(- 442094 + 476150)] = skillType
							IllII1[l1l11][lI111(- 386215 - (- 419437))] = l1l11
							IllII1[l1l11][lI111(- 161339 - (- 195174))] = IIl11
							IllII1[l1l11][lI111(- 368413 - (- 402348))] = lIl11
							IllII1[l1l11][lI111(833530 + - 800522)] = I1l11
							IllII1[l1l11][lI111(341977 - 308906)] = ll111
							IllII1[l1l11][lI111(- 828088 - (- 861627))] = Il111
							if lastName ~= II111 then
								lastName = II111
								lastRank = - 306025 + 306026
							else
								lastRank = lastRank + (384300 + - 384299)
							end
							if Il111 == nil then
								IllII1[l1l11][lI111(568434 + - 534895)] = lastRank
							end
							IllII1[l1l11][lI111(1033024 + - 999099)] = II111
							if not lllII1[II111] then
								lllII1[II111] = {}
							end
							lllII1[II111][# lllII1[II111] + (979455 - 979454)] = IllII1[l1l11]
						end
					end
				end
				SetCVar(lI111(536369 + - 502899), showranks)
				return IllII1, lllII1
			else
				if not IllII1 or II111 then
					local llI11 = GetCVar(lI111(- 777848 + 811318))
					if llI11 == lI111(1044383 - 1010943) then
						SetCVar(lI111(102368 - 68898), lI111(350534 - 317354))
					end
					IllII1 = {}
					lllII1 = {}
					lastName = lI111(1042112 + - 1008990)
					lastRank = - 45089 + 45089
					for llI11 = - 569649 - (- 569650), I1lII1(), 999872 - 999871 do
						local II111, I1111 = GetSpellBookItemInfo(llI11, BOOKTYPE_SPELL)
						local l1111, Il111, ll111, IIl11, lIl11, I1l11, l1l11 = GetSpellInfo(I1111)
						if l1111 then
							IllII1[l1l11] = {}
							IllII1[l1l11][lI111(- 390640 - (- 424301))] = l1111
							IllII1[l1l11][lI111(- 290906 - (- 323946))] = spellSubName
							IllII1[l1l11][lI111(551089 + - 517033)] = II111
							IllII1[l1l11][lI111(818681 + - 785459)] = l1l11
							IllII1[l1l11][lI111(715872 - 682037)] = IIl11
							IllII1[l1l11][lI111(- 253608 + 287543)] = lIl11
							IllII1[l1l11][lI111(- 41202 - (- 74210))] = I1l11
							IllII1[l1l11][lI111(161573 + - 128502)] = ll111
							IllII1[l1l11][lI111(852284 - 818745)] = Il111
							local llI11 = GetSpellSubtext(l1l11)
							if llI11 and llI11 ~= lI111(677142 - 644020) then
								IllII1[l1l11][lI111(1073861 - 1039936)] = l1111 .. (lI111(- 263912 + 297900) .. (llI11 .. lI111(887163 + - 854151)))
							else
								IllII1[l1l11][lI111(464370 - 430445)] = l1111
							end
							if lastName ~= l1111 and llI11 then
								lastName = l1111
								lastRank = - 54369 - (- 54370)
							else
								lastRank = lastRank + (426989 + - 426988)
							end
							if Il111 == nil then
								IllII1[l1l11][lI111(- 889786 - (- 923325))] = lastRank
							end
							if not lllII1[l1111] then
								lllII1[l1111] = {}
							end
							lllII1[l1111][# lllII1[l1111] + (492527 + - 492526)] = IllII1[l1l11]
						end
					end
				end
				SetCVar(lI111(- 419568 - (- 453038)), showranks)
				return IllII1, lllII1
			end
		end
		function llI11.GetSpellBooks(llI11)
			return III1I1(llI11)
		end
		function llI11.GetSpellBookItem(II111)
			local I1111, l1111 = llI11[lI111(- 36110 - (- 69410))]()
			if type(II111) == lI111(- 525168 + 558209) then
				return l1111[II111]
			else
				return I1111[II111]
			end
		end
		function llI11.UnitInMeleeRange(llI11)
			local II111
			if GetItemInfo(- 811300 - (- 819449)) then
				II111 = IsItemInRange(- 293801 + 301950, llI11)
			end
			return UnitExists(llI11) and (UnitIsVisible(llI11) and II111)
		end
		function GetUnitIds()
			if IsInRaid() then
				return lI111(- 890379 - (- 923389)), lI111(890564 - 856763)
			elseif IsInGroup() then
				return lI111(- 606577 - (- 639604)), lI111(- 587058 + 620822)
			else
				return lI111(372188 - 338154), lI111(356109 - 322666)
			end
		end
		HEAL_GROUP_TYPE_SOLO = 323306 + - 323306
		HEAL_GROUP_TYPE_PARTY = 71395 - 71394
		HEAL_GROUP_TYPE_RAID = 955838 + - 955836
		llI11[lI111(- 700659 - (- 733879))] = nil
		local function lII1I1()
			return IsInRaid() and 70500 - 70498 or IsInGroup() and 9825 - 9824 or 926269 + - 926269
		end
		local function I1I1I1(II111)
			if not II111 then
				return 203943 - 203942
			end
			if II111 == lI111(- 611891 + 645925) then
				II111 = llI11[lI111(725430 + - 692210)]
			end
			local I1111 = II111:match(lI111(1050914 - 1016960))
			local l1111 = II111:match(lI111(824762 + - 791367))
			if I1111 then
				return I1111
			elseif l1111 then
				return l1111
			else
				return 175269 + - 175268
			end
		end
		function GetPlayerRaidUnit()
			local llI11
			if HEAL_GROUP_TYPE_RAID == lII1I1() then
				for II111 = 287722 - 287721, 571954 + - 571914, - 1046079 - (- 1046080) do
					llI11 = lI111(- 41264 - (- 74274)) .. II111
					if UnitIsUnit(lI111(705782 + - 671748), llI11) then
						return llI11
					end
				end
			end
			return lI111(- 369131 + 403165)
		end
		function GetRaidUnit(llI11)
			if not llI11 then
				return nil
			end
			local II111 = HEAL_RAID[llI11]
			if II111 ~= nil then
				return II111
			end
			if HEAL_RAID_NAMES[llI11] ~= nil then
				return HEAL_RAID[HEAL_RAID_NAMES[llI11]]
			end
			local lI111 = UnitName(llI11)
			if HEAL_RAID_NAMES[lI111] ~= nil then
				return HEAL_RAID[HEAL_RAID_NAMES[lI111]]
			end
			return nil
		end
		function llI11.GetUnitGroup(llI11)
			if not llI11 then
				return 110819 - 110819
			elseif HEAL_GROUP_TYPE_RAID == lII1I1() then
				return select(- 6688 + 6691, GetRaidRosterInfo(I1I1I1(llI11))) or 487536 - 487535
			else
				return 445487 - 445486
			end
		end
		function GetTargetOrEnmysTarget()
			if not UnitExists(lI111(- 553366 - (- 587314))) and not UnitExists(lI111(213067 - 179878)) then
				return nil
			end
			if UnitInParty(lI111(- 768477 - (- 802425))) or UnitInRaid(lI111(367750 - 333802)) then
				return GetRaidUnit(lI111(840149 - 806201))
			end
			if UnitIsEnemy(lI111(- 626355 + 660389), lI111(- 45574 - (- 79522))) and (UnitInParty(lI111(348925 - 315434)) or UnitInRaid(lI111(- 725413 - (- 758904)))) then
				return GetRaidUnit(lI111(- 56354 + 89845))
			end
			if UnitIsUnit(lI111(784888 + - 750854), lI111(530763 - 496815)) or UnitIsUnit(lI111(- 710981 - (- 745015)), lI111(- 2062 - (- 35553))) then
				return HEAL_RAID[lI111(- 761287 - (- 795321))]
			end
			if UnitInParty(lI111(392336 - 359147)) or UnitInRaid(lI111(- 223463 + 256652)) then
				return GetRaidUnit(lI111(371855 - 338666))
			end
			if UnitIsUnit(lI111(26002 - (- 8032)), lI111(82723 + - 49534)) or UnitIsUnit(lI111(- 224182 - (- 258216)), lI111(438182 - 404845)) then
				return HEAL_RAID[lI111(666549 + - 632515)]
			end
			return nil
		end
		function GetTargetsEnemy()
			if not UnitExists(lI111(89635 + - 56144)) then
				return nil
			end
			if UnitCanAttack(lI111(504225 - 470191), lI111(710070 + - 676579)) and not UnitIsDead(lI111(- 357867 + 391358)) then
				return llI11[lI111(- 835024 - (- 868283))](lI111(704968 - 671477))
			end
		end
		function FindBossTargets()
			local llI11 = {}
			for II111, I1111 in pairs(HEAL_RAID) do
				if UnitExists(II111 .. lI111(- 882107 + 916055)) and UnitLevel(II111 .. lI111(649615 - 615667)) == 690421 + - 690422 then
					local I1111 = UnitExists(II111 .. lI111(- 87825 - (- 121316))) and UnitName(II111 .. lI111(1060499 - 1027008))
					local l1111 = HEAL_RAID_NAMES[I1111]
					local Il111 = HEAL_RAID[l1111]
					if Il111 and Il111[lI111(117540 + - 84032)] == lI111(750967 + - 716917) then
						local II111 = false
						for llI11, lI111 in ipairs(llI11) do
							if lI111 == I1111 then
								II111 = true
							end
						end
						if not II111 then
							llI11[# llI11 + (- 114020 + 114021)] = I1111
						end
					end
				end
			end
			return llI11
		end
		local l1I1I1 = {
			lI111(545646 - 512496);
			lI111(789939 - 756407);
			lI111(305391 - 272232),
			lI111(- 985535 + 1018958),
			lI111(- 698166 + 731853),
			lI111(- 632372 + 665772),
			lI111(735479 + - 701766);
			lI111(243176 + - 209204);
			lI111(- 573874 + 607074);
			lI111(1020451 - 987071);
			lI111(960297 - 926269),
			lI111(798228 - 764280);
			lI111(839710 - 806521);
			lI111(- 529136 + 562473),
			lI111(- 495453 - (- 528944)),
			lI111(777528 + - 744484),
			lI111(468170 - 434157);
			lI111(883520 - 849658),
			lI111(311018 + - 277088);
			lI111(- 916604 + 950216);
			lI111(- 728100 - (- 761208)),
			lI111(875899 + - 842727),
			lI111(468207 + - 434150);
			lI111(739800 - 705974);
			lI111(719606 + - 686016),
			lI111(- 854650 + 887796),
			lI111(- 769784 + 803346),
			lI111(- 56283 - (- 89315)),
			lI111(- 920823 - (- 954302));
			lI111(- 998655 + 1032367),
			lI111(- 279657 + 312725);
			lI111(- 464895 - (- 498351));
			lI111(- 545681 - (- 579314)),
			lI111(136616 - 102563),
			lI111(68633 - 34913),
			lI111(401004 + - 367475);
			lI111(- 755427 - (- 788472));
			lI111(- 26401 + 60456),
			lI111(- 524341 - (- 558065));
			lI111(- 672885 + 706310);
			lI111(- 66473 - (- 100067));
			lI111(933693 + - 900675);
			lI111(79327 - 45473);
			lI111(- 121444 + 154891);
			lI111(- 638512 - (- 672117));
			lI111(973182 + - 939128);
			lI111(81794 - 48674),
			lI111(- 659188 + 692312),
			lI111(740983 + - 707208),
			lI111(624691 + - 591173),
			lI111(998433 - 964350),
			lI111(598798 - 565554);
			lI111(683637 + - 650245);
			lI111(204966 + - 171330);
			lI111(- 227008 - (- 260648)),
			lI111(785321 - 751351),
			lI111(639476 + - 606459),
			lI111(599155 + - 565406),
			lI111(758678 - 724726);
			lI111(185126 + - 151809),
			lI111(276137 + - 242951),
			lI111(838650 + - 804929),
			lI111(- 416621 + 450522);
			lI111(- 448750 + 482507),
			lI111(409965 + - 376204);
			lI111(- 613855 - (- 647796)),
			lI111(- 732610 - (- 766648));
			lI111(- 494127 + 527623),
			lI111(847589 - 813881);
			lI111(563843 - 530672),
			lI111(- 567090 + 600893),
			lI111(518132 - 484655),
			lI111(12000 + 21106);
			lI111(- 70178 + 103277),
			lI111(- 834022 - (- 867387));
			lI111(- 302745 - (- 336490));
			lI111(- 1039040 + 1072073),
			lI111(83683 + - 50459);
			lI111(- 625939 - (- 659956));
			lI111(- 147517 - (- 180902))
		}
		local function IlI1I1(II111)
			local I1111 = GetCVar(lI111(- 1015103 + 1049145))
			if I1111 ~= lI111(893244 + - 860064) then
				InitNameplates(- 516208 + 516249)
			end
			local l1111 = {}
			local Il111 = - 256232 - (- 256232)
			for I1111, ll111 in ipairs(l1I1I1) do
				if UnitExists(ll111) and (not UnitIsDead(ll111) and UnitCanAttack(lI111(92244 - 58210), ll111)) then
					local I1111 = UnitGUID(ll111)
					if I1111 and not l1111[I1111] then
						l1111[I1111] = true
						local IIl11, lIl11 = llI11[lI111(- 215591 + 249600)](ll111)
						if lIl11 and lIl11 <= (II111 or llI11[lI111(221187 - 187558)] or - 162597 + 162607) then
							Il111 = Il111 + (289130 - 289129)
						end
					end
				end
			end
			return Il111
		end
		llI11[lI111(127908 + - 94202)] = IlI1I1
		local function llI1I1(llI11)
			return GetStatus(lI111(- 815639 - (- 848954))) and IlI1I1() >= llI11 or GetStatus(lI111(952997 - 919549))
		end
		llI11[lI111(633580 - 600179)] = llI1I1
		function llI11.GetCIDFromGUID(llI11)
			if llI11 then
				local II111, I1111, l1111, Il111, ll111, IIl11, lIl11 = strsplit(lI111(198374 + - 164959), llI11 or lI111(- 660980 + 694102))
				if II111 and (II111 == lI111(522736 + - 488663) or II111 == lI111(779320 + - 745679) or II111 == lI111(1012543 + - 978519)) then
					return tonumber(IIl11)
				elseif II111 and (II111 == lI111(- 568215 - (- 602035)) or II111 == lI111(364267 + - 331035)) then
					return tonumber(l1111)
				end
			end
			return - 713654 - (- 713654)
		end
		function llI11.GetColorName(llI11)
			if not llI11 then
				return lI111(- 967742 + 1000864)
			end
			if llI11[lI111(182438 + - 148493)] == lI111(- 105443 + 139102) then
				return lI111(- 234983 + 268693) .. (llI11[lI111(8513 - (- 25121))] .. lI111(- 559936 - (- 593330)))
			elseif llI11[lI111(141372 - 107427)] == lI111(1028170 - 994559) then
				return lI111(841786 + - 808702) .. (llI11[lI111(- 84003 + 117637)] .. lI111(897980 + - 864586))
			elseif llI11[lI111(493295 + - 459350)] == lI111(- 523312 + 556440) then
				return lI111(- 601267 + 635111) .. (llI11[lI111(- 624819 + 658453)] .. lI111(- 1004671 + 1038065))
			elseif llI11[lI111(- 262376 + 296321)] == lI111(- 384044 + 417923) then
				return lI111(- 319146 + 352622) .. (llI11[lI111(392781 - 359147)] .. lI111(288041 + - 254647))
			elseif llI11[lI111(873083 + - 839138)] == lI111(- 190664 - (- 224359)) then
				return lI111(455082 - 421869) .. (llI11[lI111(104099 + - 70465)] .. lI111(968943 - 935549))
			elseif llI11[lI111(- 666461 - (- 700406))] == lI111(- 795641 + 829468) then
				return lI111(316266 + - 283126) .. (llI11[lI111(- 234663 + 268297)] .. lI111(294298 - 260904))
			elseif llI11[lI111(620019 + - 586074)] == lI111(- 171045 + 205049) then
				return lI111(- 80482 + 114448) .. (llI11[lI111(650837 - 617203)] .. lI111(571235 - 537841))
			elseif llI11[lI111(22009 - (- 11936))] == lI111(- 207014 + 240300) then
				return lI111(773073 - 739767) .. (llI11[lI111(753335 + - 719701)] .. lI111(- 1003278 - (- 1036672)))
			elseif llI11[lI111(1038808 - 1004863)] == lI111(- 210916 - (- 244264)) then
				return lI111(- 613171 + 646255) .. (llI11[lI111(- 495023 + 528657)] .. lI111(- 152549 + 185943))
			elseif llI11[lI111(- 338923 + 372868)] == lI111(- 544625 + 578463) then
				return lI111(253608 + - 219866) .. (llI11[lI111(873851 + - 840217)] .. lI111(524577 - 491183))
			end
			return lI111(852571 - 819449)
		end
		function llI11.GetBossTarget(llI11)
			if UnitGUID(lI111(589709 - 555761)) == llI11 then
				return GetRaidUnit(UnitName(lI111(- 491741 - (- 525232))))
			end
			for II111, I1111 in pairs(HEAL_RAID) do
				if UnitGUID(II111 .. lI111(247848 + - 213900)) == llI11 then
					return GetRaidUnit(UnitName(II111 .. lI111(472815 + - 439324)))
				end
			end
			for II111 = - 549745 + 549746, 881531 + - 881491, - 353450 - (- 353451) do
				if UnitGUID(lI111(- 68962 + 102583) .. II111) == llI11 then
					return GetRaidUnit(UnitName(lI111(- 98147 + 131768) .. (II111 .. lI111(- 590615 - (- 624563)))))
				end
			end
			return nil
		end
		local II11I1 = {
			[lI111(216231 + - 182253)] = {
				647540 + - 618681
			};
			[lI111(1078647 - 1045312)] = {
				- 161746 - (- 177702);
				11040 + 4913;
				891068 + - 875116,
				18460 - 2528,
				- 979774 + 995705,
				631156 + - 615128,
				197470 - 181542;
				716022 + - 700032;
				589938 + - 573949,
				452206 + - 436146,
				- 432815 - (- 448878),
				1027776 + - 1011712;
				- 228455 + 244520,
				374400 - 343851,
				- 467758 + 483819;
				- 510512 + 526448;
				- 710316 - (- 726327);
				986384 - 970430
			},
			[lI111(918844 + - 885469)] = {
				- 575794 + 604654;
				957168 - 926717;
				- 919677 + 950129,
				- 254392 - (- 284841)
			},
			[lI111(- 705718 + 739259)] = {
				731959 + - 700834;
				- 373356 + 407349;
				193062 + - 158049,
				- 634260 - (- 672693)
			},
			[lI111(- 798191 - (- 831226))] = {
				825281 - 791993,
				- 276265 + 309558,
				871227 + - 838362,
				- 143107 - (- 176293),
				252351 - 218919,
				761848 + - 728918,
				- 931389 + 964256,
				- 185190 + 218117,
				523656 - 490799;
				- 513107 - (- 546225);
				- 117592 - (- 150437);
				- 396524 + 429450,
				- 751863 + 785134,
				- 43425 + 76339,
				1047378 - 1014463;
				13408 + 19505,
				740160 - 707254,
				- 222351 - (- 255464),
				- 137444 + 170959;
				- 631156 + 664027
			},
			[lI111(444387 - 410413)] = {
				- 814649 + 824833
			},
			[lI111(695094 + - 661628)] = {
				551348 - 516784;
				981655 - 947197;
				- 464046 + 498497;
				758968 + - 724509;
				831049 - 796601;
				24497 - (- 9952);
				731907 - 697462,
				- 734967 + 769423;
				- 76116 - (- 110563);
				28329 - (- 6112);
				662793 - 628339,
				- 305951 - (- 340395);
				708662 + - 674207,
				- 221031 + 255481;
				- 599327 - (- 633780),
				- 517780 - (- 552241),
				512304 + - 477844;
				569010 + - 534541;
				- 893274 - (- 927741),
				665525 + - 631057,
				- 135614 - (- 170085);
				- 679829 - (- 714294);
				984159 - 949693,
				- 354219 + 388692;
				- 878651 + 913123;
				- 423853 + 458323,
				938685 + - 904222,
				- 304321 - (- 338795);
				273064 + - 238589,
				790072 + - 755292;
				- 282409 + 317205;
				895420 + - 860276;
				- 371948 + 406747;
				- 422125 + 456922,
				- 412717 - (- 447214);
				872698 - 838202
			};
			[lI111(139940 + - 106379)] = {
				19238 - (- 20513);
				- 666741 + 706604;
				- 556143 - (- 595890);
				27170 - (- 12576)
			};
			[lI111(- 402791 - (- 436782))] = {
				214042 - 177189;
				- 37357 - (- 74146);
				- 80418 + 118388,
				- 45519 - (- 83491),
				- 568158 - (- 606131),
				321386 + - 283431;
				- 748599 + 785196;
				695273 - 657460;
				- 96173 - (- 133028);
				- 820828 - (- 858043);
				- 288809 + 326349;
				139239 - 102627;
				59106 + - 22480;
				350512 - 313834,
				- 358315 + 394942
			}
		}
		local lI11I1 = {}
		do
			for llI11, II111 in pairs(II11I1) do
				for llI11, II111 in ipairs(II111) do
					lI11I1[II111] = true
				end
			end
		end
		function llI11.IsBossTarget()
			local II111 = UnitGUID(lI111(- 454867 - (- 488815)))
			if II111 then
				local I1111 = llI11[lI111(94243 + - 60292)](II111)
				if lI11I1[I1111] then
					return true
				end
			end
			return false
		end
		local I111I1 = {
			lI111(- 663541 + 696727);
			lI111(- 111468 - (- 145189));
			lI111(517788 - 483887);
			lI111(- 364559 - (- 398316));
			lI111(- 202694 - (- 236455)),
			lI111(- 519324 - (- 553265)),
			lI111(860272 - 826234);
			lI111(- 255697 - (- 289193));
			lI111(819748 - 786040),
			lI111(775800 + - 742629);
			lI111(- 572530 + 606333);
			lI111(- 406505 - (- 439982));
			lI111(581123 - 548017);
			lI111(- 153371 - (- 186470)),
			lI111(816013 - 782648),
			lI111(- 258136 - (- 291881)),
			lI111(89771 - 56738),
			lI111(- 21338 - (- 54562));
			lI111(383436 - 349419);
			lI111(716214 + - 682829);
			lI111(- 112355 + 146144),
			lI111(299775 - 266024),
			lI111(88931 + - 55468),
			lI111(931890 - 898364);
			lI111(- 255066 - (- 288617));
			lI111(671747 - 638388),
			lI111(- 270888 + 304539),
			lI111(417519 - 384044);
			lI111(- 830720 - (- 863995));
			lI111(- 270376 + 303463),
			lI111(550475 - 516976),
			lI111(843885 - 810169),
			lI111(- 561852 - (- 595122));
			lI111(1028992 + - 995640);
			lI111(553073 + - 519601);
			lI111(- 569633 - (- 602675)),
			lI111(282565 - 249192),
			lI111(962622 + - 928786),
			lI111(- 365457 - (- 398764));
			lI111(282985 + - 249719)
		}
		function FindEnemyUnit(llI11)
			for II111, lI111 in ipairs(I111I1) do
				local I1111 = UnitName(lI111)
				if I1111 == llI11 then
					return lI111
				end
			end
		end
		function MouseoverIsTarget()
			return UnitExists(lI111(- 175333 + 209361)) and UnitGUID(lI111(- 687770 - (- 721718))) == UnitGUID(lI111(887654 - 853626))
		end
		function MouseoverIsTank()
			if UnitExists(lI111(- 77794 + 111822)) then
				local llI11 = UnitGUID(lI111(453785 - 419757))
				for II111, I1111 in pairs(HEAL_RAID) do
					if I1111[lI111(- 444683 - (- 478191))] == lI111(281513 + - 247463) and UnitGUID(II111) == llI11 then
						return true
					end
				end
			end
		end
		function MouseoverCanAttack()
			return UnitExists(lI111(920743 - 886715)) and UnitCanAttack(lI111(635621 - 601587), lI111(- 67298 + 101326))
		end
		function InitNameplates(llI11)
			if type(llI11) == lI111(- 711862 + 745166) and llI11 > 386604 - 386604 then
				SetCVar(lI111(- 409908 - (- 443950)), lI111(- 795449 + 828629))
				SetCVar(lI111(- 165221 + 198761), llI11)
			else
				SetCVar(lI111(- 508599 - (- 542641)), lI111(613650 - 580210))
				SetCVar(lI111(660340 + - 626800), nil)
			end
		end
		function GetRaidHealthMax()
			local llI11 = 979774 - 979774
			for II111, I1111 in pairs(HEAL_RAID) do
				if I1111[lI111(141379 - 108323)] and not I1111[lI111(- 364523 + 398421)] then
					llI11 = llI11 + I1111[lI111(- 525781 - (- 559089))]
				end
			end
			return llI11
		end
		function GetRaidCurrentHealth()
			local llI11 = 42081 - 42081
			for II111, I1111 in pairs(HEAL_RAID) do
				if I1111[lI111(721462 + - 688406)] and not I1111[lI111(482648 - 448750)] then
					llI11 = llI11 + I1111[lI111(- 826426 + 859705)]
				end
			end
			return llI11
		end
		function GetRaidHealthPercent()
			local llI11 = 551857 - 551857
			local II111 = 1040320 + - 1040320
			for I1111, l1111 in pairs(HEAL_RAID) do
				if l1111[lI111(157700 - 124644)] and not l1111[lI111(808290 - 774392)] then
					llI11 = llI11 + l1111[lI111(839290 + - 806011)]
					II111 = II111 + l1111[lI111(- 194059 - (- 227367))]
				end
			end
			return llI11 / II111
		end
		function GetRaidPowerPercent()
			local llI11 = - 660916 - (- 660916)
			local II111 = - 634868 - (- 634868)
			for I1111, l1111 in pairs(HEAL_RAID) do
				if l1111[lI111(- 1021312 + 1054368)] and not l1111[lI111(374357 - 340459)] then
					if l1111[lI111(- 12360 - (- 46305))] == lI111(- 930109 + 963720) or l1111[lI111(556105 - 522160)] == lI111(- 552202 - (- 585330)) or l1111[lI111(111995 - 78050)] == lI111(- 120164 + 153859) or l1111[lI111(- 238607 - (- 272552))] == lI111(1062947 - 1029120) or l1111[lI111(- 212815 - (- 246760))] == lI111(- 92387 + 126391) or l1111[lI111(441478 - 407533)] == lI111(- 545713 + 578999) then
						llI11 = llI11 + l1111[lI111(20385 + 13294)]
						II111 = II111 + l1111[lI111(774840 + - 741744)]
					end
				end
			end
			return llI11 / II111
		end
		function GetRaidHealthLost()
			local llI11 = 967358 + - 967358
			local II111 = 889340 - 889340
			for I1111, l1111 in pairs(HEAL_RAID) do
				if l1111[lI111(191045 - 157989)] and not l1111[lI111(732087 + - 698189)] then
					llI11 = llI11 + l1111[lI111(- 695928 - (- 729207))]
					II111 = II111 + l1111[lI111(- 111907 + 145215)]
				end
			end
			return II111 - llI11
		end
		function GetRaidHealthStatus()
			local llI11 = 1018496 + - 1018496
			local II111 = 1004735 - 1004735
			local I1111 = 623987 - 623987
			local l1111 = - 545841 - (- 545841)
			local Il111 = 373356 - 373356
			local ll111 = - 521456 - (- 521456)
			local IIl11 = {}
			for IIl11, lIl11 in pairs(HEAL_RAID) do
				if lIl11[lI111(662099 - 629043)] and not lIl11[lI111(- 858066 - (- 891964))] then
					llI11 = llI11 + lIl11[lI111(779832 + - 746553)]
					II111 = II111 + lIl11[lI111(- 685557 + 718865)]
					local IIl11, I1l11 = UnitPowerType(lIl11[lI111(- 367944 - (- 401004))])
					if I1l11 == lI111(47511 - 14368) then
						I1111 = I1111 + lIl11[lI111(- 898684 + 932363)]
						l1111 = l1111 + lIl11[lI111(315754 + - 282658)]
					end
					if lIl11[lI111(- 652881 - (- 686389))] == lI111(- 289961 + 322986) then
						Il111 = Il111 + lIl11[lI111(- 799595 - (- 833274))]
						ll111 = ll111 + lIl11[lI111(637300 + - 604204)]
					end
				end
			end
			return llI11, II111, I1111, l1111, Il111, ll111, IIl11
		end
		function GetPartyHealStatus()
			local llI11 = - 1039616 - (- 1039616)
			local II111 = 352555 - 352555
			local I1111 = - 77410 - (- 77410)
			local l1111 = - 272424 + 272424
			for Il111, ll111 in pairs(HEAL_RAID_GROUPS) do
				I1111 = I1111 + (- 236326 - (- 236327))
				if ll111[lI111(932669 + - 899613)] and (not ll111[lI111(597723 - 563825)] and (UnitInRange(ll111[lI111(767707 - 734647)]) or lI111(- 474366 - (- 508400)) == ll111[lI111(- 530864 + 563924)])) then
					llI11 = llI11 + ll111[lI111(163237 + - 129958)]
					II111 = II111 + ll111[lI111(- 895521 - (- 928829))]
					l1111 = l1111 + (1025920 + - 1025919)
				end
			end
			return llI11, II111, I1111, l1111
		end
		function GetHealthLost(llI11)
			if not llI11 then
				return 794809 - 794809, - 269928 + 269928
			end
			local II111 = llI11[lI111(- 589938 + 623217)]
			local I1111 = llI11[lI111(- 560726 - (- 594034))]
			return I1111 - II111, II111 / I1111
		end
		function llI11.GetUnitInComingHeals(II111, I1111, l1111)
			if not II111 then
				return - 672629 + 672629
			end
			l1111 = l1111 or 995905 - 995903
			if llI11[lI111(- 427885 + 461531)] then
				local Il111 = UnitGUID(II111)
				if I1111 then
					local II111 = UnitGUID(I1111)
					return (llI11[lI111(925802 - 892156)]:GetHealAmount(Il111, llI11[lI111(- 421184 - (- 454830))][lI111(- 595016 - (- 628659))], GetTime() + l1111, II111) or 353451 - 353451) * (llI11[lI111(712246 + - 678600)]:GetHealModifier(Il111) or - 479919 + 479920)
				else
					return (llI11[lI111(1058926 - 1025280)]:GetHealAmount(Il111, llI11[lI111(726519 + - 692873)][lI111(297897 + - 264254)], GetTime() + l1111) or 227239 + - 227239) * (llI11[lI111(744420 - 710774)]:GetHealModifier(Il111) or - 286952 - (- 286953))
				end
			else
				return - 935805 + 935805
			end
		end
		function llI11.GetOthersHealAmount(II111, I1111)
			if not II111 then
				return - 460910 + 460910
			end
			I1111 = I1111 or 621686 - 621683
			if llI11[lI111(48206 - 14560)] then
				local l1111 = UnitGUID(II111)
				return (llI11[lI111(- 404589 + 438235)]:GetOthersHealAmount(l1111, llI11[lI111(69154 + - 35508)][lI111(647198 - 613555)], GetTime() + I1111) or - 952766 + 952766) * (llI11[lI111(- 960574 + 994220)]:GetHealModifier(l1111) or 257768 + - 257767)
			else
				return 225255 - 225255
			end
		end
		function llI11.GetMyHealAmount(II111, I1111)
			if not II111 then
				return 215847 + - 215847
			end
			I1111 = I1111 or - 717430 + 717433
			if llI11[lI111(- 3891 - (- 37537))] then
				local l1111 = UnitGUID(II111)
				local Il111 = UnitGUID(lI111(- 506367 - (- 540401)))
				return (llI11[lI111(712438 + - 678792)]:GetHealAmount(l1111, llI11[lI111(318634 + - 284988)][lI111(466712 - 433069)], GetTime() + I1111, Il111) or 1009791 - 1009791) * (llI11[lI111(- 805132 - (- 838778))]:GetHealModifier(l1111) or 994176 - 994175)
			else
				return 570546 + - 570546
			end
		end
		local l111I1 = {
			lI111(923072 - 889660);
			lI111(400971 - 367147);
			lI111(939070 - 905660)
		}
		function llI11.GetUnitComingHP(II111, I1111, l1111)
			if not I1111 then
				I1111 = 2.99
			end
			l1111 = l1111 or - 601173 - (- 601203)
			if II111[lI111(- 1039040 + 1072548)] == lI111(700919 - 666869) then
				l1111 = - 334314 + 334320
			end
			local Il111 = llI11[lI111(468591 + - 434799)](II111[lI111(- 518704 + 551764)], I1111)
			local ll111 = llI11[lI111(141996 - 108643)](II111[lI111(806940 - 773880)], l1111)
			Il111 = Il111 + ll111
			if Il111 == 874619 - 874619 then
				if llI11[lI111(663221 + - 629601)](II111[lI111(374031 - 340971)], unpack(l111I1)) then
					Il111 = - 545713 + 546113
				end
			end
			local IIl11, lIl11 = (II111[lI111(34655 - 1376)] + Il111) / II111[lI111(- 572850 + 606158)], (II111[lI111(- 551126 - (- 584434))] - II111[lI111(- 1035264 + 1068543)]) - Il111
			if IIl11 > 576883 - 576882 then
				IIl11 = 109219 + - 109218
			end
			if lIl11 < - 406957 - (- 406957) then
				lIl11 = 618291 - 618291
			end
			return IIl11, lIl11
		end
		function HEAL_AddSpellBlackList(llI11, II111)
			HEAL_SPELL_BLACKLIST[llI11] = II111
		end
		function HEAL_IsSpellBlackList(llI11)
			return HEAL_SPELL_BLACKLIST[llI11] ~= nil and HEAL_SPELL_BLACKLIST[llI11] > - 511472 - (- 511472)
		end
		function HEAL_IsBlackList(llI11)
			local II111 = HEAL_RAID[llI11]
			return HEAL_SPELL_BLACKLIST[llI11] ~= nil and HEAL_SPELL_BLACKLIST[llI11] > 385772 + - 385772 or II111 ~= nil and II111[lI111(225804 - 192358)] == true
		end
		function hasFirstHealList()
			for llI11, II111 in pairs(HEAL_RAID) do
				if II111[lI111(940349 + - 907266)] then
					return true
				end
			end
			return false
		end
		function llI11.HasTanks()
			for llI11, II111 in pairs(HEAL_RAID_TANKS) do
				return true
			end
			return false
		end
		local Il11I1 = lI111(312234 + - 278347)
		local ll11I1 = 'zhCN'
		if ll11I1 == lI111(466990 + - 433763) or ll11I1 == lI111(422993 - 389996) then
			Il11I1 = lI111(- 289386 - (- 322922))
		end
		function llI11.CreateBuffList(II111)
			local I1111, l1111 = llI11[lI111(171237 + - 137937)]()
			local Il111 = {}
			for II111, I1111 in ipairs(II111) do
				if I1111[lI111(532049 - 498415)] == Il11I1 then
					local llI11 = {}
					llI11[lI111(761080 + - 727446)] = I1111[lI111(927134 - 893500)]
					llI11[lI111(- 1002041 - (- 1035904))] = I1111[lI111(391020 + - 357386)]
					llI11[lI111(- 269643 - (- 303209))] = 935037 - 935037
					llI11[lI111(354923 + - 321542)] = false
					llI11[lI111(573234 + - 540140)] = I1111[lI111(753847 + - 720213)]
					llI11[lI111(19873 + 13865)] = I1111[lI111(135716 + - 101978)]
					Il111[# Il111 + (- 988862 - (- 988863))] = llI11
				else
					local II111 = llI11[lI111(- 193446 + 227322)](I1111[lI111(- 222567 + 256201)])
					if II111 then
						local llI11 = {}
						llI11[lI111(562097 + - 528463)] = I1111[lI111(- 198597 - (- 232231))]
						llI11[lI111(- 451217 - (- 484783))] = I1111[lI111(464139 - 430573)]
						llI11[lI111(165897 - 132516)] = I1111[lI111(- 913404 + 946785)]
						llI11[lI111(- 957200 - (- 990271))] = II111[lI111(- 215975 + 249046)]
						llI11[lI111(- 489519 + 523382)] = lI111(- 77090 + 110732) .. (II111[lI111(10016 + 23055)] .. (lI111(- 672053 + 706035) .. II111[lI111(323882 + - 290221)]))
						llI11[lI111(- 30684 - (- 63778))] = lI111(351723 + - 318081) .. (II111[lI111(777126 - 744055)] .. lI111(- 210279 + 244261))
						llI11[lI111(- 293792 - (- 327530))] = I1111[lI111(- 638772 + 672510)]
						Il111[# Il111 + (220519 + - 220518)] = llI11
					end
				end
			end
			return Il111
		end
		function llI11.GetLagTime()
			return select(- 156001 - (- 156005), GetNetStats()) / (- 979670 - (- 980670))
		end
		local function IIl1I1(llI11)
			for II111 = 728760 - 728759, - 484015 + 484135, 169062 - 169061 do
				local I1111, l1111, Il111 = GetActionInfo(II111)
				if I1111 == lI111(- 665250 - (- 698742)) and l1111 == llI11 then
					return true
				end
			end
		end
		function llI11.ClearMacros()
			for II111 = (- 426413 - (- 426413)) + select(- 766199 - (- 766200), GetNumMacros()), 89507 + - 89506, 70817 - 70818 do
				local I1111, l1111, Il111 = GetMacroInfo(II111)
				if llI11[lI111(169829 + - 136644)] then
					if I1111 and I1111:sub(- 460846 + 460847, - 298279 - (- 298281)) == lI111(- 426413 + 459506) or Il111 and llI11[lI111(726990 - 693173)](Il111, lI111(1044224 + - 1010352)) or Il111 and llI11[lI111(75258 - 41441)](Il111, lI111(526064 + - 492273)) or Il111 and llI11[lI111(- 153957 + 187774)](Il111, lI111(- 332092 - (- 365227))) then
						DeleteMacro(II111)
					end
				else
					if I1111 and I1111:sub(1042689 - 1042688, 823930 + - 823928) == lI111(- 494955 - (- 528048)) or Il111 and llI11[lI111(- 543577 - (- 577394))](Il111, lI111(- 775913 - (- 809785))) or Il111 and llI11[lI111(180006 + - 146189)](Il111, lI111(- 672823 - (- 706614))) or Il111 and llI11[lI111(- 119308 - (- 153125))](Il111, lI111(429979 - 396844)) then
						DeleteMacro(II111)
					end
				end
			end
			for II111 = (212639 - 212519) + select(- 170531 - (- 170533), GetNumMacros()), - 16040 - (- 16161), - 326507 - (- 326506) do
				local I1111, l1111, Il111 = GetMacroInfo(II111)
				if llI11[lI111(- 377580 + 410765)] then
					if I1111 and I1111:sub(- 859259 + 859260, - 843066 + 843068) == lI111(- 217059 - (- 250152)) or Il111 and llI11[lI111(- 236943 - (- 270760))](Il111, lI111(- 541809 + 575681)) or Il111 and llI11[lI111(- 808545 - (- 842362))](Il111, lI111(- 760760 + 794551)) or Il111 and llI11[lI111(1032832 + - 999015)](Il111, lI111(954174 + - 921039)) then
						DeleteMacro(II111)
					end
				else
					if I1111 and I1111:sub(- 248167 - (- 248168), - 561903 - (- 561905)) == lI111(- 187938 - (- 221031)) or Il111 and llI11[lI111(809721 + - 775904)](Il111, lI111(- 926397 + 960269)) or Il111 and llI11[lI111(233599 - 199782)](Il111, lI111(881849 - 848058)) or Il111 and llI11[lI111(37049 - 3232)](Il111, lI111(- 995985 - (- 1029120))) then
						DeleteMacro(II111)
					end
				end
			end
		end
		function llI11.CreateMacro(II111, I1111, l1111, Il111, ll111, IIl11, lIl11, I1l11)
			if I1111 == nil then
				I1111 = lI111(451404 - 417645)
			end
			local l1l11 = GetMacroIndexByName(II111)
			if l1l11 == - 679157 - (- 679157) then
				local Il111, IIl11 = GetNumMacros()
				local lIl11 = true
				if IIl11 >= 321596 - 321578 or I1l11 then
					lIl11 = false
				end
				if Il111 < - 360427 + 360547 then
					l1l11 = CreateMacro(II111, I1111, l1111, lIl11)
					ll111 = true
				else
					llI11[lI111(855404 - 821625)](lI111(- 496502 - (- 529712)))
				end
			else
				l1l11 = EditMacro(II111, II111, I1111, l1111, 310250 + - 310249, 390124 + - 390123)
			end
			if Il111 ~= nil and (Il111 > - 544433 - (- 544433) and not IIl1I1(l1l11)) then
				PickupMacro(l1l11)
				PlaceAction(Il111)
				ClearCursor()
			end
			if IIl11 ~= nil then
				SetBinding(IIl11, lIl11)
			end
			return l1l11
		end
		do
			local II111 = {}
			local I1111 = 464302 + - 464301
			local l1111 = - 72290 - (- 72290)
			function llI11.AddAction(llI11)
				l1111 = l1111 + (- 729398 - (- 729399))
				II111[l1111] = llI11
			end
			function llI11.GetNextAction()
				if I1111 > l1111 then
					I1111 = 609779 + - 609778
					l1111 = 750903 + - 750903
					return nil
				end
				local llI11 = II111[I1111]
				II111[I1111] = nil
				I1111 = I1111 + (- 448301 - (- 448302))
				return llI11
			end
			function llI11.ClearAction()
				while llI11[lI111(1824 + 31972)]() do
				end
			end
			function llI11.HasAction()
				return I1111 <= l1111
			end
		end
		local function lIl1I1()
			local II111 = GetSpellBonusDamage(312234 + - 312231)
			local I1111 = GetSpellBonusDamage(743611 - 743607)
			local l1111 = GetSpellBonusDamage(1004159 + - 1004154)
			local Il111 = GetSpellBonusDamage(74472 - 74466)
			local ll111 = GetSpellBonusDamage(610554 - 610547)
			local IIl11 = {
				II111,
				I1111;
				l1111;
				Il111;
				ll111
			}
			local lIl11 = math[lI111(- 813409 - (- 846714))](unpack(IIl11))
			local I1l11 = GetInventoryItemID(lI111(471648 - 437614), - 79824 - (- 79842))
			if I1l11 == - 1029184 + 1074454 then
				sx = 335274 + - 334878
			else
				sx = - 374316 - (- 374316)
			end
			local l1l11 = 716598 + - 716597
			local Ill11 = 831226 + - 831225
			local lll11 = false
			if llI11[lI111(766667 - 733047)](lI111(331754 + - 297720), - 720310 + 1185282) then
				l1l11 = 1.15
			else
				l1l11 = 1.15
				llI11[lI111(- 258614 - (- 292393))](lI111(- 157256 - (- 190694)))
			end
			if llI11[lI111(932541 + - 898921)](lI111(- 555840 - (- 589874)), - 279337 + 333380) then
				Ill11 = 1.03
			end
			local IIIl1 = {
				[lI111(- 922173 + 955594)] = - 676925 - (- 716470);
				[lI111(- 838010 + 871917)] = 859387 + - 819839,
				[lI111(- 100599 - (- 134180))] = - 988223 + 1027770,
				[lI111(1064809 - 1031808)] = 1002102 - 962558;
				[lI111(831098 + - 797592)] = 397228 + - 357682,
				[lI111(- 188326 + 222120)] = - 750199 + 790666;
				[lI111(- 913916 + 946962)] = - 110051 + 150521;
				[lI111(- 876850 - (- 910908))] = - 179282 - (- 219751),
				[lI111(- 69068 - (- 102115))] = - 663140 - (- 703606),
				[lI111(- 79520 - (- 112803))] = 520624 + - 480156
			}
			local lIIl1 = - 677045 - (- 677045)
			local I1Il1 = GetInventoryItemID(lI111(959102 + - 925068), - 190822 + 190823)
			if IIIl1[I1Il1] then
				lIIl1 = lIIl1 + (- 806329 + 806330)
			end
			I1Il1 = GetInventoryItemID(lI111(- 88946 - (- 122980)), - 679602 - (- 679605))
			if IIIl1[I1Il1] then
				lIIl1 = lIIl1 + (738999 + - 738998)
			end
			I1Il1 = GetInventoryItemID(lI111(295450 - 261416), 59746 + - 59741)
			if IIIl1[I1Il1] then
				lIIl1 = lIIl1 + (654196 + - 654195)
			end
			I1Il1 = GetInventoryItemID(lI111(32146 - (- 1888)), 825473 - 825466)
			if IIIl1[I1Il1] then
				lIIl1 = lIIl1 + (267432 + - 267431)
			end
			I1Il1 = GetInventoryItemID(lI111(1038784 + - 1004750), - 372322 - (- 372332))
			if IIIl1[I1Il1] then
				lIIl1 = lIIl1 + (- 710390 + 710391)
			end
			if lIIl1 >= - 530606 - (- 530608) then
				t7 = .1
			else
				t7 = 898172 - 898172
			end
			local l1Il1 = - 758839 - (- 758840)
			if llI11[lI111(- 641524 + 675024)][- 539253 - (- 594098)] then
				l1Il1 = 1.3
			end
			local IlIl1 = - 3104 + 3110
			if llI11[lI111(- 468463 + 502456)][GetSpellInfo(746750 - 688885)] == - 708982 + 708983 then
				IlIl1 = - 833971 - (- 833978)
			end
			local llIl1 = ((((((((- 1004072 - (- 1004287)) + (lIl11 + sx) * .2) * l1Il1) * 1.06) * 1.04) * IlIl1) * l1l11) * Ill11) * ((1007871 + - 1007870) + t7)
			local II1l1 = ((((((((681249 - 681077) + (lIl11 + sx) * .2) * l1Il1) * 1.06) * 1.04) * IlIl1) * l1l11) * Ill11) * ((- 45664 - (- 45665)) + t7)
			local lI1l1 = ((((((((- 1040644 - (- 1040768)) + (lIl11 + sx) * .11) * l1Il1) * 1.06) * 1.04) * IlIl1) * l1l11) * Ill11) * ((167270 - 167269) + t7)
			local I11l1 = ((((((((- 820511 - (- 820601)) + (lIl11 + sx) * .01) * l1Il1) * 1.06) * 1.04) * IlIl1) * l1l11) * Ill11) * ((- 308393 - (- 308394)) + t7)
			local l11l1 = (((((((- 970304 - (- 970366)) * l1Il1) * 1.06) * 1.04) * IlIl1) * l1l11) * Ill11) * ((- 1008318 - (- 1008319)) + t7)
			llI11[lI111(- 492975 + 526754)](lI111(- 610163 + 643802) .. (lIl11 .. lI111(- 547953 + 581910)))
			llI11[lI111(38611 - 4832)](lI111(786104 + - 752840))
			llI11[lI111(- 114340 + 148119)](lI111(- 872380 - (- 905468)) .. (floor(llIl1) .. (lI111(- 971902 + 1005310) .. (floor(llIl1 / IlIl1) .. lI111(573362 + - 539425)))))
			llI11[lI111(918012 + - 884233)](lI111(- 32307 - (- 65826)) .. (floor(II1l1) .. (lI111(753334 - 719926) .. (floor(II1l1 / IlIl1) .. lI111(- 119460 + 153397)))))
			llI11[lI111(1072563 - 1038784)](lI111(1069929 - 1036864) .. (floor(lI1l1) .. (lI111(- 119844 + 153252) .. (floor(lI1l1 / IlIl1) .. lI111(991871 + - 957934)))))
			llI11[lI111(316316 - 282537)](lI111(62818 + - 29154) .. (floor(I11l1) .. (lI111(934717 + - 901309) .. (floor(I11l1 / IlIl1) .. lI111(152117 - 118180)))))
			llI11[lI111(- 237607 + 271386)](lI111(- 485954 - (- 519216)) .. (floor(l11l1) .. (lI111(345835 + - 311795) .. (floor(l11l1 / IlIl1) .. lI111(371436 + - 337499)))))
			llI11[lI111(139428 + - 105649)](lI111(- 779721 - (- 812985)))
			llI11[lI111(960254 + - 926475)](lI111(560177 + - 526284))
			local Il1l1 = {
				II1l1 * (- 707126 + 707128),
				llIl1 + II1l1;
				llIl1 * (761466 - 761464);
				llIl1 * (424431 - 424429) + l11l1;
				(llIl1 + II1l1) + I11l1;
				llIl1 * (242280 + - 242278) + I11l1;
				(llIl1 + II1l1) + lI1l1;
				(llIl1 + llIl1) + lI1l1,
				II1l1 * (- 1042304 + 1042307);
				llIl1 * (- 691509 + 691512)
			}
			local ll1l1 = {
				lI111(- 356906 - (- 390252));
				lI111(- 395564 + 429635),
				lI111(- 316906 + 350883),
				lI111(731656 - 697718),
				lI111(473779 - 440366);
				lI111(- 1014491 - (- 1047616));
				lI111(170277 + - 137264);
				lI111(338390 - 305385);
				lI111(- 779704 + 813208);
				lI111(- 516091 - (- 549553))
			}
			local IIll1 = - 780408 + 780408
			for II111 = 918845 - 918844, # Il1l1, - 620339 + 620340 do
				local I1111 = floor(Il1l1[II111])
				if I1111 > - 591218 + 609218 and I1111 < - 413349 - (- 434349) then
					IIll1 = IIll1 + (- 387371 - (- 387372))
					if ll1l1[II111] == lI111(- 564273 - (- 597619)) or ll1l1[II111] == lI111(339755 + - 305778) or ll1l1[II111] == lI111(- 751927 + 785431) or ll1l1[II111] == lI111(320863 - 287401) then
						llI11[lI111(829626 + - 795847)](lI111(303977 + - 270966) .. (IIll1 .. (lI111(- 808514 - (- 842106)) .. (ll1l1[II111] .. (lI111(587774 - 553713) .. (I1111 .. lI111(488495 + - 454520)))))))
					else
						llI11[lI111(- 746167 + 779946)](lI111(- 176741 + 209752) .. (IIll1 .. (lI111(- 798914 - (- 832506)) .. (ll1l1[II111] .. (lI111(- 708970 - (- 743031)) .. (I1111 .. lI111(187238 + - 153844)))))))
					end
				end
			end
			if IIll1 == - 702774 - (- 702774) then
				llI11[lI111(- 4206 - (- 37985))](lI111(- 62581 - (- 95651)))
			end
			llI11[lI111(- 606657 - (- 640436))](lI111(896813 - 863739))
			llI11[lI111(- 239271 + 273050)](lI111(- 911722 - (- 945725)))
			local lIll1 = {
				llIl1 * (- 298663 - (- 298665)) + lI1l1 * (480431 + - 480429);
				(llIl1 * (- 866171 + 866173) + II1l1) + lI1l1,
				llIl1 * (336234 + - 336231) + lI1l1;
				llIl1 + II1l1 * (841981 - 841978);
				llIl1 * (423789 + - 423787) + II1l1 * (412205 + - 412203),
				llIl1 * (- 754359 + 754362) + II1l1;
				llIl1 * (- 113504 - (- 113508))
			}
			ll1l1 = {
				lI111(180774 + - 147378),
				lI111(397072 - 363307);
				lI111(368624 - 334634);
				lI111(422057 - 388332),
				lI111(600258 - 566834),
				lI111(665589 + - 631695),
				lI111(507351 - 474351)
			}
			IIll1 = 747063 - 747063
			for II111 = - 623026 - (- 623027), # lIll1, - 455597 - (- 455598) do
				local I1111 = floor(lIll1[II111])
				if I1111 > 945116 - 909116 and I1111 < - 677045 + 717045 then
					IIll1 = IIll1 + (- 130019 - (- 130020))
					if ll1l1[II111] == lI111(321437 - 288041) or ll1l1[II111] == lI111(752051 - 718326) or ll1l1[II111] == lI111(79586 + - 46586) then
						llI11[lI111(- 92963 + 126742)](lI111(8096 + 24915) .. (IIll1 .. (lI111(883890 - 850298) .. (ll1l1[II111] .. (lI111(- 544869 - (- 578930)) .. (I1111 .. lI111(- 178406 + 212381)))))))
					else
						llI11[lI111(688359 - 654580)](lI111(738345 - 705334) .. (IIll1 .. (lI111(986422 - 952830) .. (ll1l1[II111] .. (lI111(1036032 + - 1001971) .. (I1111 .. lI111(- 609602 - (- 642996))))))))
					end
				end
			end
			if IIll1 == - 345387 + 345387 then
				llI11[lI111(- 1015423 + 1049202)](lI111(- 18605 - (- 52514)))
			end
		end
	end
	llI11()
end)(...)