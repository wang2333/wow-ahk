return (function(...)
    local I1II = {"\082\112\098\047\105\069\102\047\111\080\067\080\111\080\067\119\098\109\061\061",
                  "\120\098\101\089\083\098\108\100",
                  "\088\049\065\117\098\089\081\072\098\117\111\072\116\050\122\075\066\108\121\116\113\108\053\048\100\054\080\112\074\108\080\105\052\070\080\065\074\050\108\118\085\054\121\081\113\108\070\115\089\050\080\069\074\108\121\043\053\050\122\115\117\054\053\048\100\054\080\118\100\050\053\102\055\108\122\106\053\066\067\101",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\099\047\082\082\097\104\048\122\097\116\061",

                  "\120\120\054\054\120\100\087\048\120\106\117\083\120\106\117\101\120\086\117\086\120\052\117\086",
                  "\122\099\043\079\082\104\090\080\109\097\067\043\107\043\090\049\122\043\078\082\043\099\102\104\109\097\067\082\107\097\067\049",
                  "\105\049\090\112\098\077\051\061",
                  "\057\089\068\052\102\083\084\047\053\100\089\052\084\084\068\066\073\121\120\087\082\119\065\082\120\120\054\054\120\100\087\048\120\086\053\083\120\076\114\082\120\111\117\065\083\111\049\082\120\100\087\048\050\113\061\061",
                  "\083\086\083\082\120\111\108\083\120\100\053\102\120\076\101\057",
                  "\097\069\090\048\043\097\097\061",
                  "\120\121\080\047\120\055\101\073\120\084\122\100\120\084\080\079",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\122\056\043\104\097\099\055\043\107\099\071\104",
                  "\057\089\068\047\053\121\075\047\066\121\076\047\102\111\073\117\047\076\110\055\102\106\075\055\047\078\066\052\084\083\075\073\073\078\052\061",
                  "\097\119\107\079\043\104\043\082\077\070\117\111\074\054\080\070\052\108\122\115\117\050\080\104\053\081\061\061",
                  "\083\118\083\070\120\068\114\054\120\068\054\098\083\051\108\100\120\076\108\067\120\086\053\118\120\120\100\099\120\098\101\089\120\111\114\072\068\068\101\116\120\084\121\051\120\121\122\067\120\076\087\049\083\051\108\100\120\111\100\052\083\118\049\047\120\086\053\118\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\121\080\114\083\121\100\107\120\076\054\083\083\118\083\054\083\111\087\078\120\052\054\055\120\055\117\083\120\052\080\066\120\098\101\089\120\111\114\072\106\106\087\087",
                  "", "\120\111\053\083\083\121\100\052\065\050\080\057\085\072\061\061",
                  "\120\098\101\089\120\111\080\078\120\106\049\116\120\084\050\052",
                  "\120\120\054\054\120\100\087\048\120\084\118\068\120\120\121\077",
                  "\122\077\065\099\105\117\047\054\121\114\047\054\098\072\061\061",
                  "\120\084\114\105\120\098\101\072",
                  "\120\086\070\071\120\052\101\079\120\098\101\089\120\111\080\078\083\111\049\082\120\100\087\048",
                  "\088\049\065\117\098\069\098\049\065\056\109\072\109\108\117\111\073\070\080\118\100\054\080\112\085\050\121\086\053\108\080\104\053\112\067\101",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\047\055\111\066\066\089\118\106\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\120\086\053\068\120\111\100\052\120\076\101\081\120\052\087\100\116\113\061\061",

                  "\120\111\114\079\120\121\114\077\120\111\121\076\120\052\117\082\120\111\108\068",
                  "\121\049\043\102\076\049\043\101\086\050\121\110\100\108\121\051\069\113\061\061",
                  "\120\100\114\089\120\086\117\078\120\098\101\089\120\111\114\072",
                  "\083\111\087\078\120\052\054\055\083\118\121\079\120\111\053\112\120\111\053\083\083\121\100\052\120\120\100\099\120\068\101\080\120\111\070\112\106\106\087\087",
                  "\086\087\079\079\109\119\107\078\082\056\106\052\107\049\043\074\111\077\069\113\116\087\106\119\105\101\069\083",
                  "\083\098\053\101\120\052\100\069\077\070\080\047\053\108\108\116\084\113\061\061",
                  "\083\098\053\101\120\052\100\069\077\070\108\047\066\054\080\105\052\070\121\099\055\050\121\081\069\113\061\061",
                  "\120\084\053\104\120\084\122\079\120\055\101\073",
                  "\083\111\087\078\120\052\054\055\120\100\114\069\083\121\049\120\068\068\101\116\120\076\101\081\120\098\087\073\120\083\080\108\120\098\101\089\120\052\049\103\120\084\049\087\120\055\108\114\068\068\101\116\120\098\087\116\120\055\108\114\120\076\101\081\120\098\087\073\120\121\122\065\120\086\054\048\120\086\117\086\120\052\087\122\106\106\087\087\088\048\051\118\087\066\067\089\098\117\111\072\116\049\098\117\116\110\110\047\055\052\086\117\066\055\103\055\066\051\110\052\055\052\048\055\117\052\075\117\047\068\076\117\047\083\110\117\047\111\103\047\074\051\075\066\053\076\084\066\053\076\086\073\073\051\103\069\054\051\112\052\055\052\048\047\053\068\068\055\113\051\066\117\084\121\082\055\052\076\066\089\113\051\078\115\105\113\061\061",
                  "\120\111\121\076\083\121\117\074",
                  "\120\106\122\117\120\106\118\120\120\120\054\054\120\100\087\048\120\106\117\083\120\106\117\101\120\086\117\086\120\052\117\086",

                  "\105\114\043\056\071\049\047\054\098\072\061\061",
                  "\120\098\101\089\120\111\080\078\083\098\108\100\120\106\083\072", "\071\049\047\072",
                  "\043\099\090\110\083\098\053\075\120\111\100\100\120\076\108\056\120\052\054\078\120\111\080\086\120\052\053\111\120\055\121\077\120\111\114\043\120\121\080\114\083\121\100\107\120\111\053\112\116\070\122\106\100\054\080\071\055\054\080\104\053\070\070\115\089\050\108\068\117\108\122\106\054\119\082\055\113\098\057\117\052\051\088\073\073\051\103\047\066\118\113\101\120\086\053\100\120\111\117\073\043\050\122\120\053\070\117\077\085\050\053\048\100\054\080\118\100\050\080\051\102\070\121\065\052\054\121\101\054\070\108\080\047\070\070\115\089\050\053\073\085\070\121\103\100\050\121\099\089\070\053\054\100\108\080\076\052\054\117\043\073\070\108\068\117\108\121\075\113\050\121\056\054\070\070\115\113\108\050\081\113\113\052\118\088\049\065\117\098\069\098\049\107\089\097\114\050\108\121\103\100\050\121\099\089\070\070\115\117\054\053\073\085\070\053\054\073\054\108\090\084\054\080\047\073\108\117\079\069\070\121\113\102\070\108\068\117\108\122\106\054\119\107\079\082\069\073\073\073\051\103\069\073\078\084\052\102\083\084\047\053\100\089\047\073\051\110\047\055\106\073\117\074\084\073\066\047\055\088\047\089\083\076\047\055\078\076\069\054\118\082\069\054\118\084\047\053\121\090\097\068\068\101\116\083\118\070\112\120\111\100\102\120\076\070\104\083\118\083\070\120\068\114\054\120\098\054\053\083\098\053\088\083\051\049\116\120\086\053\121\068\068\101\051\043\099\104\050\122\070\070\115\053\122\120\115\105\113\061\061",
                  "\120\100\114\089\120\086\117\078\083\098\053\101\120\076\083\102",
                  "\083\051\108\100\120\111\100\052\120\068\054\098\083\051\049\116\120\086\053\121\120\083\080\071\120\083\121\057",
                  "\087\053\090\089\111\077\065\056\051\050\108\047\066\054\121\079\100\108\121\105\084\072\052\073\111\114\104\103\071\087\110\066\055\098\068\047\069\118\115\118\086\112\043\103\098\122\081\067\116\081\052\073\071\077\065\047\051\110\099\103\087\053\090\119\105\114\097\113\116\082\109\118",
                  "\071\077\043\102\071\097\065\073\105\043\098\079\107\104\047\114",
                  "\120\121\070\120\120\106\122\117\120\106\118\120\120\120\054\054\120\100\087\048\120\055\121\090\120\055\122\070\120\055\108\113\120\055\080\116\068\068\101\051\120\052\053\080\083\051\087\104\120\098\101\089\120\086\114\107\068\068\101\078\120\106\117\083\120\106\117\101",
                  "\121\077\065\097\121\077\107\074\098\109\061\061", "\120\084\050\043\120\076\053\051",
                  "\088\049\065\117\098\069\098\049\107\089\097\114\050\108\080\104\053\050\117\055\074\077\067\101",
                  "\122\049\104\103\109\080\065\056\121\080\090\054\122\114\043\120",
                  "\083\111\087\078\120\052\054\055\120\098\101\089\120\111\114\072",
                  "\083\051\108\100\120\120\122\067\120\086\117\086\120\052\117\086",
                  "\083\051\108\100\120\052\053\107\120\111\114\067\120\055\101\083\120\121\122\099\120\120\087\049\068\068\101\121\120\098\101\089\120\120\121\077\120\055\101\073",
                  "\120\121\080\114\083\121\100\107\077\070\117\055\074\108\117\087\100\054\121\105\084\072\061\061",
                  "\097\119\107\079\043\104\043\082\077\070\121\101\054\070\108\080\047\070\121\052\052\108\080\115\089\072\061\061",
                  "\121\049\043\102\076\104\107\120\105\049\097\061",

                  "\071\080\120\055\071\081\061\061", "\120\052\122\069\083\098\122\069",
                  "\097\119\107\079\043\104\043\082\077\070\053\048\100\054\080\118\100\050\053\102\113\050\053\087\053\109\061\061",
                  "\105\114\090\119\105\117\065\047\107\119\043\078\107\081\061\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\069\047\122\097\119\107\097\109\097\120\086",
                  "\086\114\065\102\105\112\109\113\080\112\107\102\105\117\071\047\071\110\119\117\076\114\065\119\105\101\067\047\108\049\047\103\071\048\116\074\076\117\090\069\098\080\104\069\086\049\102\047\076\048\079\071\051\050\108\078\054\054\108\078\074\054\122\120\053\070\121\078\053\072\052\061",
                  "\107\114\043\056\109\114\090\054\098\117\047\066",
                  "\088\049\065\117\098\069\098\049\065\056\109\072\109\108\053\048\100\054\080\118\100\050\121\101\054\070\108\080\047\070\053\102\113\050\053\087\053\108\121\051\069\050\108\079\074\048\067\101",
                  "\057\089\068\047\085\068\086\066\055\052\048\117\084\121\086\052\102\083\084\047\053\100\089\047\053\051\088\117\089\121\078\087\082\119\065\082\120\120\054\054\120\100\087\048\120\086\053\083\083\111\049\082\120\100\087\048",
                  "\120\106\117\083\120\106\117\101\120\086\117\086\120\052\117\086",
                  "\083\051\108\100\120\111\100\052\083\111\049\082\120\100\087\048",
                  "\122\049\104\103\097\112\107\073\105\099\119\073\071\117\043\086\098\077\069\061",
                  "\107\114\043\056\043\080\120\055\071\099\065\073\076\080\047\054\098\056\102\109",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\047\089\111\048\047\084\098\088\047\102\055\073\117\053\098\057\047\102\068\074\061",
                  "\120\083\080\108\120\098\101\089\120\076\117\101\120\084\121\078",
                  "\083\051\080\109\083\078\100\081\120\098\101\089\120\111\114\072",
                  "\120\098\101\089\120\084\122\079\120\052\100\069\120\120\054\070\083\098\053\088\120\111\070\086\083\111\087\078\120\052\054\055",
                  "\120\111\070\080\120\084\121\051\120\106\117\083\120\106\117\101",
                  "\120\121\080\114\083\121\100\107\077\070\108\047\066\054\080\105\052\070\117\105\102\070\080\048\054\072\061\061",

                  "\083\051\108\100\120\111\100\052\083\118\049\047\083\076\114\109\120\120\054\054\120\100\087\048\068\068\101\051\120\055\080\116\120\121\070\120\068\068\101\078\120\121\083\102\120\111\053\069\120\055\080\051\120\055\083\105\120\086\053\118\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\121\080\114\083\121\100\107\120\076\054\083\083\118\083\054\083\111\087\078\120\052\054\055\120\098\101\089\120\111\080\078\120\121\083\102\120\111\053\069\068\068\101\116\120\052\117\081\120\055\101\078\083\051\049\116\120\086\053\121\120\111\101\104\120\052\054\074\120\084\050\043\120\068\050\068\083\051\049\116\120\086\053\121\120\055\122\068\120\111\108\068\083\111\050\090\120\086\101\121\120\098\054\108\083\118\049\081\068\068\101\116\120\098\054\108\083\118\049\081\083\111\108\057\120\086\117\088\083\118\083\102\120\111\080\047\120\084\118\068\120\120\121\077\083\111\108\057\106\106\087\087\088\048\051\061",
                  "\083\051\108\100\120\052\053\107\083\121\117\067\120\055\080\089",
                  "\120\098\101\089\120\120\054\070",
                  "\097\112\107\073\105\099\104\089\071\049\047\073\076\113\061\061",
                  "\083\086\121\104\120\076\100\117\083\111\118\100\120\052\049\114",
                  "\121\049\104\103\107\049\047\103\098\080\104\103\098\109\061\061",
                  "\098\080\107\055\071\049\078\073\108\081\061\061",
                  "\088\049\065\117\098\089\081\072\098\117\111\072\116\050\053\070\102\108\080\118\100\108\080\118\066\070\053\110\073\108\053\054\073\054\108\090\084\066\067\101",
                  "\097\104\078\078\107\043\065\097",
                  "\120\068\100\073\120\084\122\079\120\121\083\102\120\111\053\069",
                  "\120\111\114\079\120\121\114\077",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\066\055\098\068\047\066\118\057\117\102\118\082\117\113\078\051\061",
                  "\116\113\061\061", "\120\052\054\073\120\055\080\107\120\086\117\086\120\052\117\086",
                  "\097\069\043\082\109\119\043\122\122\043\107\088\122\056\043\098",
                  "\097\119\107\079\043\104\043\082\077\070\121\078\069\070\121\080\084\108\122\106\053\070\080\105\074\081\061\061",
                  "\109\043\107\097\109\097\065\086\077\070\080\047\085\054\117\100\069\043\075\066\055\098\068\047\066\118\057\055\066\051\088\047\102\068\074\061",
                  "\083\051\108\100\120\111\100\052\120\052\117\082\120\055\121\085\120\086\053\085\083\078\117\084\120\086\053\086\120\098\101\072\106\106\087\109\120\084\114\105\120\098\101\072\106\106\087\107\120\052\100\081\083\051\050\090",
                  "\083\051\108\100\120\111\100\052\120\086\114\075\120\120\122\052\120\083\080\108\120\052\049\055\120\055\101\073\086\070\108\047\066\054\080\109\084\070\070\115\089\050\080\073\054\108\122\083\089\054\121\105\053\108\122\083\117\070\121\078\113\050\053\072\069\070\117\084\117\050\108\050\100\108\121\071\055\108\053\073\085\050\053\117\113\108\121\067\113\054\053\048\100\054\080\112\074\108\108\097\100\050\053\075\117\108\122\106\055\050\121\118\113\050\053\110\073\108\070\115\089\050\053\073\085\070\122\106\089\108\053\117\113\108\080\086\073\054\117\081\053\108\070\115\089\050\053\048\100\054\053\102\089\050\080\115\113\050\080\109\084\070\070\115\113\109\061\061",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\047\055\111\066\066\089\118\106\061",
                  "\120\121\080\114\083\121\100\107\077\070\080\047\053\108\108\116\084\113\061\061",

                  "\083\121\117\067\120\055\080\089\083\051\108\100\120\076\108\067",
                  "\088\049\065\117\098\069\098\049\065\056\109\072\109\108\080\090\069\070\080\078\089\108\121\101\052\108\121\105\053\108\117\081\053\108\121\086\100\108\108\076\084\054\121\113\102\070\070\115\089\050\053\048\100\054\080\118\100\050\053\054\073\054\108\090\084\069\078\057\097\119\057\066\117\083\068\117\052\051\088\117\074\084\073\066\047\055\088\073\073\051\104\115\105\113\061\061",
                  "\122\077\065\065\076\112\098\055\076\117\105\061",
                  "\088\049\065\117\098\069\098\049\107\089\097\114\050\108\080\073\054\070\121\081\100\066\067\101",
                  "\083\098\053\101\120\052\100\069\077\070\121\085\052\070\122\120\053\108\108\076\073\054\080\048\054\072\061\061",
                  "\043\049\115\103\097\103\043\065", "\097\056\102\079\082\097\104\050",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\122\056\043\104\097\099\055\043\107\099\071\104\109\047\043\097\043\099\090\050",
                  "\097\114\102\073\071\056\047\056\098\080\056\061",
                  "\083\118\083\070\120\068\114\054\120\098\101\089\120\084\122\079\120\052\100\069\120\120\054\070\120\120\054\054\120\100\087\048\068\068\101\121",

                  "\083\098\053\101\120\076\083\102\120\086\101\111\120\111\080\051",
                  "\088\104\109\067\116\103\097\120\065\082\069\083\116\082\109\083\116\082\107\115\071\081\061\061",
                  "\065\109\061\061", "\083\121\117\067\120\055\080\089\120\120\121\070\120\120\108\104",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\099\047\082\097\099\104\116\043\099\104\050\122\072\061\061",
                  "\120\121\083\102\120\111\053\069\083\111\087\078\120\052\054\055",
                  "\107\114\043\056\097\117\104\054\098\114\097\061",
                  "\097\119\107\079\043\104\043\082\077\119\079\065\109\097\071\104",
                  "\111\077\107\056\111\080\065\084",
                  "\083\098\053\101\120\052\100\069\077\070\121\099\055\050\121\081\069\054\122\120\053\070\117\097\055\081\061\061",

                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\122\099\090\116\080\043\107\051\107\043\078\079\097\104\047\082\107\097\067\049",
                  "\120\111\053\083\083\121\100\052\120\098\101\089\120\111\080\078\083\098\108\100\120\106\083\072",
                  "\120\068\100\073\120\111\108\081\120\055\101\073",
                  "\109\114\102\055\098\112\043\082\105\049\043\074\076\048\116\061",
                  "\120\052\050\055\120\052\053\122\077\070\080\047\053\108\108\116\084\113\061\061",
                  "\051\112\065\052\076\112\071\056\076\114\090\074\071\049\047\072\105\101\110\066\053\076\084\066\053\076\086\069\054\111\073\117\053\111\074\118\086\112\065\056\076\112\079\089\111\077\065\056\121\080\120\066\087\053\090\089\111\077\065\056\116\053\110\047\066\118\057\066\117\068\068\117\066\118\115\073\120\106\122\117\120\106\118\120\120\106\117\083\120\106\117\101\087\113\061\061",
                  "\120\100\114\089\083\098\122\069",
                  "\088\049\065\117\098\117\111\072\116\110\081\072\116\050\122\106\054\070\080\118\100\050\080\115\113\050\121\081\100\066\067\101",
                  "\111\066\043\056\071\049\090\054",
                  "\122\099\043\079\082\104\090\049\122\043\078\082\043\104\107\079\082\069\085\088\043\069\104\116\043\097\097\061",
                  "\122\104\043\050\043\099\043\122", "\121\049\043\055\098\114\102\056",
                  "\120\121\080\078\120\106\101\054",
                  "\098\049\043\053\071\080\098\117\082\117\104\085\098\109\061\061",
                  "\097\119\107\079\043\104\043\082\077\070\053\048\100\054\080\118\100\050\121\086\073\054\080\057\047\089\051\061",
                  "\120\100\114\068\083\121\100\107",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\099\047\082\097\056\047\110\122\072\061\061",
                  "\107\049\047\103\105\049\043\074\107\049\047\103\098\080\104\103\098\097\085\047\108\109\061\061",
                  "\082\056\120\116\080\097\102\104\109\097\067\097\109\043\078\048\107\043\109\061",
                  "\097\069\104\078\107\081\061\061",
                  "\120\098\101\089\120\111\080\078\120\121\083\102\120\111\053\069",
                  "\120\068\070\104\083\051\121\081",
                  "\088\049\065\117\098\089\081\072\098\117\111\072\116\050\117\111\074\054\121\118\055\048\067\101",
                  "\120\111\053\114\083\118\050\079\120\086\117\086\083\098\122\069",
                  "\120\076\101\083\120\055\080\051\120\055\117\083\120\052\080\066\120\083\080\071\120\083\121\057",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\120\120\054\054\120\100\087\048\120\121\083\102\120\111\053\069",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\099\047\082\097\099\104\116\107\119\078\057\043\043\081\061",
                  "\082\112\098\047\105\069\102\047\111\080\067\097\108\077\079\047",
                  "\120\084\118\068\120\120\121\077\120\100\053\102\120\076\101\057",
                  "\120\052\050\055\120\052\053\122\077\070\108\047\066\054\080\105\052\070\117\089\089\054\121\121\085\081\061\061",
                  "\120\106\122\117\120\106\118\120\120\086\053\083\083\051\108\100\120\076\108\067\068\068\101\116\120\086\053\065\083\051\050\090\120\068\054\098\083\051\108\100\120\076\108\067\120\106\117\083\120\106\117\101\120\086\117\086\120\052\117\086\068\068\101\079",
                  "\120\083\080\108\120\098\101\089\120\052\122\069\120\052\087\122",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\122\104\043\099\043\097\120\043\082\069\047\097",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\055\100\076\048\055\113\100\084\117\066\118\115\061",
                  "\120\100\114\089\120\086\117\078",
                  "\109\114\067\102\105\112\065\110\076\114\120\117\121\080\105\061",
                  "\109\077\107\056\111\080\065\084\097\117\104\054\098\114\097\061",
                  "\120\098\101\089\083\098\108\100\083\051\108\100\120\120\121\077",
                  "\120\076\114\082\083\051\108\100\120\076\108\067\083\118\049\081\083\111\108\057\120\086\114\050\120\086\100\050\083\118\083\070\120\121\083\121\120\111\087\115\068\068\101\116\083\051\108\100\120\111\100\052\083\051\108\100\120\052\053\107\120\086\070\071\120\052\100\069\120\083\080\071\120\083\121\057\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\111\070\100\120\055\101\078\120\098\101\052\120\055\108\113\120\055\080\116\109\056\082\069\054\118\112\073\073\051\103\117\053\111\112\052\055\083\076\047\089\120\048\117\084\121\082\055\113\051\066\055\052\076\047\115\105\113\061\061",
                  "\122\099\043\079\082\104\090\065\082\056\107\104\097\072\061\061",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\066\055\098\068\047\066\118\057\055\052\106\068\117\117\084\109\061",
                  "\111\077\043\101\111\043\078\097",
                  "\097\119\079\104\082\099\067\088\109\043\043\122\109\043\090\079\097\104\079\116\122\097\043\099",
                  "\120\121\080\114\083\121\100\107\077\070\108\047\066\054\080\105\052\070\121\099\055\050\121\081\069\113\061\061",
                  "\043\099\104\050\122\056\078\043\107\069\098\050\109\097\119\104", "\065\081\061\061",
                  "\120\076\114\082\083\051\108\100\120\076\108\067\083\118\049\081\083\111\108\057\120\086\114\050\120\086\100\050\083\118\083\070\120\121\083\121\120\111\087\115\068\068\101\116\083\051\108\100\120\111\100\052\083\051\108\100\120\052\053\107\120\055\108\113\120\055\080\116\068\068\101\116\120\068\101\083\120\120\101\079\083\118\083\070\120\068\114\054\116\103\097\047\068\068\101\051\116\087\106\103\065\108\070\115\053\109\061\061",
                  "\097\114\043\056\071\049\047\054\098\056\047\056\098\080\119\103",
                  "\097\119\107\079\043\104\043\082\077\070\080\051\054\054\117\100\100\110\116\061",
                  "\122\104\043\099\043\097\120\116\122\043\065\097", "\083\078\087\052\120\084\054\102",
                  "\109\077\043\056\076\119\065\056\111\077\107\119\105\072\061\061",
                  "\109\097\089\047\102\111\066\066\089\100\075\117\089\052\103\117\089\083\099\061",
                  "\097\119\107\079\043\104\043\082\077\070\080\051\054\054\117\100\100\110\097\061",
                  "\086\087\079\079\109\119\107\078\082\056\106\052\107\049\043\074\111\077\069\113\116\077\116\055\050\113\061\061",
                  "\082\069\104\065\107\043\079\116\109\043\107\104\097\119\090\082\122\099\090\077\107\097\120\104\082\097\047\104\097\072\061\061",
                  "\083\121\050\050\120\055\100\056",
                  "\097\119\107\079\043\104\043\082\077\070\117\111\073\070\080\118\100\054\080\065\047\108\080\047\085\113\061\061",
                  "\120\098\049\090\120\086\054\069\120\098\101\089\120\111\114\072",
                  "\122\049\104\103\080\043\047\099\098\080\078\119\098\117\111\061",
                  "\098\117\104\103\071\104\065\072\098\080\067\074",
                  "\120\121\121\087\120\055\083\105\120\052\050\055\120\052\053\122\083\121\100\107\120\052\070\122\120\086\100\049\120\084\053\104\120\083\083\077\083\098\054\043\120\055\121\048\086\050\080\065\052\097\065\099\120\086\114\075\120\120\122\052\120\100\114\069\120\052\117\082\120\086\101\069\120\121\083\103\106\106\087\087\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\111\070\100\120\055\101\078\120\098\101\052\120\086\053\068\120\111\100\052\120\055\122\068\120\111\108\068\083\111\087\078\120\052\054\055\120\098\087\050\120\052\117\065\120\086\101\121\120\120\122\088\120\055\080\051\106\106\087\087\088\048\051\061",
                  "\120\098\054\053\083\098\053\088\083\111\087\121\120\098\049\118",
                  "\120\120\083\074\120\111\070\107\120\098\101\089\083\098\108\100\120\084\118\068\120\120\121\077\083\051\108\100\120\076\108\067",
                  "\120\086\070\071\120\052\101\079\120\098\101\089\120\084\122\079\120\052\100\069\120\120\054\070",
                  "\097\119\107\079\043\104\043\082\077\070\053\048\100\054\080\118\100\050\080\051\054\054\117\100\100\081\061\061",
                  "\120\084\118\068\120\120\121\077",
                  "\120\084\053\104\120\083\083\077\120\086\117\086\120\052\117\086",
                  "\111\114\102\047\111\114\085\053\076\112\113\061", "\071\048\047\072\098\109\061\061",
                  "\120\055\080\107\083\086\080\050",
                  "\122\099\043\079\082\104\090\079\109\119\107\078\082\056\120\088\122\056\043\098\097\072\061\061",
                  "\088\049\065\117\098\089\081\072\098\117\111\072\116\050\108\076\084\054\121\113\102\070\121\101\054\070\108\080\047\112\067\101",
                  "\098\077\098\047\076\066\109\061", "\120\098\101\089\120\111\114\072",
                  "\082\069\090\050\107\109\061\061",
                  "\120\086\070\071\120\052\100\069\120\086\117\086\120\052\117\086",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\117\084\121\057\069\054\111\066\069\054\111\073\055\047\118\109\061",
                  "\109\043\107\097\109\097\065\086\077\070\080\047\085\054\117\100\069\043\075\047\055\111\066\066\089\118\106\061",
                  "\120\121\083\102\120\111\053\069",
                  "\097\119\107\079\043\104\043\082\077\070\080\051\054\054\117\100\100\050\117\077\100\054\108\050\074\081\061\061",
                  "\120\086\101\111\120\111\080\051\120\086\070\071\120\052\101\079\083\098\053\101\120\076\083\102\120\052\100\081\083\051\050\090\068\068\101\051\120\083\080\108\120\098\101\089\120\086\117\086\120\120\054\070\086\070\080\105\052\070\121\056\113\108\121\118\055\050\108\076\073\054\070\115\053\108\108\121\102\050\053\117\102\054\108\076\047\054\108\050\102\070\070\115\089\050\053\070\069\070\080\048\054\054\122\068\102\070\121\079\100\050\122\115\117\050\080\104\053\050\122\106\089\108\080\086\073\054\117\081\053\108\050\081\113\054\080\117\113\054\121\108\066\050\053\117\113\108\080\065\047\108\080\051\085\070\070\115\089\050\080\057\084\070\080\086\073\054\117\081\053\108\121\085\055\050\117\081\053\108\117\102\054\108\070\115\089\050\080\072\102\054\122\115\117\050\080\104\053\050\122\075\066\108\121\116\113\108\108\076\073\054\121\116\052\108\121\118\113\050\053\110\073\108\050\081\113\113\061\061",
                  "\120\083\080\071\120\083\121\057",
                  "\120\086\070\071\120\052\101\079\120\098\101\089\120\111\114\072",
                  "\083\121\050\108\120\120\054\070",
                  "\076\110\043\120\065\112\102\077\043\048\079\052\122\082\098\053",
                  "\107\114\067\120\105\049\102\103",
                  "\097\119\107\079\043\104\043\082\077\119\079\082\122\099\104\065\109\097\106\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\109\097\090\104",
                  "\121\049\104\103\082\080\104\066\121\080\116\061",
                  "\057\089\068\047\085\068\086\066\054\106\075\047\089\120\076\117\085\052\089\066\055\098\068\047\066\118\057\066\053\076\084\066\053\076\086\047\074\051\075\055\117\078\075\069\073\118\082\047\084\084\057\047\053\051\076\117\053\106\077\073\073\051\099\061",
                  "\097\117\043\103\121\077\055\047\097\049\104\054\098\080\072\061",

                  "\097\114\043\056\097\112\107\073\105\099\104\089\071\049\047\073\076\113\061\061",
                  "\088\104\109\067\116\103\097\120\065\089\081\083\116\082\109\083\116\082\107\115\071\081\061\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\097\104\078\057\043\099\043\110\043\081\061\061",

                  "\109\043\107\097\109\097\065\086\077\056\090\097\122\099\043\122\077\119\065\104\043\104\107\078\082\069\105\061",
                  "\088\049\065\117\098\069\098\049\107\089\097\114\050\108\080\112\074\054\053\054\073\054\108\090\084\054\122\106\054\054\050\081\069\050\121\110\100\108\121\051\069\054\050\081\069\108\053\070\069\070\080\048\054\054\121\052\052\108\080\115\089\070\050\081\113\066\067\101",
                  "\120\111\114\079\120\121\114\077\120\111\121\076\120\111\080\078\120\106\083\073",
                  "\083\051\108\100\120\111\100\052\120\098\101\089\120\120\121\077",

                  "\122\049\047\069\098\097\047\056\098\080\056\061",
                  "\122\056\043\104\097\104\065\104\109\097\067\088\043\099\047\097\082\099\097\061",
                  "\122\049\043\102\076\104\107\047\111\080\056\061", "\120\055\108\113",
                  "\120\083\080\108\120\098\101\089\083\098\101\048\120\111\108\068\120\055\100\056\120\111\108\068",
                  "\071\049\090\073\076\048\107\055\105\104\107\047\108\048\109\061",
                  "\098\112\078\073\071\077\079\050\076\072\061\061", "\050\113\061\061",

                  "\083\121\117\067\120\055\080\089\120\098\114\117\120\111\080\086",
                  "\083\051\108\100\120\052\053\107\120\111\114\067\120\055\101\083\120\121\122\099\120\120\087\049\068\068\101\121\120\120\083\074\120\111\070\107\120\098\101\089\120\111\080\078\083\098\108\100\120\106\083\072",
                  "\120\120\054\070\120\111\108\068",
                  "\071\049\090\073\076\048\107\055\105\104\107\055\071\049\067\047",
                  "\097\119\107\079\043\104\043\082\077\119\079\109\109\097\067\079\107\099\047\050",
                  "\111\114\090\085\121\114\043\120",
                  "\120\052\050\055\120\052\053\122\077\070\080\069\089\108\122\068\102\070\122\120\053\070\121\081\069\113\061\061",

                  "\082\056\120\116\080\097\102\104\109\097\067\097\109\043\078\048\107\043\107\088\109\097\067\077\109\043\047\082\122\099\043\079\082\081\061\061",
                  "\097\119\107\079\043\104\043\082\077\070\080\051\054\054\117\100\100\110\109\061",
                  "\107\049\043\053\071\080\071\097\098\077\102\056",
                  "\120\111\080\078\120\055\053\050\120\098\101\089\120\111\114\072",
                  "\120\111\053\083\083\121\100\052\116\108\080\057\085\072\061\061",
                  "\120\083\080\108\120\098\101\089\083\121\050\050\120\055\100\056",
                  "\088\049\065\117\098\089\081\072\098\117\111\072\116\050\080\078\084\070\121\105\084\050\108\078\054\108\121\054\053\054\080\118\066\070\053\110\073\077\067\101",
                  "\071\049\104\101\098\114\043\056\071\049\104\101\098\114\043\056",
                  "\120\121\121\087\120\055\083\105\109\069\090\082\097\070\121\051\117\050\080\115\113\050\080\066\053\070\080\109\089\053\072\113\083\051\108\100\120\111\100\052\120\111\053\048\120\052\114\053\120\076\114\082\120\111\117\065\109\069\090\082\097\070\108\076\084\054\121\113\102\070\080\071\055\054\080\104\053\070\122\106\054\054\117\079\069\070\121\113\102\070\108\076\084\054\121\113\102\070\050\081\113\113\052\118\088\049\065\117\098\089\081\072\098\117\111\072\116\050\121\085\055\050\080\118\066\070\053\110\073\108\080\057\084\070\122\068\055\108\053\118\113\054\108\105\113\108\080\051\102\070\121\065\052\054\117\079\069\070\121\113\102\070\121\077\085\054\117\077\085\087\072\113\120\100\070\097\120\121\121\087\120\121\080\047\120\055\114\105\120\076\087\097\083\118\108\087\120\055\053\088\120\052\053\111\120\086\053\085\086\087\110\047\055\106\073\066\054\106\089\069\073\120\112\117\089\051\104\087\082\119\065\082\120\076\114\082\120\111\117\065\120\098\114\117\120\111\080\086\120\120\100\099\083\111\049\082\120\100\087\048\106\106\087\087\088\048\051\061",

                  "\111\114\067\102\105\112\116\061",
                  "\122\099\043\079\082\104\090\080\109\097\067\043\107\043\090\082\122\099\047\104\082\099\107\082\107\097\067\049",
                  "\083\111\049\082\120\100\087\048",
                  "\109\056\104\050\077\056\107\078\097\119\079\104\082\081\061\061",
                  "\121\049\047\056\097\117\043\089\071\081\061\061",
                  "\109\097\089\066\055\098\068\047\066\118\057\066\053\076\084\066\053\076\051\061",
                  "\097\119\079\104\082\099\067\088\109\056\104\082\043\104\090\082\043\099\104\122\043\081\061\061",
                  "\120\086\070\071\120\052\101\079\120\120\054\054\120\100\087\048\051\099\055\119\098\049\071\047",
                  "\120\083\080\108\120\098\101\089\120\052\049\103\120\084\049\087\120\098\054\108\083\078\050\071",
                  "\097\114\043\056\109\114\090\054\098\117\047\066",
                  "\120\076\101\083\120\055\080\051\120\111\100\076\083\111\108\057\120\083\080\071\120\083\121\057",
                  "\120\098\101\089\120\111\080\078", "\107\049\043\053\071\080\105\061",
                  "\088\049\065\117\098\089\081\072\098\117\111\072\116\050\121\101\054\070\108\080\047\112\067\101",
                  "\080\048\043\047\097\117\090\119\097\112\079\047\076\049\067\103", "\078\109\061\061",
                  "\111\112\078\047\111\077\107\047",
                  "\088\049\065\117\098\069\098\049\065\056\109\072\109\082\106\070\083\086\070\076\120\111\080\047\083\098\053\075\120\111\100\100\120\076\108\056\120\052\054\078\120\111\080\086\120\052\053\111\120\055\121\077\068\068\101\116\120\076\108\101\120\086\101\111\120\111\101\080\120\055\101\074\120\098\101\083\120\052\053\111\120\055\121\077\120\084\118\068\120\120\121\077\083\118\083\070\120\068\114\054\106\106\087\087\088\048\051\061",
                  "\120\098\101\052\120\055\122\068\120\111\108\068\083\051\101\110\120\098\054\056\120\111\121\104\120\121\070\120\120\055\080\116\120\086\100\083\120\086\114\075\120\120\122\052\120\083\080\108\120\098\101\089\083\098\101\048\120\111\108\068\106\106\087\087\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\111\070\100\120\055\101\078\120\098\101\052\120\086\053\068\120\111\100\052\120\055\122\068\120\111\108\068\083\111\087\078\120\052\054\055\120\098\087\050\120\052\117\065\120\086\101\121\120\120\122\088\120\055\080\051\106\106\087\087\088\048\051\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\069\047\122\097\119\107\099\122\043\065\109\109\097\072\061",
                  "\097\119\107\079\043\104\043\082\077\119\079\099\107\097\104\097\122\099\085\050\122\097\071\051\043\081\061\061",
                  "\120\052\053\111\083\121\117\074",
                  "\097\119\107\079\043\104\043\082\077\070\122\106\054\070\080\118\100\050\121\097\054\070\080\048\054\072\061\061",
                  "\120\098\101\089\120\111\114\072\083\111\087\078\120\052\054\055",
                  "\097\099\104\122\043\104\069\061",
                  "\043\080\120\055\071\099\102\102\105\056\107\047\111\066\043\117\098\066\116\061",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\117\084\121\057\069\054\111\066\069\054\111\073\117\113\078\051\061",
                  "\083\051\108\100\120\052\053\107\120\111\114\067\120\055\101\083\120\121\122\099\120\120\087\049\068\068\101\121\120\086\070\071\120\052\100\069\120\086\117\086\120\052\117\086",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\066\055\098\068\047\066\118\057\117\113\076\057\117\074\111\051\061",
                  "\120\083\080\108\120\098\101\089\083\098\101\048\120\111\108\068",
                  "\107\114\043\056\082\080\090\114\098\097\102\047\111\080\067\055\076\117\071\079\111\112\107\055\076\114\106\061",
                  "\083\051\108\100\120\111\100\052\120\068\083\069\120\098\053\101",
                  "\057\089\120\115\111\114\098\117\107\069\111\072\116\110\081\072\083\118\070\112\083\051\108\100\083\118\049\116\083\118\083\070\120\068\114\054\083\111\049\082\120\100\087\048\120\120\054\054\120\100\087\048\068\068\101\116\120\083\101\074\120\086\053\078\083\098\053\114\120\100\083\119\083\111\087\078\120\086\053\085\043\099\104\050\122\070\121\051\047\054\053\081\102\108\080\078\084\070\080\071\055\054\080\104\053\070\122\106\054\054\108\076\084\054\121\113\102\070\053\075\117\070\053\102\089\050\121\101\054\070\108\080\047\070\070\115\113\109\061\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\099\104\057\109\069\047\079\082\072\061\061",
                  "\071\049\043\106\071\081\061\061",
                  "\109\097\089\066\102\118\076\066\113\084\066\066\053\076\084\066\053\076\051\061",
                  "\088\049\065\117\098\069\098\049\107\089\097\114\050\108\080\112\074\054\053\054\073\054\108\090\084\054\122\106\054\054\050\081\069\050\117\111\074\054\121\118\055\050\050\081\069\108\080\071\055\054\080\104\053\070\121\052\052\108\080\115\089\070\050\081\113\066\067\101",
                  "\083\121\117\067\083\111\118\100\120\055\101\073",

                  "\043\048\078\120\043\077\065\047\109\080\065\056\121\080\090\054",
                  "\097\119\107\079\043\104\043\082\077\070\080\065\089\070\080\118\100\108\080\071\055\054\080\104\053\072\061\061",
                  "\120\111\080\114\120\086\054\080\120\052\100\081\083\051\050\090\111\114\082\117\047\068\076\073\073\051\103\069\073\076\075\066\047\118\089\055\100\076\048\055\113\100\084\117\066\118\075\117\047\086\073\047\102\068\073\117\047\111\103\069\054\084\084\089\113\051\051\118\087\066\067\089\098\117\111\072\116\049\098\117\116\110\110\047\089\083\084\117\066\051\066\047\066\118\089\069\054\086\073\047\053\100\089\117\047\086\073\047\102\068\073\055\113\051\066\117\053\083\066\047\069\051\068\117\053\111\112\069\073\078\084\066\047\078\075\117\047\111\089\089\113\051\078\115\105\113\061\061",
                  "\121\049\047\069\098\109\061\061", "\105\049\043\101\111\114\043\054\071\081\061\061",
                  "\082\049\090\073\105\099\104\089\071\049\047\073\076\069\085\047\108\077\116\061",
                  "\120\084\053\104\083\098\117\069\120\098\101\089\120\084\122\079\120\052\100\069\120\120\054\070\120\120\054\054\120\100\087\048\106\106\087\087",
                  "\107\049\047\103\105\049\043\074\082\080\104\066\121\080\065\086\098\077\069\061",
                  "\111\117\043\117\076\112\078\047\082\080\104\089\105\117\115\061",
                  "\043\049\104\085\105\049\043\101\051\099\107\047\071\049\043\089\071\049\043\069\051\109\061\061",
                  "\122\049\090\056\043\049\043\102\076\109\061\061",
                  "\120\084\053\104\083\098\117\069\120\098\101\089\120\111\080\078\083\111\049\082\120\100\087\048\120\120\054\054\120\100\087\048\106\106\087\087",
                  "\120\083\080\108\120\098\101\089\120\052\049\103\120\084\049\087\116\113\061\061",
                  "\068\068\101\116\120\111\049\105\120\100\114\053\120\111\100\052\120\086\114\105",
                  "\120\100\114\089\120\086\117\078\120\120\054\070\120\111\108\068",
                  "\105\117\090\074\098\109\061\061",
                  "\043\080\120\055\071\099\102\102\105\056\107\047\111\066\043\117\098\113\061\061",
                  "\097\119\107\079\082\069\107\088\122\099\043\079\082\104\090\082\097\099\043\116\082\104\116\061",
                  "\097\114\102\073\071\056\047\056\098\080\119\103",
                  "\120\111\080\078\120\106\083\073\120\052\083\116\120\052\070\102",
                  "\122\049\047\069\098\097\047\056\098\080\119\103",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\047\066\118\057\117\085\051\048\117\053\100\082\066\117\068\106\061",
                  "\120\120\054\077\083\086\122\115",
                  "\109\077\107\056\111\080\065\084\043\048\047\072\098\109\061\061",
                  "\120\076\100\048\120\052\100\069\120\083\080\071\120\083\121\057",
                  "\121\080\120\103\098\077\078\056",
                  "\120\111\080\052\120\083\053\086\120\086\114\075\120\120\122\052\120\121\122\066\120\098\101\089\120\111\080\078\083\086\070\076\083\118\049\116\120\084\118\068\120\120\121\077\068\068\101\116\083\086\080\072\120\086\114\065\120\055\108\114\120\086\101\121\120\086\114\075\120\120\122\052\120\083\080\108\120\098\101\089\083\098\101\048\120\111\108\068\118\070\108\108\084\050\080\057\069\108\080\105\052\070\080\104\053\108\117\077\100\054\108\050\074\050\121\101\054\070\108\080\047\070\070\115\089\050\080\068\054\054\053\054\084\054\080\047\055\108\121\071\066\050\080\072\047\050\050\081\113\077\107\073\111\070\050\081\113\080\047\089\111\070\080\078\084\070\121\105\084\050\122\090\073\070\108\097\100\050\121\085\055\050\121\052\052\108\080\115\089\072\061\061",
                  "\107\114\043\056\109\117\090\103\105\119\107\102\105\117\071\047\071\081\061\061",
                  "\120\121\080\114\083\121\100\107\077\070\121\099\055\050\121\081\069\054\122\120\053\070\117\097\055\081\061\061",
                  "\109\097\090\104", "\120\120\054\054\120\100\087\048\120\121\083\102\120\111\053\069",
                  "\109\114\067\102\105\112\065\087\071\080\098\117\082\049\047\103\071\081\061\061",
                  "\083\111\087\078\120\052\054\055\120\086\070\071\120\052\101\079\120\098\101\089\120\111\114\072",
                  "\098\117\120\089",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\120\121\122\065\120\086\054\048\120\086\117\086\120\052\087\122",
                  "\120\111\053\083\083\121\100\052\116\054\080\057\085\072\061\061",
                  "\120\111\114\067\120\055\101\083\120\121\122\099\120\120\087\049\068\068\101\121\120\098\101\089\120\120\121\077\120\055\101\073",

                  "\120\111\121\072\083\098\101\105\120\052\100\077\120\052\087\066\120\111\080\078\120\106\083\073",
                  "\120\121\083\102\120\111\053\069\120\120\054\054\120\100\087\048\080\072\061\061",
                  "\120\121\080\114\083\121\100\107\077\070\080\105\052\070\080\104\053\108\080\054\052\108\080\051\055\081\061\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\097\104\078\057\043\099\043\110\043\104\065\104\082\099\111\061",
                  "\076\117\090\056\109\114\102\047\111\114\085\102\111\117\067\047",
                  "\097\099\104\050\107\097\067\077\122\097\107\097\122\081\061\061",
                  "\107\099\090\050\043\104\090\078\082\047\107\104\097\047\078\043\097\104\109\061",
                  "\120\121\122\065\120\086\054\048\120\086\117\086\120\052\087\122",
                  "\120\052\050\055\120\052\053\122\083\121\100\107\083\086\083\082\120\111\108\083\120\100\053\102\120\076\101\057",
                  "\120\121\121\087\120\055\083\105\120\098\054\053\083\098\053\088\083\118\049\081\083\111\108\057\120\086\053\065\083\098\101\081\083\118\121\079\120\084\118\068\120\120\121\077\120\055\108\114\086\050\121\105\053\108\121\043\089\050\121\080\054\108\108\076\084\054\121\113\102\070\122\106\047\050\080\105\100\050\121\051\117\050\121\080\047\070\080\072\074\108\080\115\113\050\080\066\053\070\121\097\054\070\080\048\054\070\121\052\052\108\080\115\089\072\061\061",
                  "\120\055\121\090\120\055\122\070\120\083\080\108\120\098\101\089\120\106\117\083\120\106\117\101\068\068\101\051\120\121\122\066\120\106\117\083\120\106\117\101\106\106\087\079\120\111\108\057\120\086\101\069\068\068\101\078\120\086\117\086\120\098\087\050\068\068\101\116\083\051\108\100\120\111\100\052\120\111\070\080\120\084\121\051\120\076\087\057\083\098\053\088\120\086\101\069\120\121\083\103\120\111\053\049\120\052\054\104\106\106\087\087",
                  "\120\100\114\089\120\086\117\078\120\086\117\086\120\052\087\122",
                  "\109\043\107\097\109\097\065\086\077\056\090\097\122\099\043\122\077\119\065\104\043\104\107\078\082\069\105\103",
                  "\083\051\108\100\120\111\100\052\120\106\117\083\120\106\117\101",
                  "\120\111\114\048\120\068\100\066\120\068\054\110\120\068\100\066\120\055\108\114\120\086\114\075\120\120\122\052\086\050\080\072\073\108\117\048\089\070\080\048\089\070\080\072\069\108\053\048\100\054\121\051\069\108\121\101\054\070\108\080\047\070\108\121\102\050\117\053\069\108\108\050\102\072\061\061",
                  "\120\121\122\066\120\106\117\083", "\076\080\104\089\105\117\115\061",
                  "\109\112\078\047\111\077\107\047\109\066\043\117\098\069\067\055\105\112\109\061",
                  "\097\119\107\079\043\104\043\082\077\070\080\051\054\054\117\100\100\110\051\061",
                  "\043\056\104\122\097\069\047\057\097\113\061\061",
                  "\122\049\104\103\080\043\047\087\071\080\098\117",
                  "\120\111\053\083\083\121\100\052\120\083\080\108\120\098\101\089\083\098\101\048\120\111\108\068",
                  "\097\119\107\079\043\104\043\082\077\070\122\106\054\070\080\118\100\050\080\115\113\050\121\081\100\113\061\061",
                  "\105\117\104\054\098\049\090\085",
                  "\097\119\107\079\043\104\043\082\077\070\108\076\084\054\121\113\102\070\122\083\069\054\080\118\100\081\061\061",
                  "\097\119\107\079\043\104\043\082\077\070\121\078\069\070\121\080\084\108\121\121\047\070\108\100\113\109\061\061",
                  "\083\051\108\100\120\052\053\107\120\086\101\111\120\111\080\051\083\121\117\067\120\055\080\089",
                  "\120\083\101\074\120\086\053\081\120\055\108\114\083\098\108\056\083\051\108\100\120\052\053\107\083\121\117\067\120\055\080\089\086\087\110\047\089\083\084\055\100\076\048\117\047\121\057\052\102\083\084\047\085\068\099\074\051\050\080\117\113\054\121\108\066\050\117\105\113\050\053\117\113\108\080\076\052\054\117\111\066\070\117\055\074\108\121\043\052\101\072\113\083\118\070\112\083\111\087\078\120\052\054\055\120\086\053\118\083\098\114\053\120\120\100\099\120\086\101\111\120\111\080\051\083\121\117\067\120\055\080\089",
                  "\120\055\117\083\120\052\080\066\120\121\083\102\120\111\053\069",
                  "\122\056\043\104\097\099\055\043\107\099\071\104",
                  "\057\089\068\047\102\076\057\055\047\083\112\052\102\083\084\047\053\100\089\066\055\098\068\047\066\118\057\117\113\076\057\117\074\111\051\061",
                  "\120\111\080\078\120\055\053\050\120\083\080\071\120\083\121\057",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\066\055\098\068\047\066\118\057\069\054\111\073\066\117\068\106\061",
                  "\097\049\090\072\071\077\079\116\121\077\065\056\082\080\043\054\071\109\061\061",
                  "\088\049\065\117\098\069\098\049\065\056\109\072\109\108\121\078\069\070\121\080\084\108\122\106\053\070\080\105\074\048\067\101",

                  "\097\069\043\082\109\119\043\122\122\043\107\088\082\069\104\065\107\109\061\061",
                  "\088\049\065\117\098\069\098\049\107\089\097\114\050\108\080\112\074\054\053\054\073\054\108\090\084\054\122\106\054\054\108\103\054\070\108\068\066\070\108\115\054\054\108\105\113\108\050\081\069\050\121\101\054\070\108\080\047\070\121\052\052\108\080\115\089\070\050\081\069\108\070\115\089\050\121\105\084\050\121\052\052\108\080\115\089\070\053\075\073\108\121\067\113\054\121\105\113\050\080\069\055\070\080\116\047\054\121\101\054\070\108\080\047\070\080\122\089\050\108\076\054\050\080\073\054\108\121\105\113\050\080\072\089\070\080\116\047\054\053\075\102\070\117\048\089\070\121\101\054\070\108\080\047\070\050\081\113\066\067\101",
                  "\120\098\101\052\083\118\083\070\120\121\083\121\120\121\080\090\083\051\049\116\120\086\053\121\120\083\080\071\120\083\121\057\120\086\117\086\120\098\087\050\068\068\101\116\120\076\101\081\120\098\087\073\120\100\114\069\083\111\087\078\083\121\049\120\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\068\101\083\120\120\101\079\120\076\101\083\120\055\080\051\120\083\080\071\120\083\121\057\120\052\070\109\120\111\117\065\116\054\080\051\102\054\117\122\066\070\053\048\100\054\080\118\100\050\053\102\055\108\070\115\089\050\121\098\084\054\117\081\117\054\108\047\066\108\108\117\089\070\121\057\069\050\080\078\089\082\048\047\053\051\076\055\069\055\075\052\102\083\084\047\053\100\089\052\052\121\043\115\105\113\061\061",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\117\102\118\082\117\113\078\086\069\054\111\073\055\047\118\109\061",
                  "\076\077\081\061", "\120\106\122\117\120\106\118\120\120\106\117\083\120\106\117\101",
                  "\107\080\120\089\076\112\043\054\071\049\043\101\122\097\109\061",
                  "\122\049\104\103\082\080\090\114\098\097\085\047\108\109\061\061",
                  "\088\049\065\117\098\069\098\049\065\056\109\072\109\108\053\102\113\050\053\087\053\108\121\051\069\050\108\079\074\048\067\101",
                  "\120\111\070\080\120\084\121\051\120\111\053\049\120\052\054\104",
                  "\083\098\053\101\120\052\100\069", "\076\080\090\119\105\114\043\073\071\117\043\101",

                  "\088\049\065\117\098\069\098\049\107\089\097\114\050\108\080\112\074\054\053\054\073\054\108\090\084\054\122\106\054\054\050\081\069\050\080\104\100\050\108\052\053\070\080\105\052\070\080\104\053\108\121\105\084\070\121\052\052\108\080\115\089\070\050\081\069\108\050\081\113\066\067\101",
                  "\120\086\100\102\120\106\049\119",
                  "\120\086\114\075\120\120\122\052\120\100\114\089\120\086\117\078\083\098\053\101\120\076\083\102\083\051\108\100\120\111\100\052\120\098\053\101\083\118\083\090\120\055\122\068\120\111\108\068\083\098\053\088\120\111\070\086\120\120\054\054\120\100\087\048\086\087\110\047\055\052\086\117\066\055\103\047\117\086\086\052\084\084\112\047\055\051\082\069\054\052\120\089\098\050\108\118\085\054\121\081\113\122\072\113\120\086\101\121\083\051\108\100\120\111\100\052\120\086\114\075\120\120\122\052\120\100\114\089\120\086\117\078\083\098\053\101\120\076\083\102\086\113\061\061",
                  "\120\052\122\069\120\052\087\122\120\086\117\086\083\098\122\069",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\097\056\102\078\107\097\067\099\097\056\043\116\107\113\061\061",
                  "\120\076\108\101\083\111\108\118\120\055\122\070\106\106\087\109", "\120\100\070\122",
                  "\109\097\089\069\073\120\112\117\053\100\082\069\054\111\073\117\053\111\074\061",
                  "\051\112\065\052\076\112\071\056\076\114\090\074\071\049\047\072\105\101\110\066\055\098\068\047\066\118\057\066\053\076\084\066\053\076\051\118\086\112\065\056\076\112\079\089\111\077\065\056\121\080\120\066\087\053\090\089\111\077\065\056\116\053\110\066\055\098\068\047\066\118\057\066\053\076\084\066\053\076\051\118",
                  "\120\086\070\071\120\052\101\079\120\076\114\082\120\111\117\065\120\120\054\054\120\100\087\048\068\068\101\051\120\055\080\116\120\121\070\120\068\068\101\078\120\052\053\080\083\051\087\104\083\098\053\088\120\111\070\086\120\120\054\054\120\100\087\048\120\120\100\099\120\120\054\054\120\100\087\048\068\068\101\051\120\055\080\116\120\121\070\120\068\068\101\078\083\111\108\118\120\055\122\070\120\098\101\089\120\111\114\072\068\068\101\116\120\121\122\067\120\055\080\051\120\086\101\121\083\051\108\100\120\111\100\052\083\118\049\047\120\086\053\118\088\048\051\061",
                  "\120\111\080\078\120\052\083\116",
                  "\122\047\043\099\107\056\043\088\097\119\079\104\082\099\067\082",
                  "\109\043\107\097\109\097\065\086\077\070\080\047\085\054\117\100\069\043\075\047\066\118\057\047\102\111\066\047\084\100\048\047\053\118\109\061",
                  "\043\056\104\122\082\099\090\110\122\072\061\061",
                  "\088\049\065\117\098\069\098\049\065\056\109\072\109\108\121\101\054\070\108\080\047\070\080\051\054\054\117\100\100\048\067\101",
                  "\097\119\107\079\043\104\043\082\077\070\080\077\066\050\053\102\113\050\108\051\102\054\080\057\069\109\061\061",
                  "\109\043\107\097\109\097\065\086\077\070\080\047\085\054\117\100\069\043\075\117\084\121\057\069\054\111\066\066\117\068\068\047\102\068\074\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\083\121\080\072\120\098\050\079\120\106\053\049\120\111\070\107",
                  "\088\049\065\117\098\069\098\049\065\056\109\072\109\082\106\070\083\098\053\075\120\111\100\100\120\076\108\056\120\052\054\078\120\111\080\086\120\052\053\111\120\055\121\077\120\068\054\082\120\055\114\088\068\068\101\116\083\111\108\065\120\068\114\054\120\084\118\068\120\120\121\077\083\118\083\070\120\068\114\054\051\077\067\101",
                  "\083\118\070\112\120\111\080\051\083\118\083\070\120\068\114\054\120\106\122\117\120\106\118\120\068\068\101\116\120\111\121\065\120\086\114\075\120\120\122\052\120\106\122\117\120\106\118\120\120\055\108\113\120\055\080\116\120\106\117\083\120\106\117\101\068\068\101\079",
                  "\083\051\108\100\120\052\053\107\120\111\114\067\120\055\101\083\120\121\122\099\120\120\087\049\068\068\101\121\120\055\108\113\120\055\080\116",
                  "\097\119\107\079\043\104\043\082\077\070\108\076\084\054\121\113\102\070\122\083\069\054\080\118\100\110\051\061",
                  "\098\117\090\089\071\077\116\061", "\105\112\079\047\076\049\067\097\121\080\119\047",
                  "\120\055\100\077\120\076\114\067\120\052\100\077\120\052\087\066\120\111\080\078\120\106\083\073",
                  "\097\119\107\079\043\104\043\082\077\056\047\050\109\069\104\097\043\099\067\104\122\099\043\079\082\081\061\061",
                  "\097\119\107\079\043\104\043\082\077\070\080\051\054\054\117\100\100\050\080\105\052\070\080\104\053\109\061\061",
                  "\120\086\101\111\120\111\080\051\083\051\108\100\120\120\121\077",
                  "\111\077\043\101\111\097\120\102\076\080\097\061",
                  "\109\114\090\085\076\080\047\054\098\056\102\073\071\104\071\055\076\117\107\073\071\072\061\061",
                  "\108\117\102\110\082\113\061\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\120\100\114\089\120\086\117\078\120\086\117\086\120\052\087\122",
                  "\120\076\087\057\120\076\083\112",
                  "\109\043\107\097\109\097\065\086\077\070\080\047\085\054\117\100\069\043\075\117\102\118\082\117\113\078\086\069\054\111\073\055\047\118\109\061",
                  "\109\056\104\050\077\056\078\043\107\069\111\061",
                  "\121\049\104\103\097\049\090\055\105\114\090\054",
                  "\120\076\070\104\083\121\049\068\120\098\101\052\083\098\053\088\120\086\101\065\120\052\053\080\083\051\087\104\120\098\054\053\083\098\053\088\120\086\053\085\120\086\114\075\120\120\122\052\120\083\080\108\120\098\101\089\120\106\117\083\120\106\117\101",
                  "\120\076\114\082\083\051\108\100\120\076\108\067\083\118\049\081\083\111\108\057\120\086\114\050\120\086\100\050\083\118\083\070\120\121\083\121\120\111\087\115\068\068\101\116\083\051\108\100\120\111\100\052\083\051\108\100\120\052\053\107\120\098\101\089\120\120\121\077\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\111\070\100\120\055\101\078\120\098\101\052\120\055\108\113\120\055\080\116\120\098\118\116\120\086\070\071\120\052\100\069\109\056\082\069\054\118\112\073\073\051\103\117\053\111\112\052\055\083\076\047\089\120\048\117\084\121\082\055\113\051\066\055\052\076\047\115\105\113\061\061",
                  "\097\119\107\079\043\104\043\082\077\070\053\048\100\054\080\118\100\050\080\073\054\070\121\081\100\113\061\061",
                  "\082\056\120\116\080\097\102\104\109\097\067\097\109\043\078\048\107\043\107\088\043\043\065\104\043\099\090\109\122\099\043\079\082\081\061\061",

                  "\076\117\104\085\098\109\061\061",
                  "\083\121\117\067\120\055\080\089\120\098\054\053\083\098\053\088",
                  "\071\049\047\072\043\049\047\056\076\049\097\061",
                  "\120\076\114\082\083\051\108\100\120\076\108\067\083\118\049\081\083\111\108\057\120\086\114\050\120\086\100\050\083\118\083\070\120\121\083\121\120\111\087\115\068\068\101\116\120\086\101\111\120\111\080\051\120\084\118\068\120\120\121\077\083\051\108\100\120\076\108\067\068\068\101\116\120\068\101\083\120\120\101\079\083\118\083\070\120\068\114\054\065\082\081\047\068\068\101\051\116\087\106\119\068\068\101\078",
                  "\107\114\043\056\109\080\065\056\121\080\090\054\097\112\079\047\076\049\067\050\111\080\119\047",
                  "\122\099\043\079\082\104\090\087\043\043\107\097\082\056\120\088\120\111\080\078\120\106\083\073\120\052\083\116\120\052\070\102",

                  "\083\051\108\100\120\052\053\107\120\111\114\067\120\055\101\083\120\121\122\099\120\120\087\049\068\068\101\121\120\098\101\089\120\086\114\107\120\055\101\073",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\047\066\118\057\117\085\051\048\117\053\100\082\066\117\068\106\061",
                  "\120\121\122\065\120\086\054\048\120\098\101\089\120\111\114\072", "\120\120\108\104",
                  "\120\083\080\108\120\098\101\089\120\052\049\103\120\084\049\087", "\111\080\102\072",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\069\104\082\043\099\102\104\109\097\072\061",
                  "\086\114\065\102\105\112\109\113\120\121\122\065\120\086\054\048\120\086\117\086\120\052\087\122\087\053\090\089\111\077\065\056\051\050\108\047\066\054\080\105\052\070\121\079\074\070\121\067\113\113\052\061",
                  "\083\051\108\100\120\111\100\052\120\111\114\048\120\068\100\066\120\086\114\075\120\120\122\052\068\068\101\116\120\083\054\098\120\098\101\052\120\055\070\109\120\086\053\100\120\098\101\072\120\055\121\120\068\068\101\116\083\051\108\100\120\111\100\052\120\121\070\068\120\052\117\070\120\052\087\100\120\106\117\055\120\055\122\068\120\111\108\068",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\120\098\054\053\083\098\053\088\083\111\087\121\120\098\049\118",
                  "\088\104\109\061",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\117\054\051\077\066\084\055\088\069\054\111\073\117\053\111\074\061",
                  "\120\052\050\055\120\052\053\122\077\070\108\047\066\054\080\105\052\070\121\099\055\050\121\081\069\113\061\061",
                  "\097\119\107\079\043\104\043\082\077\070\117\111\073\070\080\118\100\054\080\112\085\050\121\086\053\108\080\104\053\072\061\061",
                  "\120\052\050\055\120\052\053\122\077\070\117\055\074\108\117\087\100\054\121\105\084\072\061\061",
                  "\120\098\101\089\120\086\114\107\120\055\101\073",
                  "\120\076\101\083\120\055\080\051\120\076\100\048\120\052\100\069\120\083\080\071\120\083\121\057",
                  "\122\099\043\079\082\104\090\109\082\099\104\098\107\043\078\088\043\099\104\116\107\097\120\097\097\072\061\061",
                  "\108\117\102\097\043\072\061\061",
                  "\097\114\043\056\097\112\107\073\105\099\102\047\111\080\067\079\111\112\107\055\076\114\106\061",
                  "\097\119\107\079\043\104\043\082\077\070\121\085\052\070\122\120\053\108\117\111\074\054\080\070\052\109\061\061",
                  "\116\072\061\061",
                  "\109\043\107\097\109\097\065\086\077\056\090\097\122\099\043\122\077\119\065\104\043\104\107\078\082\069\071\088\082\069\090\122\082\097\104\116",
                  "\071\080\120\072\111\080\065\084", "\105\112\079\047\076\049\067\078\098\081\061\061",
                  "\088\049\065\117\098\089\081\072\098\117\111\072\116\050\121\110\100\108\121\051\069\066\067\101",
                  "\083\121\117\067\120\055\080\089\120\120\121\070\120\120\108\104\120\055\080\051\120\055\083\105\068\068\101\116\083\051\108\100\120\111\100\052\083\121\117\067\120\055\080\089\120\120\121\070\120\120\108\104\120\055\080\051\120\055\083\105\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\083\051\108\100\120\111\100\052\120\086\114\075\120\120\122\052\120\084\053\104\120\084\122\079\120\055\101\073\083\121\117\067\120\055\080\089\120\120\054\054\120\100\087\048\120\120\121\070\120\120\108\104\120\055\080\051\120\055\083\105\088\048\051\061",
                  "\120\084\053\104\120\083\083\077",
                  "\120\111\053\083\083\121\100\052\065\108\080\057\085\072\061\061",
                  "\120\086\053\082\120\084\050\052\120\111\080\078\120\106\083\073",
                  "\097\119\107\079\043\104\043\082\077\070\053\048\100\054\080\118\100\050\108\078\054\054\108\078\074\113\061\061",
                  "\086\114\065\102\076\117\065\047\076\049\104\119\105\117\099\113\120\083\080\108\120\098\101\089\120\106\117\083\120\106\117\101",
                  "\105\112\079\047\076\049\067\050\111\080\119\047", "\120\086\070\071\120\052\100\069",
                  "\083\111\087\078\120\052\054\055\120\121\083\102\120\111\053\069\120\052\100\081\083\051\050\090",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\109\043\043\097\082\056\102\104\109\097\072\061",
                  "\086\087\079\079\109\119\107\078\082\056\106\083",
                  "\122\099\043\079\082\104\090\080\109\097\067\043\107\043\075\055\055\076\110\047\069\106\048\066\053\051\076\047\089\120\048\047\113\086\072\061",
                  "\120\076\101\081\120\098\087\073\120\100\114\089\120\086\117\078\120\086\117\086\120\052\087\122",
                  "\120\111\080\052\120\083\053\086\120\098\101\089\120\111\080\078\120\055\101\073",
                  "\111\066\043\117\098\117\078\119\071\048\107\073\076\113\061\061",
                  "\088\049\065\117\098\089\081\072\098\117\111\072\116\050\080\109\084\070\080\118\100\050\121\097\054\070\080\048\054\112\067\101",
                  "\082\049\104\103\071\099\102\047\111\080\067\097\098\080\104\085\109\080\065\056\121\080\090\054",
                  "\120\098\101\089\120\111\080\078\120\055\101\073\120\055\100\056\120\111\108\068",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\099\047\082\097\099\090\082\122\097\090\050",
                  "\120\098\101\089\120\120\121\077",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\069\047\122\097\119\107\051\107\097\104\116\097\056\043\116\107\113\061\061",
                  "\083\051\108\100\120\111\100\052\120\111\114\048\120\068\100\066\120\086\114\075\120\120\122\052\068\068\101\116\120\055\114\081\120\100\114\068\120\052\087\100\120\106\117\055\120\098\087\050\083\051\108\100\120\111\100\052\120\052\054\070\120\111\070\080",
                  "\097\099\104\050\107\097\067\051\107\097\047\048\122\104\109\061",
                  "\120\055\101\073\120\121\050\084",
                  "\083\098\053\101\120\052\100\069\077\070\108\047\066\054\080\105\052\070\121\079\074\070\121\067\113\113\061\061",
                  "\109\043\107\097\109\097\065\086\077\070\080\047\085\054\117\100\069\043\075\055\100\076\048\055\113\100\084\117\066\118\115\061",
                  "\120\076\114\082\120\111\117\065\120\120\054\054\120\100\087\048\120\084\118\068\120\120\121\077\120\098\087\073\120\111\100\052\086\070\121\105\113\050\117\084\117\050\121\103\047\108\121\105\084\072\061\061",
                  "\120\052\050\055\120\052\053\122\077\070\121\099\055\050\121\081\069\054\122\120\053\070\117\097\055\081\061\061",
                  "\120\111\100\076\083\111\108\057\120\083\080\071\120\083\121\057",
                  "\120\052\117\082\120\052\087\100",
                  "\082\119\098\104\097\069\102\104\109\097\067\050\082\119\078\065\109\097\072\061",
                  "\120\083\080\108\120\098\101\089\120\086\117\086\120\120\054\070",
                  "\097\119\107\079\043\104\043\082\077\119\079\077\109\043\078\116\082\056\065\086",
                  "\106\106\087\107\057\110\072\115", "\071\117\043\101\105\114\047\073\076\113\061\061",
                  "\068\068\101\116\120\111\049\105\120\100\114\053\120\084\118\068\120\120\121\077",
                  "\120\098\114\117\120\111\080\086\120\083\080\071\120\083\121\057\083\118\083\070\120\068\114\054\068\068\101\116\083\098\100\109\083\078\108\057\120\086\053\065\120\055\053\070\120\083\122\083",
                  "\083\051\108\100\120\111\100\052\120\052\117\082\120\055\121\085\120\086\053\085\083\078\117\084\120\055\100\077\120\076\114\067\120\083\100\079\120\111\108\068",
                  "\120\055\121\090\120\055\122\070\120\083\080\108\120\098\101\089\120\106\117\083\120\106\117\101\068\068\101\051\120\121\122\066\120\106\117\083\120\106\117\101\106\106\087\079\120\111\108\057\120\086\101\069\068\068\101\078\120\086\117\086\120\098\087\050\068\068\101\116\083\051\108\100\120\111\100\052\120\098\101\052\120\098\054\053\083\098\053\088\120\052\053\080\083\051\087\104\120\076\087\057\083\098\053\088\083\111\087\121\120\098\049\118\106\106\087\087",
                  "\120\083\080\108\120\052\049\055\120\083\080\108\120\098\087\073",
                  "\122\049\090\056\043\049\043\102\076\108\117\097\117\108\053\073\084\070\108\121\102\048\107\078\076\117\098\073\068\068\101\116\083\118\070\112\120\100\050\081\120\055\070\047\120\083\053\086\120\076\100\057\068\068\101\079",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\047\066\118\057\047\102\111\066\047\084\100\048\047\053\118\109\061",
                  "\107\049\047\103\105\049\043\074\097\049\090\055\105\114\090\054\122\114\043\120",
                  "\120\086\114\075\120\120\122\052\083\121\050\108\120\120\054\070\086\087\110\052\102\083\084\047\053\100\089\117\053\098\057\117\047\100\112\047\073\098\057\047\053\111\112\066\117\083\068\117\052\051\105\073\120\106\122\117\120\106\118\120\120\120\054\054\120\100\087\048\086\087\110\052\084\084\068\066\073\121\068\055\102\106\103\055\066\121\086\047\089\083\075\069\054\083\077\052\084\084\068\066\073\121\068\117\053\098\057\117\047\100\112\052\084\068\073\117\066\121\048\117\084\120\082\069\073\052\074\074\051\050\108\115\054\054\108\105\113\108\108\084\053\070\080\065\074\070\121\078\069\070\121\080\084\108\070\115\053\050\117\089\066\054\108\076\073\054\053\117\113\108\117\089\066\054\053\102\089\050\121\077\085\054\117\077\085\050\070\115\053\108\050\081\113\054\080\117\113\054\121\108\066\050\121\111\084\070\122\083\052\108\108\079\085\108\121\081\100\054\070\115\089\050\122\115\117\054\053\048\100\054\080\118\100\050\122\090\073\070\108\097\100\050\108\047\066\054\080\105\052\070\121\099\055\050\121\081\069\054\053\075\117\070\053\102\089\050\121\078\069\070\121\080\084\122\106\118\087\066\067\089\098\117\111\072\116\049\098\117\116\110\110\047\055\052\086\117\066\055\103\055\066\051\110\052\055\052\048\117\053\111\073\047\053\100\089\117\053\098\057\117\047\100\056\074\051\050\053\073\085\070\122\106\089\108\053\117\113\108\080\086\073\054\117\081\053\108\121\085\055\050\117\102\054\108\050\081\113\113\061\061",
                  "\076\114\098\117\105\114\043\056", "\111\114\104\054\109\077\107\056\111\080\065\084",
                  "\083\121\117\067\120\055\080\089\120\086\053\085\120\100\070\122",
                  "\109\114\104\054\043\077\065\047\097\119\081\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\069\047\122\097\119\107\097\109\043\078\048\107\043\109\061",
                  "\111\077\043\101\111\097\120\102\076\080\043\110\122\097\109\101",
                  "\120\111\114\102\109\056\082\069\073\076\075\066\047\118\089\047\084\100\048\117\053\076\066\117\053\052\110\052\113\068\112\117\053\098\057\069\073\118\082\047\084\084\057\089\113\051\051\118\087\066\067\089\098\117\111\072\116\049\098\117\116\110\110\047\089\083\084\117\066\051\066\047\066\118\089\069\054\086\073\047\053\100\089\117\047\086\073\047\102\068\073\055\113\051\066\117\053\083\066\047\069\051\068\117\053\111\112\069\073\078\084\066\047\078\075\117\047\111\089\089\113\051\078\115\105\113\061\061",
                  "\107\114\043\056\097\049\067\102\108\080\043\101\043\049\104\074\098\080\120\056",
                  "\105\049\067\102\108\080\043\101",
                  "\107\099\104\057\109\069\047\079\082\056\067\078\097\119\109\061", "\121\048\081\061",
                  "\121\080\109\061",
                  "\109\043\107\097\109\097\065\086\077\056\090\097\122\099\043\122\077\119\065\104\043\104\107\078\082\069\105\101",
                  "\122\077\065\080\111\080\067\055\098\099\043\085\098\077\078\066\098\080\120\089\108\109\061\061",
                  "\097\119\107\079\043\104\043\082\077\056\104\043\043\099\090\078\082\047\107\104\097\047\043\109\043\081\061\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\097\099\104\043\097\056\097\061",
                  "\083\121\117\067\120\055\080\089\120\086\053\085\120\100\070\122\120\055\080\051\120\055\083\105\068\068\101\116\083\051\108\100\120\111\100\052\083\121\117\067\120\055\080\089\120\086\053\085\120\100\070\122\120\055\080\051\120\055\083\105\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\083\051\108\100\120\111\100\052\120\086\114\075\120\120\122\052\120\084\053\104\120\084\122\079\120\055\101\073\083\121\117\067\120\055\080\089\120\120\054\054\120\100\087\048\120\086\053\085\120\100\070\122\120\055\080\051\120\055\083\105\087\047\055\043\107\070\080\082\053\050\080\065\052\108\080\068\054\054\053\054\084\054\080\104\074\070\117\077\084\108\122\106\084\108\121\073\069\054\117\055\074\108\121\043\052\112\067\101",
                  "\120\098\101\089\120\111\080\078\083\111\049\082\120\100\087\048",
                  "\071\049\104\101\098\114\043\056", "\083\121\117\067\083\111\118\100",
                  "\097\119\107\079\043\104\043\082\077\070\053\048\100\054\080\118\100\050\121\086\073\054\080\057\047\113\061\061",
                  "\120\111\080\074\120\100\114\089\120\098\101\089\120\111\114\072",
                  "\097\119\107\079\043\104\043\082\077\070\108\047\066\054\121\079\100\108\108\047\066\054\080\109\084\072\061\061",
                  "\083\111\087\078\120\052\054\055\083\118\121\079\120\111\053\112\120\111\053\083\083\121\100\052\120\120\100\099\120\084\050\043\120\055\101\073\106\106\087\087\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\121\121\087\120\055\083\105\083\111\087\078\120\052\054\055\120\083\080\108\120\098\101\089\083\098\101\048\120\111\108\068\068\068\101\116\120\076\087\049\120\086\101\111\120\111\080\051\120\111\114\102\111\114\082\069\073\076\075\066\047\118\089\055\066\051\088\047\102\068\073\117\074\084\073\066\047\055\105\061",
                  "\083\098\101\048\120\111\108\068",
                  "\122\099\043\079\082\104\090\080\109\097\067\043\107\043\075\066\053\076\084\066\053\076\086\052\052\111\110\055\102\106\115\061",
                  "\097\056\043\079\082\104\090\082\097\099\043\116\082\104\116\061",
                  "\082\119\098\104\097\069\102\104\109\097\067\088\043\069\104\116\043\097\097\061",
                  "\122\099\043\079\082\104\090\079\043\043\107\057\077\119\098\079\082\104\043\104",
                  "\122\099\043\079\082\104\090\087\043\043\107\097\082\056\120\088\120\106\117\083\120\106\117\101\120\086\117\086\120\052\117\086",

                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\099\104\057\109\069\047\079\082\119\043\050\122\043\109\061",
                  "\083\111\049\082\120\100\087\048\083\098\053\088\120\111\070\086\083\111\087\078\120\052\054\055",
                  "\098\049\043\102\098\081\061\061",
                  "\120\098\101\089\120\111\080\078\120\055\101\073\120\084\118\068\120\120\121\077",
                  "\106\106\087\107\057\082\106\061",
                  "\120\052\050\055\120\052\053\122\077\070\121\106\102\108\108\054\047\070\122\120\053\070\121\078\053\072\061\061",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\047\066\118\057\047\102\111\066\047\084\100\048\047\053\118\109\061",
                  "\083\111\087\078\120\052\054\055\120\100\114\069\083\121\049\120\068\068\101\116\120\076\087\049\120\098\101\052\120\052\053\111\120\055\121\077\120\076\101\081\120\121\108\086\120\098\087\050\083\078\050\071\083\111\108\057\120\086\114\050\120\086\100\050\065\103\081\047\120\055\108\114\068\068\101\116\083\051\108\100\120\111\100\052\120\111\114\102\109\056\082\069\073\076\075\066\047\118\089\066\055\098\068\047\066\118\057\117\113\076\057\117\074\111\051\118\087\066\067\089\098\117\111\072\116\049\098\117\116\110\110\055\113\051\066\117\053\083\066\117\084\121\082\055\052\076\066\047\074\051\076\069\073\078\084\069\073\120\112\117\089\051\048\055\100\055\048\047\052\083\073\117\066\051\110\069\073\076\057\047\117\120\068\052\069\120\112\117\047\111\089\117\066\055\067\115\105\113\061\061",
                  "\120\086\070\071\120\052\101\079\083\051\108\100\083\086\100\084\120\098\101\089\120\084\122\079\120\052\100\069\120\120\054\070",
                  "\109\114\104\054\043\077\065\047\109\080\065\056\121\080\090\054",
                  "\120\052\050\055\120\052\053\122\077\070\080\065\113\108\080\085\047\070\080\049\117\070\121\078\069\070\080\048\054\072\061\061",
                  "\120\098\101\089\120\120\054\070\120\055\101\073\086\070\080\105\052\070\122\090\069\108\121\105\084\101\075\066\102\118\076\066\113\084\066\066\053\076\084\066\053\076\051\061",
                  "\065\069\111\061",
                  "\122\099\043\079\082\104\090\080\109\097\067\043\107\043\090\109\097\069\090\097\107\097\065\097",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\047\055\051\112\069\054\106\088\052\113\051\077\069\054\111\073\066\117\068\106\061",
                  "\088\049\065\117\098\069\098\049\107\089\097\114\050\108\080\112\074\054\053\054\073\054\108\090\084\054\122\106\054\054\050\081\069\050\121\078\069\070\121\081\100\054\050\081\069\108\121\052\052\108\080\115\089\070\050\081\113\066\067\101",
                  "\111\077\043\101\111\097\120\102\076\080\043\110\122\097\109\061",
                  "\120\076\101\083\120\055\080\051\120\111\080\078\120\055\053\050\120\083\080\071\120\083\121\057",
                  "\097\119\107\079\043\104\043\082\077\070\053\048\100\054\080\118\100\050\080\073\054\070\121\081\100\089\051\061",
                  "\120\052\050\055\120\052\053\122\120\111\080\078\120\106\083\073",
                  "\097\119\107\079\043\104\043\082\077\070\121\106\102\108\108\054\047\070\122\120\053\070\121\078\053\072\061\061",
                  "\120\098\114\117\120\111\080\086\120\100\053\102\120\076\101\057",
                  "\088\049\065\117\098\069\098\049\107\069\098\049\107\054\080\104\100\050\108\052\053\070\080\105\052\070\080\104\053\108\121\105\084\112\067\101",
                  "\097\119\107\079\043\104\043\082\077\119\079\122\082\056\071\043\107\109\061\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\122\056\043\104\097\104\065\104\109\097\067\087\043\043\107\097\082\056\106\061",
                  "\121\077\065\077\076\112\107\074\121\072\061\061",
                  "\107\099\043\079\043\099\102\086\082\069\047\048\122\104\109\061",
                  "\083\098\053\101\120\052\100\069\077\070\121\085\052\070\122\120\053\108\122\120\053\070\121\081\069\113\061\061",
                  "\082\069\104\065\107\043\079\116\109\043\107\104\097\119\090\065\109\043\102\099\122\043\065\097\109\097\120\110\107\109\061\061",
                  "\109\043\107\097\109\097\065\086\077\070\080\047\085\054\117\100\069\043\075\066\055\098\068\047\066\118\057\117\102\118\082\117\113\078\051\061",
                  "\120\084\118\068\120\120\121\077\120\111\080\047\120\121\083\121",
                  "\109\097\089\117\047\083\110\117\047\111\103\066\053\076\084\066\053\076\051\061",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\055\100\076\048\055\113\100\084\117\066\118\115\061",
                  "\076\117\090\101\076\080\104\074", "\050\053\113\047\098\087\052\055\050\113\061\061",
                  "\107\049\043\117\111\077\043\074\071\099\119\073\098\049\097\061",
                  "\043\080\120\055\071\099\102\102\105\056\078\119\098\117\111\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\120\083\080\108\120\098\101\089\120\052\049\103\120\084\049\087",
                  "\098\049\043\103\071\099\120\102\076\080\097\061",
                  "\109\114\090\054\071\049\104\055\076\066\116\061",
                  "\057\089\068\052\102\083\084\047\053\100\089\047\073\051\110\047\069\118\075\066\055\098\068\047\066\118\057\117\113\076\057\117\074\111\086\073\073\051\099\061",
                  "\120\055\121\090\120\055\122\070\120\083\080\108\120\098\101\089\120\106\117\083\120\106\117\101\068\068\101\051\120\098\054\053\083\098\053\088\120\111\108\057\120\086\101\069\068\068\101\078\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\100\114\069\120\121\122\099\120\086\054\104\120\052\070\109\120\086\083\076\120\086\053\081\120\083\108\065\120\076\070\084\120\052\114\112\120\052\101\078\083\098\118\054\120\055\121\120\120\076\101\057\068\068\101\116\120\111\070\073\120\086\054\047\120\076\087\049\109\077\043\056\076\056\102\047\076\048\110\052\102\083\084\047\053\100\089\047\053\078\073\047\054\068\084\066\117\052\082\047\084\052\075\117\053\120\076\047\053\086\110\047\073\083\073\117\089\076\088\117\052\051\075\052\073\120\073\052\052\111\103\117\069\106\112\069\073\098\103\089\113\051\078\115\105\113\061\061",
                  "\120\076\101\083\120\055\080\051\120\106\083\086\083\051\087\104\120\083\080\071\120\083\121\057",
                  "\083\051\108\100\120\052\053\107\120\111\114\067\120\055\101\083\120\121\122\099\120\120\087\049\068\068\101\121\083\098\101\048\120\111\108\068",
                  "\120\052\100\069\120\120\054\070",

                  "\043\080\120\055\071\099\102\102\105\056\078\119\098\117\098\087\108\043\079\074\111\077\047\047\105\113\061\061",
                  "\083\098\053\101\120\052\100\069\077\070\121\085\052\070\122\120\053\108\122\120\053\070\117\097\055\081\061\061",
                  "\120\076\070\057\120\052\118\097",
                  "\083\051\108\100\120\111\100\052\120\098\053\101\083\118\083\090",
                  "\083\111\087\078\120\052\054\055\120\121\083\102\120\111\053\069",
                  "\120\111\080\074\120\100\114\089\120\121\083\102\120\111\053\069", "\098\117\051\061",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\066\055\098\068\047\066\118\057\117\113\076\057\117\074\111\051\061",
                  "\121\080\065\073\076\113\061\061", "\107\112\078\073\071\077\079\103\082\066\043\085",
                  "\109\056\104\050\077\119\078\104\097\056\065\043\097\069\047\097",
                  "\083\098\053\101\120\052\100\069\077\070\117\055\074\108\117\087\100\054\121\105\084\072\061\061",
                  "\109\112\078\047\111\077\107\047\082\080\104\089\105\117\115\061", "\071\114\067\084",
                  "\122\080\120\097\076\114\065\109\116\072\061\061",
                  "\043\099\090\110\120\086\100\116\120\111\070\112\083\118\049\081\083\051\118\078\120\052\053\109\120\106\049\072\068\068\101\116\083\051\108\100\120\111\100\052\120\084\118\068\120\120\121\077\083\118\049\081\083\051\118\078\120\052\053\109\120\106\049\072\120\120\054\054\120\100\087\048\068\068\101\116\120\120\054\056\120\111\053\072\098\049\043\053\071\080\098\117\120\084\121\051\120\121\122\067\106\106\087\087",
                  "\057\089\068\052\102\083\084\047\053\100\089\047\073\051\110\047\069\118\075\066\055\098\068\047\066\118\057\117\066\118\115\073\120\083\080\108\120\098\087\073\086\070\117\047\074\050\080\082\113\122\106\054\086\054\108\117\113\108\121\085\052\054\122\106\113\050\080\051\102\070\080\076\052\054\080\051\085\070\121\101\054\070\108\080\047\070\070\115\113\109\061\061",
                  "\083\118\070\112\083\111\087\078\120\052\054\055\083\098\053\088\120\111\070\086\086\070\080\076\052\054\117\111\066\070\108\076\084\054\121\113\102\070\080\109\089\054\122\090\073\070\108\097\100\050\121\077\052\050\121\043\089\050\108\078\054\054\108\078\074\054\070\115\113\109\061\061",
                  "\120\076\101\081\120\098\087\073\120\083\080\108\120\098\101\089\120\052\049\103\120\084\049\087\120\098\054\108\083\078\050\071",
                  "\120\055\117\083\120\052\080\066\120\098\101\089\120\111\114\072",
                  "\097\119\107\079\043\104\043\082\077\070\080\051\054\054\117\100\100\050\117\105\102\070\080\048\054\072\061\061",
                  "\082\097\090\080\107\097\102\104\109\097\067\086\107\043\047\082",
                  "\109\080\107\069\109\114\104\103\071\099\104\089\071\049\047\073\076\113\061\061",
                  "\109\056\104\050\077\056\102\104\109\097\072\061",
                  "\109\043\107\097\109\097\065\086\077\070\080\047\085\054\117\100\069\043\075\117\084\121\057\069\054\111\066\069\054\111\073\117\113\078\051\061",
                  "\120\098\101\052\120\055\080\116\120\086\100\083\083\118\049\081\083\111\108\057\120\076\087\107\120\086\100\050\116\089\081\047\120\098\087\050\068\068\101\116\120\086\101\111\120\111\080\051\120\086\114\075\120\120\122\052\120\052\122\069\120\052\087\122\120\086\117\086\083\098\122\069\083\086\070\076\083\118\049\116\120\055\122\068\120\111\108\068\106\106\087\087\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\111\070\100\120\055\101\078\120\098\101\052\120\086\053\068\120\111\100\052\120\055\122\068\120\111\108\068\083\111\087\078\120\052\054\055\120\098\087\050\120\052\117\065\120\086\101\121\120\120\122\088\120\055\080\051\106\106\087\087\088\048\051\061",
                  "\105\049\090\055\076\066\109\061",
                  "\083\118\083\070\120\068\114\054\120\098\101\089\120\111\080\078\083\111\049\082\120\100\087\048\120\120\054\054\120\100\087\048\068\068\101\121",
                  "\122\049\043\102\076\104\107\047\111\080\112\055\047\078\066\052\084\083\075\066\117\052\107\056\122\080\120\117\076\070\070\115\089\050\053\073\085\070\121\089\113\050\121\088\055\108\108\052\053\070\080\083\089\070\070\115\113\109\061\061",
                  "\120\083\080\108\120\098\101\089\120\106\117\083\120\106\117\101\068\068\101\051\120\121\122\066\120\106\117\083\120\106\117\101\068\068\101\078",
                  "\088\049\065\117\098\089\081\072\098\117\111\072\116\050\122\075\066\108\121\116\113\108\080\090\069\070\080\078\089\108\108\076\084\054\121\113\102\070\122\106\113\050\108\076\085\050\108\068\085\050\121\116\113\108\080\105\052\070\121\056\113\108\121\118\055\050\108\076\073\054\121\043\053\050\121\108\066\050\070\115\089\050\080\069\074\108\121\043\053\050\122\115\117\054\053\048\100\054\080\118\100\050\053\102\055\108\122\106\053\054\070\115\089\050\080\117\113\054\121\108\066\050\121\101\052\108\121\105\053\108\117\081\053\108\121\086\100\108\122\083\054\054\080\107\117\050\080\086\073\054\117\081\053\108\121\085\055\050\117\102\054\108\070\115\089\050\080\051\117\108\122\075\066\108\121\116\113\108\053\048\100\054\121\051\069\108\080\105\052\070\121\056\113\108\121\118\055\050\108\076\073\066\067\101",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\083\111\049\082\120\100\087\048\120\111\053\048\120\052\114\053",
                  "\051\112\065\052\076\112\071\056\076\114\090\074\071\049\047\072\105\101\110\117\053\083\075\117\047\098\048\069\054\111\073\117\053\111\074\118\086\112\065\056\076\112\079\089\111\077\065\056\121\080\120\066\087\053\090\089\111\077\065\056\116\053\110\117\053\083\075\117\047\098\048\069\054\111\073\117\053\111\074\118",
                  "\083\051\108\100\120\052\053\107\120\111\114\067\120\055\101\083\120\121\122\099\120\120\087\049\068\068\101\121\120\111\100\113\083\118\049\081",
                  "\107\049\090\054\071\099\107\055\105\112\079\047\076\099\119\102\098\114\047\089\105\072\061\061",
                  "\071\114\047\069\071\049\113\061", "\120\106\101\050\120\086\100\083",
                  "\083\118\121\079\083\118\083\070\120\068\114\054\083\111\049\082\120\100\087\048\120\120\054\054\120\100\087\048\083\118\070\112\120\111\080\051\083\111\087\078\120\052\054\055\083\098\053\088\120\111\070\086\068\068\101\079",
                  "\097\099\104\050\107\097\067\088\109\056\090\050\107\069\047\048",
                  "\076\080\090\069\098\109\061\061", "\121\077\065\072\076\112\071\047\105\113\061\061",
                  "\088\049\065\117\098\069\098\049\065\056\109\072\109\108\121\078\069\070\121\080\084\108\121\121\047\070\108\100\113\077\067\101",
                  "\120\052\049\103\120\084\049\087", "\122\099\043\079\082\099\119\057\107\099\097\061",
                  "\083\078\117\097\083\118\070\121\120\111\080\078\120\106\083\073",
                  "\111\080\067\073\105\112\109\061", "\097\099\104\116\109\097\107\078\082\113\061\061",
                  "\111\114\090\054\111\114\104\056",
                  "\083\098\053\101\120\052\100\069\077\070\108\047\066\054\080\105\052\070\122\120\053\070\108\076\073\113\061\061",
                  "\051\112\065\052\076\112\071\056\076\114\090\074\071\049\047\072\105\101\110\066\053\076\084\066\053\076\086\069\054\111\073\117\053\111\074\118\086\112\065\056\076\112\079\089\111\077\065\056\121\080\120\066\087\053\090\089\111\077\065\056\116\053\110\047\066\118\057\066\117\068\068\117\066\118\115\073\120\106\117\083\120\106\117\101\120\086\117\086\120\052\117\086\087\113\061\061",
                  "\122\077\065\104\111\077\107\055\076\117\105\061",
                  "\097\117\104\055\098\099\102\047\111\080\067\056\121\104\079\089\071\081\061\061",
                  "\122\097\120\097\107\043\078\122\043\043\079\097\077\119\065\109\107\097\067\116\082\069\104\065\107\043\116\061",
                  "\083\121\114\097",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\117\084\121\057\069\054\111\066\069\054\111\073\117\113\078\051\061",
                  "\071\049\047\085\098\109\061\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\122\056\043\104\097\104\065\104\109\097\072\061",
                  "\083\121\080\072\120\098\050\079\120\106\053\049\120\111\070\107",
                  "\120\106\049\084\120\106\122\072\120\052\100\077\120\052\087\066\120\111\080\078\120\106\083\073",
                  "\120\098\101\089\120\120\054\070\120\055\101\073\086\070\080\105\052\070\122\090\069\108\121\105\084\101\075\066\053\076\084\066\053\076\086\069\054\111\073\117\053\111\074\061",
                  "\109\097\089\117\053\083\075\117\047\098\048\069\054\111\073\117\053\111\074\061",
                  "\097\119\107\079\043\104\043\082\077\070\053\048\100\054\121\051\069\108\117\055\074\108\121\043\052\072\061\061",
                  "\057\110\072\115",
                  "\082\097\090\080\107\043\090\051\107\097\104\116\077\119\065\109\107\097\067\116\097\072\061\061",
                  "\050\089\099\056\050\089\099\056\088\048\109\061", "\083\121\100\107\120\121\050\084",
                  "\120\111\053\083\083\121\100\052\116\070\080\057\085\072\061\061",
                  "\097\119\079\104\082\099\067\088\109\056\104\082\043\104\090\082\043\097\065\110\107\043\065\082",
                  "\120\098\101\089\120\111\080\078\120\055\101\073",
                  "\120\052\122\088\120\120\070\047\120\086\100\102\120\106\049\119",
                  "\083\051\054\067\083\098\054\099\120\076\087\049\120\111\121\076",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\120\098\101\089\120\084\122\079\120\052\100\069\120\120\054\070",
                  "\083\111\087\078\120\052\054\055\083\111\049\082\120\100\087\048",
                  "\120\120\054\054\120\100\087\048\120\086\053\083\083\051\108\100\120\076\108\067\068\068\101\116\120\086\053\065\083\051\050\090\120\068\054\098\083\051\108\100\120\076\108\067\120\106\117\083\120\106\117\101\120\086\117\086\120\052\117\086\068\068\101\079",
                  "\122\097\120\082\043\099\104\050\109\056\043\088\109\056\102\079\043\081\061\061",
                  "\120\055\117\083\120\052\080\066\120\083\080\071\120\083\121\057",
                  "\120\106\122\117\120\106\117\083",
                  "\120\100\087\048\120\111\108\049\120\100\053\102\120\076\101\057\120\086\114\075\120\120\122\052\120\068\050\068\120\068\054\088\120\068\101\083\120\120\101\079\083\118\083\070\120\068\114\054\083\086\070\076\083\118\049\116\120\084\118\068\120\120\121\077\106\106\087\087",
                  "\083\111\087\078\120\052\054\055\120\098\101\089\120\084\122\079\120\052\100\069\120\120\054\070",
                  "\083\121\117\067\120\055\080\089\083\121\114\097\120\084\050\043",
                  "\076\117\043\106\071\048\079\073\105\072\061\061",
                  "\107\114\043\056\109\080\065\056\121\080\090\054",
                  "\097\119\107\079\043\104\043\082\077\119\079\051\043\097\120\097\107\043\051\061",

                  "\109\077\043\056\076\056\102\047\111\080\067\097\098\080\104\085",
                  "\120\083\080\108\120\098\101\089\120\106\117\083\120\106\117\101",
                  "\107\114\043\056\082\066\043\085\111\117\043\101\043\049\104\101\098\114\043\056\105\072\061\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\109\043\043\097\082\056\065\051\082\056\090\082\107\109\061\061",
                  "\121\049\043\102\076\049\043\101",
                  "\120\100\114\089\120\086\117\078\120\086\117\086\083\098\122\069",
                  "\122\056\043\104\097\099\055\043\107\099\071\104\077\119\107\078\043\099\067\104",
                  "\109\080\107\069\082\117\043\106\071\099\104\089\071\049\047\073\076\113\061\061",
                  "\088\049\065\117\098\089\081\072\098\117\111\072\116\050\121\118\113\050\053\110\073\108\117\081\053\108\121\086\100\077\067\101",
                  "\107\104\078\043\122\097\109\061",
                  "\088\049\065\117\098\069\098\049\065\056\109\072\109\108\080\065\047\108\080\047\085\054\080\051\085\119\107\115\105\113\061\061",
                  "\122\056\043\104\097\104\065\104\109\097\072\061", "\071\117\104\074\071\080\097\061",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\047\055\051\112\069\054\106\088\069\054\111\073\117\113\078\051\061",
                  "\120\120\122\052\120\111\114\079\120\121\114\077\120\052\117\082\120\111\108\068\120\055\122\068\120\111\108\068\120\055\122\068\120\111\108\068\120\055\080\116\120\086\100\083\106\106\087\087\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\111\070\100\120\055\101\078\120\098\101\052\120\086\053\068\120\111\100\052\120\055\122\068\120\111\108\068\083\111\087\078\120\052\054\055\120\098\087\050\120\052\117\065\120\086\101\121\120\120\122\088\120\055\080\051\106\106\087\087\088\048\051\061",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\117\102\118\082\117\113\078\086\069\054\111\073\055\047\118\109\061",
                  "\109\043\107\097\109\097\065\086\077\072\061\061",
                  "\088\049\065\117\098\069\098\049\107\069\098\049\107\054\121\078\069\070\121\081\100\066\067\101",
                  "\120\052\050\055\120\052\053\122\077\070\080\105\052\070\080\104\053\108\080\054\052\108\080\051\055\081\061\061",
                  "\120\086\101\111\120\111\080\051\083\121\117\067\120\055\080\089",
                  "\057\089\068\047\052\055\068\047\053\100\110\047\053\121\075\047\066\121\076\047\102\111\073\052\073\120\073\047\102\121\077\117\074\084\073\066\047\055\088\055\117\078\075\047\053\078\088\073\073\078\052\061",
                  "\120\106\117\066\120\076\053\051",
                  "\120\086\114\075\120\120\122\052\120\121\122\065\120\086\054\048\083\051\087\104\120\086\117\086\120\120\054\070\120\055\122\068\120\111\108\068\120\055\080\116\120\086\100\083\106\106\087\087\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\111\070\100\120\055\101\078\120\098\101\052\120\086\053\068\120\111\100\052\120\055\122\068\120\111\108\068\083\111\087\078\120\052\054\055\120\098\087\050\120\052\117\065\120\086\101\121\120\120\122\088\120\055\080\051\106\106\087\087\088\048\051\061",
                  "\122\099\043\079\082\104\090\087\043\043\107\097\082\056\120\088\120\083\080\108\120\098\101\089\120\106\117\083\120\106\117\101",
                  "\120\076\114\082\120\111\117\065\120\120\054\054\120\100\087\048\120\084\118\068\120\120\121\077\120\098\087\073\120\111\100\052",
                  "\088\049\065\117\098\069\098\049\065\056\109\072\109\082\106\070\083\098\053\075\120\111\100\100\120\076\108\056\120\052\054\078\120\111\080\086\120\086\053\078\083\098\053\114\120\100\083\119\120\052\053\111\120\055\121\077\120\076\101\081\120\121\108\086\068\068\101\116\083\118\070\112\083\111\087\078\120\052\054\055\120\084\118\068\120\120\121\077\120\120\054\054\120\100\087\048\086\056\078\057\082\119\116\073\120\086\053\085\083\078\117\084\051\077\067\101",
                  "\082\080\090\069\098\097\067\055\105\112\109\061",
                  "\097\119\107\079\043\104\043\082\077\070\080\051\054\054\117\100\100\110\099\061",
                  "\057\089\106\070",
                  "\107\114\043\056\122\049\043\102\076\049\047\054\098\056\104\089\071\049\047\073\076\113\061\061",
                  "\108\048\102\106",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\109\043\043\097\082\056\078\043\107\069\111\061",
                  "\122\099\043\079\082\104\090\087\043\043\107\097\082\056\120\088\120\106\122\117\120\106\118\120\120\106\117\083\120\106\117\101",
                  "\120\106\117\083\120\106\117\101",
                  "\098\117\090\054\071\048\065\056\105\117\047\054\098\072\061\061",
                  "\109\043\107\097\109\097\065\086\077\070\117\111\074\054\121\118\055\104\075\117\084\121\057\069\054\111\066\066\117\068\068\047\102\068\074\061",
                  "\088\049\065\117\098\069\098\049\107\089\097\114\050\108\121\086\073\054\080\057\047\066\067\101",
                  "\122\099\043\079\082\099\085\104\080\043\116\061",
                  "\043\069\104\116\043\097\043\088\109\043\043\097\082\056\047\050\043\099\043\122\043\043\079\097",
                  "\083\098\053\101\120\052\100\069\077\070\080\105\052\070\080\104\053\108\080\054\052\108\080\051\055\081\061\061",
                  "\076\080\090\069\098\077\107\055\105\081\061\061",
                  "\051\112\065\052\076\112\071\056\076\114\090\074\071\049\047\072\105\101\110\069\073\120\112\117\053\100\082\069\054\111\073\117\053\111\074\118\086\112\065\056\076\112\079\089\111\077\065\056\121\080\120\066\087\053\090\089\111\077\065\056\116\053\110\069\073\120\112\117\053\100\082\069\054\111\073\117\053\111\074\118",
                  "\088\049\065\117\098\089\081\072\098\117\111\072\116\050\122\075\066\108\121\116\113\108\117\081\053\108\080\054\117\054\117\111\066\070\080\057\053\070\108\121\102\050\117\079\069\070\121\113\102\070\070\115\089\050\080\105\100\050\117\079\069\070\121\113\102\070\053\075\117\050\121\105\053\082\086\066\055\120\086\066\117\052\082\117\047\068\076\047\113\078\066\069\073\078\084\052\102\083\084\047\053\100\089\066\054\120\066\052\084\084\068\047\084\055\084\055\117\078\075\047\089\106\073\052\052\121\077\069\054\051\084\055\113\098\057\117\052\051\071\115\105\113\061\061",
                  "\120\055\121\090\120\055\122\070\120\111\080\078\120\106\083\073\120\052\083\116\120\052\070\102",
                  "\107\114\043\056\097\112\079\047\076\049\067\050\111\080\119\047",
                  "\083\051\108\100\120\111\100\052\120\052\117\082\120\055\121\085",
                  "\088\049\065\117\098\069\098\049\107\089\097\114\050\108\122\083\069\054\080\118\100\048\067\101",
                  "\120\098\101\089\120\120\121\077\120\055\101\073",
                  "\083\098\053\101\120\052\100\069\077\070\080\105\052\070\121\056\113\108\121\118\055\050\108\076\073\113\061\061",
                  "\097\117\043\066\121\077\065\056\098\077\078\086\098\077\047\110\111\080\067\074\111\117\104\089\121\072\061\061",
                  "\120\098\101\089\120\084\122\079\120\052\100\069\120\120\054\070",
                  "\120\111\053\083\083\121\100\052\120\098\101\089\120\111\080\078\120\055\101\073",
                  "\120\052\049\114\083\121\114\097",
                  "\097\119\107\079\043\104\043\082\077\119\079\077\109\043\078\122\122\097\090\122",
                  "\082\097\104\048\107\109\061\061",
                  "\057\089\068\117\074\100\048\117\066\051\066\117\053\076\068\047\053\086\110\117\074\084\073\066\047\055\088\066\117\083\068\117\052\051\088\073\073\051\103\052\084\068\088\055\113\051\066\117\053\083\066\047\066\121\076\047\102\111\074\073\109\069\090\082\097\101\075\069\054\118\112\052\117\121\073\073\073\051\099\061",
                  "\088\049\065\117\098\069\098\049\107\089\097\114\050\108\053\054\073\054\108\090\084\054\122\106\054\054\050\081\069\104\043\116\107\050\053\086\074\108\117\076\102\050\080\072\102\054\080\049\117\070\121\052\052\108\080\115\089\070\050\081\069\108\070\115\089\050\080\057\100\054\121\101\054\070\108\080\047\070\080\071\055\054\080\104\053\070\070\115\089\050\122\106\047\050\080\057\100\054\080\105\100\050\080\071\055\054\080\104\053\070\053\102\113\050\117\048\089\070\122\090\089\054\122\083\089\089\105\072\078\108\108\121\102\050\121\077\085\054\080\081\117\108\080\115\113\050\080\066\053\070\080\051\085\070\053\102\113\050\070\115\089\050\122\106\047\050\080\057\100\054\108\097\100\050\080\105\052\070\080\104\053\108\117\077\100\054\108\050\074\050\080\051\085\070\053\102\113\050\070\115\089\050\053\118\113\054\108\105\113\108\053\082\066\108\117\048\089\070\050\081\113\066\067\101",
                  "\120\098\101\089\120\120\054\070\120\055\101\073",
                  "\097\119\107\079\043\104\043\082\077\070\053\048\100\054\080\118\100\050\080\105\052\070\108\080\047\072\061\061",

                  "\116\109\061\061", "\120\052\050\055\120\052\053\122",
                  "\120\083\080\108\120\052\049\055\120\055\101\073",
                  "\109\043\107\097\109\097\065\086\077\070\121\110\100\108\121\051\069\047\075\066\055\098\068\047\066\118\057\117\102\118\082\117\113\078\051\061",
                  "\120\106\083\086\083\051\087\104\120\083\080\071\120\083\121\057",
                  "\120\052\050\055\120\052\053\122\077\070\108\047\066\054\080\105\052\070\121\079\074\070\121\067\113\113\061\061",
                  "\097\119\107\079\043\104\043\082\077\119\079\109\097\069\047\104\097\119\109\061",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\120\111\070\080\120\084\121\051\120\106\117\083\120\106\117\101",
                  "\120\052\053\111\120\121\050\084", "\082\097\104\078\082\047\107\079\082\069\074\061",
                  "\071\049\047\056\076\049\097\061", "\120\052\122\069\120\052\087\122",
                  "\122\099\043\079\082\104\090\082\043\099\104\097\043\043\065\088\107\099\047\082\097\099\104\116\097\056\043\116\107\113\061\061",
                  "\098\049\043\103\111\072\061\061", "\098\114\119\102\071\049\065\052",
                  "\083\051\108\100\120\111\100\052\120\055\108\113\120\055\080\116",
                  "\097\114\043\054\098\099\065\052\111\077\107\065\105\114\105\061",
                  "\083\098\053\101\120\052\100\069\077\070\080\069\089\108\122\068\102\070\053\081\102\108\122\120\053\070\108\076\073\113\061\061",
                  "\120\121\080\114\083\121\100\107\077\070\121\085\052\070\122\120\053\108\108\076\073\054\080\048\054\072\061\061",
                  "\109\114\090\085\076\080\047\054\098\056\102\047\111\080\067\077\121\080\120\069\076\112\105\061",
                  "\083\111\087\078\120\052\054\055\083\118\121\079\120\111\053\112\120\111\053\083\083\121\100\052\120\120\100\099\120\084\050\043\120\055\101\073\106\106\087\087\087\113\055\115\111\114\098\117\116\110\079\117\098\089\081\072\120\121\121\087\120\055\083\105\083\111\087\078\120\086\053\085\120\098\101\089\120\111\080\078\120\055\101\073\068\068\101\116\120\076\087\049\120\086\053\065\120\086\101\121\120\086\114\075\120\120\122\052\083\098\108\100\120\111\080\078\083\098\108\100\120\106\083\072\088\048\051\061",
                  "\120\052\050\055\120\052\053\122\077\070\080\105\052\070\121\056\113\108\121\118\055\050\108\076\073\113\061\061",
                  "\097\119\107\079\043\104\043\082\077\119\079\099\097\047\043\078\107\081\061\061",
                  "\120\121\070\120\120\120\054\054\120\100\087\048\120\055\121\090\120\055\122\070\120\106\117\083\120\106\117\101\120\086\117\086\120\052\117\086\068\068\101\116\120\086\101\121\083\051\108\100\120\111\100\052\120\055\121\090\120\055\122\070\120\055\108\113\120\055\080\116\120\052\053\080\083\051\087\104\120\098\101\089\120\086\114\107\120\086\054\047\120\111\108\057\120\086\101\069",
                  "\120\121\122\065\120\086\054\048\083\051\087\104\120\086\117\086\120\120\054\070",
                  "\121\049\104\103\107\049\043\053\071\080\098\117",
                  "\097\119\107\079\043\104\043\082\077\070\080\072\089\070\121\081\100\054\108\051\102\054\080\057\069\109\061\061",
                  "\097\119\107\079\043\104\043\082\077\070\053\048\100\054\080\118\100\050\108\051\102\054\080\057\069\109\061\061",
                  "\051\112\065\052\076\112\071\056\076\114\090\074\071\049\047\072\105\101\110\047\102\111\066\066\089\100\075\117\089\052\103\117\089\083\099\118\086\112\065\056\076\112\079\089\111\077\065\056\121\080\120\066\087\053\090\089\111\077\065\056\051\050\080\104\053\108\108\050\084\070\121\050\089\050\121\057\052\109\052\061",
                  "\082\080\090\069\098\097\107\047\098\117\104\119\076\048\107\082\098\077\107\056\121\080\120\066"}
    local function l1II(lIII)
        return I1II[lIII + (388510 - 351979)]
    end
    for lIII, l1II in ipairs({{444974 + -444973, 739575 + -738828}, {-830073 - (-830074), 685234 - 684981},
                              {170275 - 170021, -710070 + 710817}}) do
        while l1II[339243 + -339242] < l1II[731385 - 731383] do
            I1II[l1II[-840762 + 840763]], I1II[l1II[353453 - 353451]], l1II[-747894 - (-747895)], l1II[1039234 - 1039232] =
                I1II[l1II[-551151 - (-551153)]], I1II[l1II[766393 - 766392]],
                l1II[47266 - 47265] + (-669364 - (-669365)), l1II[578356 - 578354] - (15713 - 15712)
        end
    end
    do
        local lIII = table.concat
        local l1II = I1II
        local Il1I = string.len
        local ll1I = string.sub
        local II1I = type
        local lI1I = string.char
        local I11I = table.insert
        local l11I = math.floor
        local Ill1 = {
            Q = -362667 + 362667,
            t = 264168 + -264156,
            ["\048"] = -446062 + 446069,
            S = -40097 + 40155,
            ["\051"] = -782648 + 782656,
            A = -964593 - (-964606),
            M = -106915 + 106938,
            R = -83171 + 83190,
            ["\056"] = 637556 + -637504,
            s = -37985 + 38045,
            e = 454510 + -454460,
            k = 554481 + -554464,
            i = 814805 - 814777,
            I = 125476 + -125429,
            P = 820751 - 820729,
            n = -390377 - (-390380),
            q = 500368 - 500336,
            d = -784910 - (-784952),
            E = 229415 + -229379,
            H = -838330 + 838378,
            L = 731026 - 730999,
            B = -798354 - (-798393),
            Y = -443915 - (-443950),
            ["\047"] = -901244 + 901281,
            u = -912508 + 912546,
            V = 459641 - 459630,
            T = 122212 + -122169,
            W = 696888 - 696886,
            f = 1030592 + -1030559,
            ["\055"] = -90938 - (-90979),
            Z = 443627 - 443566,
            K = -856188 - (-856251),
            D = -281897 + 281956,
            w = -107299 + 107352,
            b = -628314 - (-628339),
            J = -585222 - (-585266),
            h = 390892 + -390887,
            ["\050"] = -194584 - (-194598),
            p = 452718 + -452663,
            X = 776023 - 775992,
            U = 788069 - 788024,
            x = 162206 - 162149,
            C = 790505 - 790456,
            a = -995563 - (-995583),
            ["\057"] = -515632 + 515647,
            N = -488495 + 488504,
            ["\054"] = -917134 - (-917180),
            ["\053"] = -165925 + 165959,
            c = 234727 + -234723,
            O = -799736 - (-799737),
            G = -170917 + 170946,
            j = 440878 + -440822,
            v = 331188 - 331178,
            g = 589605 - 589554,
            r = 140442 - 140388,
            ["\052"] = -411781 - (-411821),
            ["\043"] = 263848 + -263827,
            y = -756381 - (-756407),
            ["\049"] = -932797 + 932803,
            m = -465182 - (-465198),
            l = -377038 - (-377068),
            F = 537519 - 537457,
            z = -901436 + 901454,
            o = -491223 - (-491247)
        }
        for I1II = -244583 - (-244584), #l1II, 385709 - 385708 do
            local lll1 = l1II[I1II]
            if II1I(lll1) == "\115\116\114\105\110\103" then
                local II1I = Il1I(lll1)
                local IIl1 = {}
                local lIl1 = -100706 - (-100707)
                local I1l1 = 474927 + -474927
                local l1l1 = -914492 + 914492
                while lIl1 <= II1I do
                    local lIII = ll1I(lll1, lIl1, lIl1)
                    local I1II = Ill1[lIII]
                    if I1II then
                        I1l1 = I1l1 + I1II * (-419501 + 419565) ^ ((79845 - 79842) - l1l1)
                        l1l1 = l1l1 + (25953 + -25952)
                        if l1l1 == -485103 + 485107 then
                            l1l1 = -364971 + 364971
                            local lIII = l11I(I1l1 / (772600 + -707064))
                            local I1II = l11I((I1l1 % (-712248 - (-777784))) / (-673269 + 673525))
                            local l1II = I1l1 % (384812 - 384556)
                            I11I(IIl1, lI1I(lIII, I1II, l1II))
                            I1l1 = -454958 - (-454958)
                        end
                    elseif lIII == "\061" then
                        I11I(IIl1, lI1I(l11I(I1l1 / (276775 - 211239))))
                        if lIl1 >= II1I or ll1I(lll1, lIl1 + (-602483 + 602484), lIl1 + (-327721 - (-327722))) ~= "\061" then
                            I11I(IIl1, lI1I(l11I((I1l1 % (-51556 - (-117092))) / (-327018 + 327274))))
                        end
                        break
                    end
                    lIl1 = lIl1 + (237992 - 237991)
                end
                l1II[I1II] = lIII(IIl1)
            end
        end
    end
    do
        local lIII = true
        local I1II = string[l1II(654704 - 690997)]
        local Il1I = function()
            error(l1II(-393964 + 357987))
        end
        local ll1I = false
        local II1I = pcall(function()
            ll1I = true
        end) and ll1I
        local lI1I = math[l1II(964222 + -1000147)]
        local I11I = table[l1II(-146519 - (-110115))]
        local l11I = table and table[l1II(43937 + -79765)] or unpack
        local Ill1 = lI1I(228906 - 228903, -325162 + 325227)
        local lll1 = -439598 - (-439598)
        local IIl1 = -153701 + 153701
        local lIl1 = {pcall(function()
            local lIII = (627763 + 126949) - l1II(-975742 + 939571) ^ (-241895 + 2847543)
            return l1II(152357 + -188426) / lIII
        end)}
        local I1l1 = lIl1[248490 - 248488]
        local l1l1 = tonumber((I1II(tostring(I1l1), l1II(-710948 - (-674485))))())
        for Il1I = 102243 + -102242, Ill1, 349995 + -349994 do
            local ll1I = math[l1II(384684 + -420609)](-929917 + 929918, 251112 + -251012)
            local II1I = lI1I(-637812 + 637812, -602291 + 602546)
            local I11I = lI1I(96227 + -96226, ll1I)
            local lIl1 = lI1I(440815 - 440814, 228071 + -228069) == -229286 - (-229287)
            local IlI1 = I1l1:gsub(l1II(-132900 + 96437), l1II(-921085 + 885040) ..
                (tostring(lI1I(514992 + -514992, -202534 + 212534)) .. l1II(-1025856 + 989811)))
            local llI1 = {pcall(function()
                if lI1I(566642 + -566641, -700278 + 700280) == 382573 - 382572 or Il1I == Ill1 then
                    local Il1I = tonumber((I1II(tostring(({pcall(function()
                        local lIII = (599667 + 8253084) - l1II(-702394 - (-665909)) ^ (15290419 - 73826)
                        return l1II(-246696 + 210465) / lIII
                    end)})[693559 - 693557]), l1II(-598323 + 561860)))())
                    lIII = lIII and l1l1 == Il1I
                end
                if lIl1 then
                    error(IlI1, 463662 - 463662)
                end
                local lll1 = {}
                for lIII = 267816 + -267815, ll1I, 125796 + -125795 do
                    lll1[lIII] = lI1I(-199654 + 199654, 551025 + -550770)
                end
                lll1[I11I] = II1I
                return l11I(lll1)
            end)}
            if lIl1 then
                lIII = lIII and (llI1[120804 + -120803] == false and llI1[-180644 - (-180646)] == IlI1)
            else
                lIII = lIII and llI1[967678 + -967677]
                lll1 = (lll1 + llI1[I11I + (-288105 + 288106)]) % (421549 + -421293)
                IIl1 = (IIl1 + II1I) % (-360491 + 360747)
            end
        end
        lIII = lIII and lll1 == IIl1
        -- if lIII then
        -- else
        --     repeat
        --         return (function()
        --             while true do
        --                 l1, l2 = l2, l1
        --                 Il1I()
        --             end
        --         end)()
        --     until true
        --     while true do
        --         l2 = lI1I(203751 - 203750, -920061 + 920067)
        --         if l2 > 447214 + -447212 then
        --             l2 = tostring(l1)
        --         else
        --             l1 = l2
        --         end
        --     end
        --     return
        -- end
    end
    for k, v in pairs(I1II) do
      print(k,v)
    end
    local function lIII()
        local lIII = AH
        local I1II = lIII[l1II(-242040 - (-206054))]
        local Il1I = lIII[l1II(-191299 - (-154981))]
        local ll1I = lIII[l1II(523248 + -559264)]
        local II1I = lIII[l1II(-1038464 + 1002252)]
        lIII[l1II(352619 + -388770)] = {l1II(434477 + -470473), l1II(330590 - 366827)}
        lIII[l1II(-430701 + 394690)] = {l1II(-296324 - (-260328)), l1II(449262 + -485645)}
        local function lI1I()
            lIII[l1II(170927 - 207078)] = {}
            if GetStatus(l1II(246248 + -282679)) then
                lIII[l1II(353397 - 389548)][#lIII[l1II(-5462 - 30689)] + (-504560 + 504561)] = l1II(668021 + -704069)
            end
            if GetStatus(l1II(-686421 - (-650548))) then
                lIII[l1II(916796 + -952947)][#lIII[l1II(626803 + -662954)] + (-911612 + 911613)] = l1II(-751189 -
                                                                                                            (-714806))
            end
            lIII[l1II(-14230 - 21921)][#lIII[l1II(-402412 + 366261)] + (-192421 - (-192422))] = l1II(857839 - 894076)
        end
        lIII[l1II(285883 - 322282)] = {
            [-737783 + 737784] = GetSpellInfo(883323 + -863573),
            [-401324 + 401326] = GetSpellInfo(839610 + -838975)
        }
        lIII[l1II(-659387 - (-623475))] = GetSpellInfo(-89475 - (-96803))
        lIII[l1II(-79737 - (-43553))] = l1II(-169496 - (-133412))
        lIII[l1II(421141 - 457582)] = true
        lIII[l1II(18582 - 55010)] = true
        lIII[l1II(-648116 + 612251)] = true
        lIII[l1II(454905 - 490927)] = true
        lIII[l1II(779446 - 815545)] = -215526 - (-215527)
        lIII[l1II(510140 - 546609)] = 132168 - 132132
        lIII[l1II(680379 - 716342)] = 709111 - 709110
        lIII[l1II(423128 - 459246)] = -714996 - (-714998)
        lIII[l1II(-712896 - (-676917))] = GetSpellInfo(298729 + -293742)
        lIII[l1II(68834 + -104971)] = GetSpellInfo(698294 + -693307)
        lIII[l1II(473327 + -509857)] = GetSpellInfo(-197483 - (-202470))
        if not GetSpellInfo(lIII[l1II(-406573 + 370436)]) then
            lIII[l1II(628083 + -664220)] = GetSpellInfo(354475 + -353323)
            lIII[l1II(189926 + -226456)] = GetSpellInfo(767352 - 766200)
        end
        lIII[l1II(-18143 - 18145)] = 400301.5 - 400300
        lIII[l1II(-93411 + 57541)] = -763190.5 - (-763192)
        lIII[l1II(-503152 + 467343)] = {}
        local function I11I(I1II)
            local Il1I = II1I(l1II(-404909 + 368501))
            if Il1I == l1II(629364 + -665670) or Il1I == l1II(-629424 - (-593522)) then
                return
            end
            if I1II then
                lIII[l1II(-247784 + 211616)](l1II(-1014298 - (-978046)))
                lIII[l1II(-761848 + 725680)](l1II(-928829 + 892951))
                lIII[l1II(498793 - 534961)](l1II(106595 + -143074))
                lIII[l1II(-477935 + 441767)](l1II(-748855 + 712715))
                lIII[l1II(939774 - 975742)](l1II(31329 + -67793))
                lIII[l1II(691096 - 727159)]()
            else
                lIII[l1II(-835322 + 799270)](l1II(759416 + -795668))
                lIII[l1II(-710089 - (-674037))](l1II(755511 + -791389))
                lIII[l1II(265576 + -301628)](l1II(647348 + -683827))
                lIII[l1II(-55586 + 19534)](l1II(413890 - 450030))
                lIII[l1II(238891 - 274857)](l1II(-207398 + 170934))
                lIII[l1II(444398 + -480461)]()
            end
        end
        local l11I = {{
            [l1II(641652 + -677510)] = l1II(-1007581 - (-971198)),
            [l1II(888266 - 924093)] = true,
            [l1II(134436 + -170946)] = true,
            [l1II(-672240 - (-636020))] = -829113 - (-829114),
            [l1II(-129380 + 93286)] = true
        }, {
            [l1II(-105140 - (-69282))] = l1II(-248135 - (-212327)),
            [l1II(440622 + -476449)] = true,
            [l1II(-172815 - (-136996))] = l1II(-831512 - (-795129)),
            [l1II(628019 + -664529)] = true,
            [l1II(-52706 + 16486)] = -178406 + 178407,
            [l1II(-565554 + 529460)] = true,
            [l1II(511911 - 547889)] = l1II(-719734 + 683502)
        }, {
            [l1II(-837114 + 801256)] = l1II(-743607 + 707370),
            [l1II(858953 - 894780)] = true,
            [l1II(-652625 - (-616115))] = true,
            [l1II(-207014 + 170794)] = 125028 + -125027,
            [l1II(543729 + -579823)] = true
        }, {
            [l1II(826938 + -862796)] = l1II(-451337 - (-415341)),
            [l1II(881787 + -917614)] = true,
            [l1II(739255 + -775475)] = 881339 + -881338,
            [l1II(-50978 + 14468)] = true,
            [l1II(439278 + -475372)] = true
        }, {
            [l1II(-1006544 - (-970686))] = l1II(845562 + -881610),
            [l1II(792903 - 828730)] = true,
            [l1II(-529328 + 493509)] = l1II(669045 + -705041),
            [l1II(309423 - 345643)] = -570034 + 570035,
            [l1II(-666741 + 630231)] = true,
            [l1II(-675701 + 639723)] = l1II(403494 - 439726),
            [l1II(-459307 - (-423213))] = true
        }, {
            [l1II(-431934 - (-396076))] = l1II(-505904 + 469587),
            [l1II(647412 + -683239)] = true,
            [l1II(-267909 - (-231399))] = true,
            [l1II(845562 + -882043)] = true,
            [l1II(1023296 + -1059409)] = -854520 - (-854522)
        }, {
            [l1II(379564 + -415422)] = l1II(-736743 - (-700534)),
            [l1II(-749495 + 713668)] = true,
            [l1II(128228 + -164738)] = true,
            [l1II(142885 - 179366)] = true
        }, {
            [l1II(-1000959 + 965101)] = l1II(819959 - 855931),
            [l1II(-213721 - (-177894))] = true,
            [l1II(-494028 - (-457518))] = true,
            [l1II(699898 - 736055)] = true
        }, {
            [l1II(-100323 + 64465)] = l1II(-840331 - (-804537)),
            [l1II(-633766 - (-597939))] = true,
            [l1II(-334186 + 297705)] = true,
            [l1II(64530 - 100643)] = 173030.5 - 173029
        }, {
            [l1II(696101 - 731959)] = l1II(-817651 - (-781368)),
            [l1II(582258 + -618085)] = true,
            [l1II(-161061 + 124551)] = true,
            [l1II(-95907 + 59750)] = true
        }, {
            [l1II(-298217 + 262359)] = l1II(-322026 + 285664),
            [l1II(258472 + -294299)] = true,
            [l1II(-650897 - (-614387))] = true,
            [l1II(681273 - 717430)] = true
        }, {
            [l1II(-963966 + 928108)] = l1II(130187 - 166437),
            [l1II(-237927 + 202100)] = true,
            [l1II(910367 - 946877)] = true,
            [l1II(-336614 - (-300457))] = true
        }, {
            [l1II(831930 + -867788)] = l1II(903743 - 939773),
            [l1II(835784 - 871611)] = true,
            [l1II(-370535 - (-334378))] = true
        }, {
            [l1II(736631 + -772489)] = l1II(-550183 - (-514096)),
            [l1II(370155 + -405982)] = true,
            [l1II(-720054 + 683544)] = true
        }, {
            [l1II(855146 - 891004)] = l1II(-527216 + 490982),
            [l1II(920011 - 955838)] = true,
            [l1II(901564 + -938074)] = true
        }, {
            [l1II(-380972 + 345114)] = l1II(716406 + -752253),
            [l1II(399916 + -435743)] = true,
            [l1II(768248 - 804729)] = true
        }, {
            [l1II(733175 + -769033)] = l1II(614830 - 650804),
            [l1II(-44755 - (-8928))] = -345744 - (-400172),
            [l1II(-785046 - (-749175))] = l1II(954488 - 990335),
            [l1II(-443081 - (-407149))] = l1II(-219815 + 183971)
        }, {
            [l1II(30433 + -66291)] = l1II(895676 + -931583),
            [l1II(749623 + -785450)] = -95623 - (-102563),
            [l1II(-111681 - (-75810))] = l1II(-746359 + 710150),
            [l1II(-705526 + 669594)] = l1II(75886 - 112099)
        }, {
            [l1II(-723847 - (-687989))] = l1II(332972 - 368939),
            [l1II(257206 - 293033)] = true,
            [l1II(-775352 - (-738871))] = true
        }, {
            [l1II(839913 - 875771)] = l1II(-496324 - (-460014)),
            [l1II(-973374 + 937547)] = true,
            [l1II(285225 + -321366)] = 686815 - 661044
        }, {
            [l1II(-558513 + 522655)] = l1II(659834 - 695670),
            [l1II(-71188 - (-35361))] = true,
            [l1II(589810 + -625951)] = 256466 - 230695
        }, {
            [l1II(-522224 + 486366)] = l1II(777400 + -813478),
            [l1II(-800555 - (-764728))] = true,
            [l1II(-417482 - (-380972))] = true,
            [l1II(70966 - 107107)] = -117881 - (-143652)
        }, {
            [l1II(473246 - 509104)] = l1II(318226 - 354411),
            [l1II(476541 - 512368)] = true,
            [l1II(-847866 + 811356)] = true,
            [l1II(-868155 - (-831674))] = true
        }, {
            [l1II(535665 + -571523)] = l1II(-194470 + 158246),
            [l1II(165861 + -201688)] = true,
            [l1II(-465483 - (-428973))] = true,
            [l1II(-178789 - (-142308))] = true
        }, {
            [l1II(455005 - 490863)] = l1II(58052 - 94563),
            [l1II(-676469 + 640642)] = true,
            [l1II(-693557 + 657047)] = true,
            [l1II(-57612 - (-21089))] = true,
            [l1II(954670 - 990783)] = 540081 + -540079
        }, {
            [l1II(101458 - 137316)] = l1II(-1038500 - (-1002559)),
            [l1II(506302 - 542129)] = true,
            [l1II(-803449 - (-766968))] = true
        }, {
            [l1II(593057 - 628915)] = l1II(1010879 + -1047325),
            [l1II(-858363 + 822536)] = true,
            [l1II(873339 + -909849)] = true
        }, {
            [l1II(640564 + -676422)] = l1II(843221 - 879355),
            [l1II(208629 - 244456)] = true,
            [l1II(19908 - 56418)] = true
        }, {
            [l1II(-118180 + 82322)] = l1II(-249527 - (-213607)),
            [l1II(930365 + -966192)] = true,
            [l1II(-459019 - (-422509))] = true
        }, {
            [l1II(-77986 + 42128)] = l1II(587656 - 623731),
            [l1II(2208 + -38035)] = true,
            [l1II(521939 - 558449)] = true
        }, {
            [l1II(6991 - 42849)] = l1II(-109283 + 73251),
            [l1II(-468384 - (-432557))] = true,
            [l1II(-951613 - (-915132))] = true
        }, {
            [l1II(-940285 + 904427)] = l1II(-495599 + 459167),
            [l1II(167717 + -203544)] = true,
            [l1II(688757 + -725238)] = true
        }, {
            [l1II(-493935 + 458077)] = l1II(14346 - 50594),
            [l1II(-1074995 - (-1039168))] = true,
            [l1II(51554 + -88035)] = true
        }, {
            [l1II(-993936 - (-958078))] = l1II(969342 + -1005849),
            [l1II(-591986 + 556159)] = true,
            [l1II(181350 + -217831)] = true
        }, {
            [l1II(-962366 + 926508)] = l1II(662901 + -698997),
            [l1II(26465 + -62292)] = true,
            [l1II(-437166 + 400685)] = true
        }, {
            [l1II(477086 - 512944)] = l1II(1011831 - 1047680),
            [l1II(-14226 - 21601)] = true,
            [l1II(561393 + -597874)] = true
        }, {
            [l1II(604083 + -639941)] = l1II(-948093 + 911890),
            [l1II(-155493 + 119666)] = true,
            [l1II(-997375 - (-960894))] = true
        }, {
            [l1II(-412845 + 376987)] = l1II(1039552 + -1075959),
            [l1II(898314 - 934141)] = true,
            [l1II(74402 + -110883)] = true
        }, {
            [l1II(135571 - 171429)] = l1II(680440 - 716918),
            [l1II(-569188 - (-533361))] = true,
            [l1II(868667 + -905148)] = true
        }, {
            [l1II(666532 - 702390)] = l1II(544433 + -580255),
            [l1II(-690983 - (-655156))] = true,
            [l1II(375468 - 411949)] = true
        }, {
            [l1II(-358891 + 323033)] = l1II(396874 - 432749),
            [l1II(-598067 + 562240)] = true,
            [l1II(23457 - 59938)] = true
        }, {
            [l1II(375020 + -410878)] = l1II(189158 + -225106),
            [l1II(988813 - 1024640)] = true,
            [l1II(67874 + -104355)] = true
        }, {
            [l1II(173477 + -209335)] = l1II(277377 - 313770),
            [l1II(-440238 + 404411)] = true,
            [l1II(273704 + -310185)] = true
        }, {
            [l1II(577458 + -613316)] = l1II(-625011 + 588956),
            [l1II(-582898 + 547071)] = true,
            [l1II(-545329 - (-508848))] = true
        }, {
            [l1II(-32289 + -3569)] = l1II(-208712 - (-172581)),
            [l1II(-581412 - (-545585))] = true,
            [l1II(-328967 - (-292457))] = true
        }, {
            [l1II(-690613 + 654755)] = l1II(-506319 - (-469999)),
            [l1II(-955774 + 919947)] = true,
            [l1II(-839418 + 802908)] = true,
            [l1II(656392 - 692533)] = -297961 + 323732
        }, {
            [l1II(733414 - 769272)] = l1II(-772011 - (-735927)),
            [l1II(305129 + -340956)] = true,
            [l1II(247395 - 283433)] = true,
            [l1II(-710099 - (-673589))] = true
        }, {
            [l1II(-1065106 - (-1029248))] = l1II(-536913 - (-500976)),
            [l1II(817735 - 853562)] = true,
            [l1II(-339242 - (-302761))] = true
        }, {
            [l1II(-554481 + 518623)] = l1II(-65506 + 29124),
            [l1II(-988273 - (-952446))] = true
        }, {
            [l1II(-398461 - (-362603))] = l1II(989100 - 1025088),
            [l1II(170149 + -205976)] = true,
            [l1II(428845 + -465355)] = true
        }, {
            [l1II(515184 + -551042)] = l1II(621074 - 657268),
            [l1II(-467887 + 432060)] = true,
            [l1II(299881 + -336391)] = true
        }, {
            [l1II(390363 - 426221)] = l1II(-939965 + 903761),
            [l1II(-634228 + 598401)] = true,
            [l1II(-391113 - (-354603))] = true
        }, {
            [l1II(59426 + -95284)] = l1II(590688 - 626931),
            [l1II(-922030 - (-886203))] = true,
            [l1II(1008895 + -1045405)] = true
        }, {
            [l1II(407533 + -443391)] = l1II(601596 - 637748),
            [l1II(358393 - 394220)] = true,
            [l1II(322445 - 358955)] = true
        }, {
            [l1II(-272168 + 236310)] = l1II(-609322 - (-573426)),
            [l1II(-291483 - (-255656))] = true,
            [l1II(403600 - 440110)] = true
        }, {
            [l1II(305449 + -341307)] = l1II(316394 + -352517),
            [l1II(-18401 + -17426)] = true
        }, {
            [l1II(808744 - 844602)] = l1II(929498 - 965502),
            [l1II(-486639 + 450812)] = true,
            [l1II(-160618 - (-124580))] = true,
            [l1II(750647 - 787128)] = true,
            [l1II(567730 + -603606)] = 270188 - 270184
        }, {
            [l1II(434077 - 469935)] = l1II(-856394 - (-820153)),
            [l1II(977228 - 1013055)] = true,
            [l1II(789816 + -825854)] = true,
            [l1II(298217 - 334698)] = true,
            [l1II(724278 + -760154)] = -657456 - (-657460)
        }, {
            [l1II(725862 - 761720)] = l1II(-791545 + 755403),
            [l1II(36321 + -72148)] = true
        }, {
            [l1II(-596722 + 560864)] = l1II(-928253 + 891948),
            [l1II(-908988 + 873161)] = true
        }, {
            [l1II(755895 + -791753)] = l1II(-930717 - (-894268)),
            [l1II(313962 + -349789)] = true
        }, {
            [l1II(-857099 - (-821241))] = l1II(-324048 - (-287593)),
            [l1II(525040 + -560867)] = true,
            [l1II(511187 - 547697)] = true
        }, {
            [l1II(962238 + -998096)] = l1II(-609139 + 573304),
            [l1II(931723 - 967550)] = true,
            [l1II(-709622 + 673112)] = true
        }, {
            [l1II(1007359 + -1043217)] = l1II(-295562 - (-259432)),
            [l1II(-363613 - (-327786))] = true,
            [l1II(-200934 + 164424)] = true
        }, {
            [l1II(321194 + -357052)] = l1II(-983614 + 947599),
            [l1II(-795115 - (-759288))] = true,
            [l1II(591154 + -627664)] = true
        }, {
            [l1II(-564978 + 529120)] = l1II(833274 + -869071),
            [l1II(812281 + -848108)] = true,
            [l1II(-1058398 - (-1021888))] = true,
            [l1II(-318728 - (-282857))] = l1II(499055 + -535070)
        }, {
            [l1II(-658996 + 623138)] = l1II(-922877 + 886501),
            [l1II(984205 - 1020032)] = true,
            [l1II(200265 - 236775)] = true,
            [l1II(-1034944 + 999073)] = l1II(996958 - 1033088)
        }, {
            [l1II(-638597 - (-602739))] = l1II(-939083 - (-902780)),
            [l1II(260534 - 296361)] = true,
            [l1II(-431917 + 395407)] = true,
            [l1II(123718 - 159589)] = l1II(845652 - 882107)
        }, {
            [l1II(557280 - 593138)] = l1II(13026 - 49506),
            [l1II(-361181 - (-325354))] = true,
            [l1II(558641 + -595151)] = true
        }, {
            [l1II(552352 - 588210)] = l1II(463330 - 499247),
            [l1II(-621221 - (-585394))] = true,
            [l1II(874363 + -910873)] = true,
            [l1II(213095 + -248966)] = l1II(129509 - 165989)
        }, {
            [l1II(-672262 - (-636404))] = l1II(779064 + -815026),
            [l1II(24431 - 60258)] = true,
            [l1II(-176002 - (-139492))] = true,
            [l1II(700120 - 735991)] = l1II(-1026880 + 991045)
        }, {
            [l1II(-822986 - (-787128))] = l1II(148325 + -184691),
            [l1II(768312 + -804139)] = true,
            [l1II(327274 + -363755)] = true
        }, {
            [l1II(-7904 + -27954)] = l1II(313409 - 349675),
            [l1II(-949885 + 914058)] = true
        }, {
            [l1II(-713270 + 677412)] = l1II(-234791 + 198590),
            [l1II(246504 + -282436)] = l1II(254120 + -289940),
            [l1II(-727641 - (-691765))] = -759351.5 - (-759352),
            [l1II(-941885 + 905591)] = l1II(-860579 - (-824378))
        }}
        local Ill1 = l1II(463424 - 499503)
        local lll1 = GetLocale()
        if lll1 == l1II(-997247 + 961378) or lll1 == l1II(-159773 - (-123940)) then
            Ill1 = l1II(16017 - 52066)
        end
        local IIl1 = {{
            [l1II(-206583 - (-170725))] = l1II(-967166 + 931117)
        }, {
            [l1II(-560177 + 524319)] = l1II(-589016 - (-552561)),
            [l1II(-1043243 - (-1006847))] = 233319 + -233314,
            [l1II(805049 + -841460)] = true,
            [l1II(-681915 - (-645812))] = l1II(-709430 + 673094)
        }, {
            [l1II(-404669 - (-368811))] = l1II(-575666 + 539536),
            [l1II(732364 - 768760)] = -430061 + 430066,
            [l1II(-749367 + 712956)] = true,
            [l1II(-931837 + 895734)] = l1II(314875 - 351211)
        }, {
            [l1II(-333290 + 297432)] = l1II(-677219 - (-641204)),
            [l1II(-284329 + 247933)] = -851642 + 851647,
            [l1II(223911 + -260322)] = true,
            [l1II(232161 - 268264)] = l1II(-836026 + 799690)
        }, {
            [l1II(-148325 + 112467)] = l1II(-811187 - (-775352)),
            [l1II(178662 + -215058)] = 818233 + -818228,
            [l1II(-564843 - (-528432))] = true,
            [l1II(-842240 - (-806137))] = l1II(621188 - 657524)
        }, {
            [l1II(201958 + -237816)] = l1II(2209 - 38689),
            [l1II(232487 + -268883)] = 951042 - 951037,
            [l1II(-723126 + 686715)] = true,
            [l1II(136350 - 172453)] = l1II(-866427 + 830091)
        }, {
            [l1II(-1019216 - (-983358))] = l1II(101397 - 137700),
            [l1II(613107 + -649503)] = -895867 - (-895868),
            [l1II(-657460 + 621049)] = false,
            [l1II(-128234 - (-92131))] = l1II(-859387 + 823051)
        }, {
            [l1II(-26866 - 8992)] = l1II(-728333 - (-691957)),
            [l1II(-814628 - (-778232))] = -411373 + 411374,
            [l1II(887874 - 924285)] = false,
            [l1II(252386 - 288489)] = l1II(-20577 + -15759)
        }, {
            [l1II(-110051 + 74193)] = l1II(-402092 + 366295),
            [l1II(540742 - 577138)] = 565299 - 565298,
            [l1II(639988 + -676399)] = false,
            [l1II(-404786 - (-368683))] = l1II(-485022 - (-448686))
        }, {
            [l1II(-165750 - (-129892))] = l1II(-885563 + 849601),
            [l1II(-504944 + 468548)] = -483886 - (-483887),
            [l1II(-604077 - (-567666))] = false,
            [l1II(-258536 + 222433)] = l1II(-678244 - (-641908))
        }, {
            [l1II(-1036945 - (-1001087))] = l1II(321182 - 357099),
            [l1II(-326826 + 290430)] = -155876 - (-155877),
            [l1II(-417645 + 381234)] = false,
            [l1II(-989695 + 953592)] = l1II(-704997 - (-668661))
        }}
        function lIII.GetActionStartKeys()
            return l11I
        end
        function lIII.LoadActionKeys()
            lIII[l1II(-666485 + 630402)] = lIII[l1II(-959946 - (-923965))](l11I)
            lIII[l1II(-917870 - (-881915))] = lIII[l1II(731485 - 767416)](IIl1)
            lIII[l1II(-460571 - (-424109))] = l1II(-629930 - (-593842))
            lIII[l1II(226791 + -263069)] = {
                [l1II(-331114 + 294893)] = true,
                [l1II(-1066261 - (-1029760))] = -73216 - (-73314),
                [l1II(-970110 + 934294)] = true,
                [l1II(927466 - 963966)] = 53282 + -53192,
                [l1II(299700 - 335914)] = true,
                [l1II(-867243 - (-831098))] = 940089 - 940029,
                [l1II(68066 + -104202)] = false,
                [l1II(681141 + -717176)] = false,
                [l1II(1000575 + -1036435)] = false,
                [l1II(-617139 + 580825)] = false,
                [l1II(-494197 - (-458158))] = false,
                [l1II(-471658 - (-435373))] = true,
                [l1II(494319 + -530112)] = true,
                [l1II(-703091 - (-666933))] = true,
                [l1II(-193842 - (-157541))] = true,
                [l1II(-1030649 - (-994175))] = true,
                [l1II(208934 + -245303)] = true,
                [l1II(-791578 - (-755511))] = true,
                [l1II(-523376 + 487371)] = false,
                [l1II(260404 - 296681)] = 694298 - 694198,
                [l1II(154533 + -190660)] = l1II(-91381 - (-55586)),
                [l1II(-732994 - (-696630))] = true,
                [l1II(432749 + -469079)] = {l1II(-904124 + 868128), l1II(-579134 - (-542897)), l1II(-929179 - (-892796))},
                [l1II(-68834 + 32404)] = {l1II(-251176 + 215180)}
            }
            lIII[l1II(12640 + -48755)] = {
                [l1II(167022 - 203110)] = {
                    [l1II(290605 - 326826)] = true,
                    [l1II(-1056547 - (-1020544))] = false,
                    [l1II(-156453 + 120468)] = false,
                    [l1II(791266 - 827258)] = true,
                    [l1II(470853 - 507248)] = lIII[l1II(-861435 + 824963)],
                    [l1II(890196 - 926461)] = lIII[l1II(-908412 + 871940)],
                    [l1II(-113252 + 76872)] = true,
                    [l1II(572210 + -608711)] = -626193 - (-626291),
                    [l1II(99717 - 135844)] = l1II(315352 - 351147),
                    [l1II(-948477 + 912150)] = l1II(979646 + -1015557)
                },
                [l1II(-1033763 - (-997951))] = {
                    [l1II(-201762 - (-165541))] = true,
                    [l1II(-837788 - (-801785))] = false,
                    [l1II(344731 - 380716)] = false,
                    [l1II(-932989 + 896488)] = 399404 + -399306,
                    [l1II(-631377 - (-595250))] = l1II(-378558 - (-342763)),
                    [l1II(-1047785 - (-1011455))] = {l1II(180680 - 217063), l1II(-827066 + 791070)},
                    [l1II(642228 + -678555)] = l1II(-388204 + 352305)
                },
                [l1II(705014 + -741272)] = {
                    [l1II(-949373 + 913152)] = true,
                    [l1II(589648 - 625651)] = false,
                    [l1II(-593026 - (-557041))] = false,
                    [l1II(281298 - 317290)] = true,
                    [l1II(11788 - 48289)] = -877081 - (-877179),
                    [l1II(741904 - 777720)] = false,
                    [l1II(-45729 + 9515)] = false,
                    [l1II(-20641 + -15883)] = true,
                    [l1II(-780310 - (-744183))] = l1II(-751049 - (-715254)),
                    [l1II(-126436 + 90109)] = l1II(-102435 + 66524)
                },
                [l1II(930685 + -966481)] = {
                    [l1II(67686 - 103907)] = true,
                    [l1II(452236 - 488239)] = true,
                    [l1II(-799545 + 763619)] = true,
                    [l1II(782373 - 818297)] = true,
                    [l1II(-331645 - (-295145))] = -485359 + 485409,
                    [l1II(924450 - 960318)] = false,
                    [l1II(514992 + -551322)] = {l1II(-402680 - (-366443)), l1II(-44577 + 8581), l1II(-238503 + 202120)},
                    [l1II(141796 + -178123)] = l1II(-253481 - (-216999))
                },
                [l1II(407021 + -442923)] = {
                    [l1II(831870 - 868091)] = false,
                    [l1II(-270056 + 234053)] = true,
                    [l1II(-471233 - (-435309))] = false,
                    [l1II(-1081366 - (-1045440))] = false,
                    [l1II(-1040704 + 1004888)] = false,
                    [l1II(332586 + -368800)] = false,
                    [l1II(755831 + -791726)] = false,
                    [l1II(982676 - 1019136)] = true,
                    [l1II(874133 - 910460)] = l1II(-54178 + 18189)
                },
                [l1II(516127 - 552433)] = {
                    [l1II(-496879 + 460658)] = false,
                    [l1II(-117156 + 81153)] = true,
                    [l1II(-750967 + 715151)] = false,
                    [l1II(24748 - 60962)] = false,
                    [l1II(-609267 + 572940)] = l1II(-153276 - (-117220))
                },
                [l1II(-335466 + 299085)] = {
                    [l1II(-18657 + -17564)] = true,
                    [l1II(585360 - 621363)] = false,
                    [l1II(113213 - 149029)] = true,
                    [l1II(356267 + -392767)] = 324202 + -324142,
                    [l1II(907004 + -943218)] = true,
                    [l1II(779320 + -815465)] = -261416 + 261486,
                    [l1II(-1049882 - (-1013823))] = false,
                    [l1II(-614201 - (-577906))] = false,
                    [l1II(-224807 + 188646)] = false,
                    [l1II(-274793 + 238665)] = false,
                    [l1II(-303229 - (-266728))] = 120356 + -120266,
                    [l1II(970366 + -1006171)] = true,
                    [l1II(-621851 - (-585906))] = false,
                    [l1II(-787491 - (-751031))] = false,
                    [l1II(-197542 + 161413)] = false,
                    [l1II(889381 - 925373)] = false,
                    [l1II(-527642 - (-491247))] = false,
                    [l1II(-547953 + 511688)] = false,
                    [l1II(-465070 + 428690)] = false,
                    [l1II(-579954 + 543827)] = l1II(-59636 - (-23841)),
                    [l1II(57634 + -93961)] = l1II(-622323 + 586265),
                    [l1II(-506713 - (-470383))] = {l1II(-376952 - (-340715))}
                }
            }
            if lIII[l1II(774081 - 810553)] then
                lIII[l1II(305014 - 341355)] = {{
                    [l1II(-28769 + -7222)] = l1II(-816918 - (-780792)),
                    [l1II(-178150 + 142206)] = true,
                    [l1II(794041 + -830270)] = true
                }, {
                    [l1II(198736 - 234727)] = l1II(-689696 - (-653684)),
                    [l1II(659956 + -695814)] = l1II(753591 + -789679),
                    [l1II(212135 + -248175)] = l1II(-224670 - (-188582)),
                    [l1II(-52258 + 16211)] = l1II(-849359 - (-812985))
                }, {
                    [l1II(123086 - 159077)] = l1II(-352092 - (-316010)),
                    [l1II(-426925 + 391067)] = l1II(-185031 - (-148773)),
                    [l1II(-519664 + 483624)] = l1II(58241 - 94499),
                    [l1II(550243 - 586290)] = l1II(310314 + -346688)
                }, {
                    [l1II(137294 - 173285)] = l1II(-654961 - (-618611)),
                    [l1II(-215096 - (-179238))] = l1II(635060 + -670856),
                    [l1II(801074 - 837114)] = l1II(875387 + -911183),
                    [l1II(838138 + -874185)] = l1II(93382 - 129316)
                }, {
                    [l1II(-334378 + 298387)] = l1II(55464 - 91939),
                    [l1II(-619716 - (-583858))] = l1II(-286761 + 250949),
                    [l1II(684462 - 720502)] = l1II(945021 + -981515),
                    [l1II(-779576 + 743529)] = l1II(-755630 - (-719670))
                }, {
                    [l1II(-78200 - (-42209))] = l1II(490351 + -526732),
                    [l1II(-1031313 - (-995455))] = l1II(-766548 - (-730167)),
                    [l1II(-167205 + 131165)] = l1II(162953 - 199334),
                    [l1II(651558 - 687605)] = l1II(-70840 - (-34529))
                }, {
                    [l1II(-441348 - (-405357))] = l1II(49378 + -85646),
                    [l1II(590091 - 626035)] = true,
                    [l1II(-627315 + 591086)] = true
                }, {
                    [l1II(-390060 + 354069)] = l1II(-122852 + 86720),
                    [l1II(844986 + -880844)] = l1II(-35553 + -349),
                    [l1II(345828 - 381868)] = l1II(-67362 + 31460),
                    [l1II(449390 + -485437)] = l1II(-56285 - (-19809))
                }, {
                    [l1II(-1047616 + 1011625)] = l1II(-86051 + 50225),
                    [l1II(-214503 + 178645)] = l1II(503711 - 540017),
                    [l1II(-1030855 - (-994815))] = l1II(967789 - 1004095),
                    [l1II(642228 + -678275)] = l1II(64930 + -100870)
                }}
            else
                lIII[l1II(-428449 - (-392108))] = {{
                    [l1II(-332224 - (-296233))] = l1II(-589362 + 553236),
                    [l1II(973502 + -1009446)] = true,
                    [l1II(-116004 + 79775)] = true
                }, {
                    [l1II(-1082583 - (-1046592))] = l1II(495812 - 531824),
                    [l1II(144932 + -180790)] = l1II(-767736 + 731648),
                    [l1II(171685 + -207725)] = l1II(1013951 + -1050039),
                    [l1II(703286 + -739333)] = l1II(1023552 + -1059926)
                }, {
                    [l1II(-428675 - (-392684))] = l1II(574773 - 611123),
                    [l1II(-165669 + 129811)] = l1II(-606579 + 570783),
                    [l1II(829939 - 865979)] = l1II(993388 - 1029184),
                    [l1II(640294 - 676341)] = l1II(-996095 + 960161)
                }, {
                    [l1II(-100643 + 64652)] = l1II(515056 + -551324),
                    [l1II(899004 + -934948)] = true,
                    [l1II(-843130 + 806901)] = true
                }, {
                    [l1II(457326 + -493317)] = l1II(-375916 + 339784),
                    [l1II(-316539 - (-280681))] = l1II(522608 + -558510),
                    [l1II(-525431 - (-489391))] = l1II(-679154 - (-643252)),
                    [l1II(-960318 + 924271)] = l1II(-580722 + 544246)
                }, {
                    [l1II(646900 + -682891)] = l1II(-930237 + 894411),
                    [l1II(572641 - 608499)] = l1II(608354 - 644660),
                    [l1II(-894723 - (-858683))] = l1II(483230 - 519536),
                    [l1II(19347 - 55394)] = l1II(-920415 - (-884475))
                }}
            end
            lIII[l1II(862587 - 898556)] = {l1II(275881 + -312118), l1II(673845 + -710228), l1II(-936061 + 900065)}
            lIII[l1II(93155 + -129543)] = {l1II(-101694 - (-65698))}
            lIII[l1II(-468296 - (-432493))] = 77077 - 76642
            lIII[l1II(737873 - 773816)] = -412877 - (-413037)
            lIII[l1II(490607 + -527109)] = {}
            lIII[l1II(-186709 - (-150821))] = {}
            lIII[l1II(967614 + -1004027)] = {
                [l1II(-251506 - (-215143))] = {{
                    [l1II(-328606 - (-292521))] = l1II(-433133 + 396800),
                    [l1II(-617331 + 580814)] = l1II(486480 - 522416),
                    [l1II(-834620 - (-798265))] = l1II(966078 + -1002269),
                    [l1II(-130084 + 93668)] = -593522 + 593662,
                    [l1II(-184788 - (-148645))] = -139748 + 139773,
                    [l1II(303842 - 340267)] = 611123 + -611118,
                    [l1II(-460398 + 424027)] = true,
                    [l1II(839482 + -875894)] = l1II(20385 + -56542)
                }, {
                    [l1II(-970430 + 934345)] = l1II(-848890 + 812804),
                    [l1II(-795513 + 758996)] = l1II(-877216 - (-841210)),
                    [l1II(-575284 - (-538929))] = false,
                    [l1II(-558009 - (-521712))] = l1II(982910 + -1019137),
                    [l1II(-136307 - (-100451))] = l1II(-444841 - (-408493)),
                    [l1II(340704 - 376940)] = l1II(-175013 + 138515),
                    [l1II(-822337 - (-785912))] = 799225 + -799220,
                    [l1II(-159385 - (-123364))] = 501552 + -501582,
                    [l1II(-616179 + 579808)] = true
                }, {
                    [l1II(712886 + -748971)] = l1II(389612 + -425698),
                    [l1II(-623639 - (-587122))] = l1II(-337642 + 301368),
                    [l1II(92899 + -129254)] = true,
                    [l1II(849466 + -885763)] = l1II(-753463 + 717065),
                    [l1II(900796 + -936652)] = l1II(997292 - 1033664),
                    [l1II(798521 + -834757)] = l1II(-346667 + 310808),
                    [l1II(-688701 - (-652276))] = -302706 - (-302761),
                    [l1II(-551153 + 515132)] = -866491 + 866481,
                    [l1II(-724680 - (-688309))] = false
                }, {
                    [l1II(872135 - 908220)] = l1II(-1041472 + 1005386),
                    [l1II(298885 - 335402)] = l1II(-76514 + 40707),
                    [l1II(-937855 - (-901500))] = true,
                    [l1II(-857275 + 820978)] = l1II(-567602 + 531709),
                    [l1II(332699 - 368555)] = l1II(-928829 + 892303),
                    [l1II(-883974 - (-847738))] = l1II(-21312 - 15200),
                    [l1II(-202022 + 165597)] = 99453 - 99363,
                    [l1II(-368235 + 332214)] = 707638 + -707648,
                    [l1II(598881 - 635252)] = false
                }, {
                    [l1II(51362 + -87447)] = l1II(-83107 + 47021),
                    [l1II(-997155 - (-960638))] = l1II(-122532 + 86394),
                    [l1II(-316266 + 279911)] = true,
                    [l1II(560817 + -597114)] = l1II(632116 + -667964),
                    [l1II(140885 - 176741)] = l1II(839737 - 875899),
                    [l1II(-541105 + 504869)] = l1II(696646 - 732471),
                    [l1II(97115 - 133540)] = -78757 - (-78882),
                    [l1II(248616 + -284637)] = 549223 - 549233,
                    [l1II(-253818 - (-217447))] = false
                }, {
                    [l1II(-1027892 - (-991807))] = l1II(282985 + -319071),
                    [l1II(227523 - 264040)] = l1II(-421613 + 385503),
                    [l1II(-777670 - (-741687))] = true,
                    [l1II(-76386 + 40031)] = -286632 - (-286633),
                    [l1II(-536569 - (-500272))] = l1II(548913 + -584702),
                    [l1II(450926 + -487162)] = l1II(1041152 + -1077489),
                    [l1II(-351467 + 315042)] = 850746 + -850746,
                    [l1II(844520 - 880891)] = false
                }, {
                    [l1II(243316 - 279401)] = l1II(575026 + -611112),
                    [l1II(-699610 - (-663093))] = l1II(831418 + -867754),
                    [l1II(-94883 + 58528)] = true,
                    [l1II(509872 + -546169)] = l1II(148158 - 184230),
                    [l1II(853306 + -889162)] = l1II(-29601 + -6632),
                    [l1II(317866 + -354102)] = l1II(319077 - 354987),
                    [l1II(-1055625 - (-1019200))] = -146080 - (-146085),
                    [l1II(734565 - 770936)] = true
                }, {
                    [l1II(222247 + -258332)] = l1II(46080 - 81891),
                    [l1II(-311658 + 275141)] = l1II(857979 + -893908),
                    [l1II(-644532 + 608177)] = -985407 + 985408,
                    [l1II(-78762 - (-42465))] = l1II(567912 - 604211),
                    [l1II(-484410 - (-448174))] = l1II(307946 + -344283),
                    [l1II(864179 - 900604)] = 339051 + -338971,
                    [l1II(462044 - 498415)] = false
                }, {
                    [l1II(-315614 - (-279529))] = l1II(180420 - 216231),
                    [l1II(-113380 + 76863)] = l1II(-333546 + 297141),
                    [l1II(845688 - 882043)] = -905403 - (-905404),
                    [l1II(66522 - 102819)] = l1II(659476 - 695862),
                    [l1II(723756 - 759992)] = l1II(388588 + -424925),
                    [l1II(-252456 + 216031)] = -72042 - (-72162),
                    [l1II(377836 + -414207)] = false
                }, {
                    [l1II(527356 - 563441)] = l1II(565776 - 601587),
                    [l1II(-651096 - (-614579))] = l1II(-341703 - (-305513)),
                    [l1II(-917308 + 880953)] = -863354 - (-863355),
                    [l1II(-918524 + 882227)] = l1II(-519977 - (-483631)),
                    [l1II(-392812 + 356576)] = l1II(681541 - 717878),
                    [l1II(140508 - 176933)] = 808505 + -808505,
                    [l1II(-636230 - (-599859))] = true
                }, {
                    [l1II(-1042676 - (-1006591))] = l1II(-868347 + 832536),
                    [l1II(-889596 + 853079)] = l1II(904 - 37217),
                    [l1II(456492 - 492847)] = 177767 - 177766,
                    [l1II(40345 - 76642)] = l1II(162469 + -198697),
                    [l1II(-660916 + 624680)] = l1II(-1044016 - (-1007679)),
                    [l1II(-718014 - (-681589))] = -806481 - (-806521),
                    [l1II(933867 - 970238)] = false
                }, {
                    [l1II(552881 + -588966)] = l1II(767126 - 802937),
                    [l1II(-17569 + -18948)] = l1II(-259605 - (-223719)),
                    [l1II(983550 + -1019905)] = 210023 + -210022,
                    [l1II(-513008 + 476711)] = l1II(-975511 - (-939709)),
                    [l1II(532646 - 568882)] = l1II(-924205 - (-887868)),
                    [l1II(-535672 - (-499247))] = -797545 - (-797625),
                    [l1II(812665 + -849036)] = false
                }, {
                    [l1II(-588326 - (-552241))] = l1II(-802843 - (-767032)),
                    [l1II(454602 - 491119)] = l1II(252899 - 289257),
                    [l1II(76577 - 112932)] = -309929 - (-309930),
                    [l1II(991543 - 1027840)] = l1II(886203 + -922070),
                    [l1II(-332138 + 295902)] = l1II(487231 - 523568),
                    [l1II(516592 + -553017)] = -662389 + 662509,
                    [l1II(-280361 + 243990)] = false
                }, {
                    [l1II(421613 + -457698)] = l1II(830714 + -866525),
                    [l1II(815545 + -852062)] = l1II(395116 + -431286),
                    [l1II(548527 - 584882)] = -510768 + 510769,
                    [l1II(116772 + -153069)] = l1II(-793599 - (-757495)),
                    [l1II(-706742 + 670506)] = l1II(451646 - 487983),
                    [l1II(730863 - 767288)] = -343787 + 343787,
                    [l1II(174245 + -210616)] = true
                }, {
                    [l1II(833798 - 869883)] = l1II(804921 + -840732),
                    [l1II(316522 + -353039)] = l1II(-890428 + 853957),
                    [l1II(548721 + -585076)] = 881723 + -881722,
                    [l1II(-998143 + 961846)] = l1II(-380246 - (-344107)),
                    [l1II(61602 + -97838)] = l1II(-900924 + 864587),
                    [l1II(-955966 + 919541)] = 942525 + -942485,
                    [l1II(209638 + -246009)] = false
                }, {
                    [l1II(953214 + -989299)] = l1II(-646836 + 611025),
                    [l1II(-502803 - (-466286))] = l1II(-315481 - (-279337)),
                    [l1II(415597 + -451952)] = 323306 + -323305,
                    [l1II(-483959 - (-447662))] = l1II(698166 + -734581),
                    [l1II(336544 - 372780)] = l1II(256232 + -292569),
                    [l1II(-851450 + 815025)] = -884603 + 884683,
                    [l1II(-910908 + 874537)] = false
                }, {
                    [l1II(-68450 + 32365)] = l1II(42081 + -77892),
                    [l1II(-555669 - (-519152))] = l1II(394306 - 430573),
                    [l1II(447534 + -483889)] = -167972 - (-167973),
                    [l1II(-524848 + 488551)] = l1II(-319466 + 283502),
                    [l1II(-622067 + 585831)] = l1II(-914092 - (-877755)),
                    [l1II(426213 - 462638)] = 587826 + -587706,
                    [l1II(-306683 - (-270312))] = false
                }, {
                    [l1II(-65698 + 29613)] = l1II(164965 + -201051),
                    [l1II(797177 + -833694)] = l1II(-1002879 + 966484),
                    [l1II(156067 - 192422)] = true,
                    [l1II(293857 - 330154)] = l1II(-829865 - (-793785)),
                    [l1II(24918 - 61154)] = l1II(562880 - 599155),
                    [l1II(364587 + -401012)] = 147626 - 147621,
                    [l1II(743223 + -779751)] = -675317 + 675339,
                    [l1II(-760363 - (-724342))] = 830945 - 830970,
                    [l1II(-432173 + 395802)] = true
                }, {
                    [l1II(-781368 + 745283)] = l1II(-74323 - (-38177)),
                    [l1II(-178121 - (-141604))] = l1II(-325986 - (-289513)),
                    [l1II(869371 + -905668)] = l1II(412092 - 448046),
                    [l1II(630245 - 666101)] = l1II(412236 - 448238),
                    [l1II(-72610 + 36374)] = l1II(-341291 + 305029),
                    [l1II(-566960 - (-530544))] = 34693 - 34593,
                    [l1II(-231463 + 195320)] = 228672 - 228647,
                    [l1II(771000 + -807425)] = -684606 - (-684661),
                    [l1II(-844300 - (-807929))] = false,
                    [l1II(255744 - 291753)] = function(lIII)
                        local I1II = II1I(l1II(-357821 - (-321770)))
                        if I1II then
                            lIII:SetText(I1II)
                        else
                            lIII:SetText(l1II(610403 - 646452))
                        end
                    end,
                    [l1II(-216743 + 180790)] = function(I1II)
                        lIII[l1II(753965 - 789880)](l1II(-745527 + 709302), l1II(-179814 + 143419),
                            l1II(1025024 + -1061380), I1II, lIII[l1II(-731767 + 695265)], II1I(l1II(53986 + -90342)))
                    end
                }, {
                    [l1II(-885883 + 849798)] = l1II(489530 - 525616),
                    [l1II(895420 + -931937)] = l1II(667277 - 703542),
                    [l1II(-712632 - (-676277))] = true,
                    [l1II(1000575 + -1036872)] = l1II(860433 - 896508),
                    [l1II(-888636 + 852400)] = l1II(990271 + -1026161),
                    [l1II(-567218 + 530793)] = 594487 - 594482,
                    [l1II(-425820 - (-389292))] = -52258 + 52280,
                    [l1II(-140568 - (-104547))] = 763768 + -763793,
                    [l1II(938173 + -974544)] = true,
                    [l1II(-1023566 - (-987775))] = l1II(258963 - 295401)
                }, {
                    [l1II(898760 - 934845)] = l1II(-284329 + 248183),
                    [l1II(-71430 - (-34913))] = l1II(777072 - 813241),
                    [l1II(748335 - 784632)] = l1II(-1020328 - (-984511)),
                    [l1II(-248936 + 213080)] = l1II(-1021696 + 985536),
                    [l1II(792633 + -828869)] = l1II(53922 + -90120),
                    [l1II(-953084 - (-916668))] = 279465 + -279365,
                    [l1II(358909 - 395052)] = 147301 + -147276,
                    [l1II(-858555 + 822130)] = 861874 - 861819,
                    [l1II(-793017 + 756646)] = false,
                    [l1II(142692 + -178483)] = l1II(845434 + -881872),
                    [l1II(534729 - 570738)] = function(lIII)
                        local I1II = II1I(l1II(-457838 + 421477))
                        if I1II then
                            lIII:SetText(I1II)
                        else
                            lIII:SetText(l1II(380252 - 416301))
                        end
                    end,
                    [l1II(-830458 + 794505)] = function(I1II)
                        lIII[l1II(759662 - 795577)](l1II(-974334 + 937887), l1II(-863227 + 826962),
                            l1II(-436974 + 401055), I1II, lIII[l1II(-798760 - (-762872))], II1I(l1II(852141 - 888060)))
                    end
                }, {
                    [l1II(-848570 + 812485)] = l1II(668288 - 704374),
                    [l1II(-1069989 - (-1033472))] = l1II(-721782 + 685790),
                    [l1II(-558385 + 522030)] = true,
                    [l1II(18529 + -54826)] = l1II(-177691 - (-141668)),
                    [l1II(740855 + -777091)] = l1II(538637 - 574962),
                    [l1II(-298673 - (-262248))] = 252008 + -252003,
                    [l1II(-690980 - (-654452))] = 101945 - 101923,
                    [l1II(728631 + -764652)] = -6841 - (-6816),
                    [l1II(171813 + -208184)] = true,
                    [l1II(993988 - 1030400)] = l1II(-420983 - (-384620)),
                    [l1II(-881673 - (-845882))] = l1II(246312 + -282750)
                }, {
                    [l1II(938941 + -975026)] = l1II(-545570 - (-509424)),
                    [l1II(326214 - 362731)] = l1II(665141 + -701638),
                    [l1II(-457646 + 421349)] = l1II(-624397 - (-588018)),
                    [l1II(613284 - 649140)] = l1II(942141 + -978637),
                    [l1II(658036 + -694272)] = l1II(238631 + -274693),
                    [l1II(-420524 - (-384108))] = -1018560 + 1018660,
                    [l1II(249832 + -285975)] = 394949 - 394924,
                    [l1II(-645812 + 609387)] = 148005 + -147950,
                    [l1II(-623621 - (-587250))] = false,
                    [l1II(239975 + -276387)] = l1II(-157669 + 121306),
                    [l1II(73876 - 109667)] = l1II(384343 - 420781),
                    [l1II(-917796 - (-881787))] = function(lIII)
                        local I1II = II1I(l1II(865003 - 901500))
                        if I1II then
                            lIII:SetText(I1II)
                        else
                            lIII:SetText(l1II(-582274 - (-546225)))
                        end
                    end,
                    [l1II(-501983 - (-466030))] = function(I1II)
                        local Il1I = GetRaidUnit(l1II(-463499 - (-426989)))
                        if Il1I == nil and II1I(l1II(-271288 - (-234791))) == l1II(71458 + -107507) then
                            lIII[l1II(-298793 + 262780)](l1II(665848 - 702262))
                            return
                        end
                        if Il1I ~= nil then
                            ll1I(l1II(-468015 + 431518), Il1I[l1II(-632948 + 597090)])
                            for lIII, I1II in pairs(HEAL_RAID) do
                                if I1II[l1II(193685 - 229543)] == Il1I[l1II(-702663 - (-666805))] then
                                    I1II[l1II(778488 + -815007)] = true
                                else
                                    I1II[l1II(-638810 - (-602291))] = false
                                end
                            end
                            lIII[l1II(-859707 + 823694)](l1II(-167788 - (-131364)) .. Il1I[l1II(-42482 - (-6624))])
                        else
                            ll1I(l1II(825194 - 861691), l1II(898924 - 934973))
                            for lIII, I1II in pairs(HEAL_RAID) do
                                I1II[l1II(-983908 - (-947389))] = false
                            end
                            lIII[l1II(627528 - 663541)](l1II(-995653 - (-959678)))
                        end
                    end
                }, {
                    [l1II(441594 - 477679)] = l1II(999434 - 1035520),
                    [l1II(-183178 - (-146661))] = l1II(-188230 - (-152101)),
                    [l1II(731511 + -767532)] = -375518 - (-375468),
                    [l1II(114978 - 151333)] = false,
                    [l1II(-343859 - (-307562))] = l1II(-634663 - (-598707)),
                    [l1II(-158704 - (-122468))] = l1II(-698192 - (-661941)),
                    [l1II(-268840 + 232415)] = 124329 - 124324,
                    [l1II(-886541 - (-850170))] = true,
                    [l1II(-739703 + 703291)] = l1II(321898 + -358261),
                    [l1II(3474 - 39265)] = l1II(-249576 + 213138)
                }, {
                    [l1II(911112 - 947197)] = l1II(78702 - 114788),
                    [l1II(948250 - 984767)] = l1II(544302 - 580722),
                    [l1II(188262 + -224283)] = 112946 - 112996,
                    [l1II(317032 - 353387)] = true,
                    [l1II(30617 - 66914)] = l1II(942525 + -978733),
                    [l1II(-638975 - (-602739))] = l1II(427635 - 463662),
                    [l1II(-297833 + 261408)] = -19617 + 19697,
                    [l1II(-415103 - (-378732))] = false,
                    [l1II(863675 + -900087)] = l1II(626410 - 662773),
                    [l1II(-27105 + -8686)] = l1II(740386 - 776824)
                }, {
                    [l1II(-189018 - (-152933))] = l1II(-444259 - (-408173)),
                    [l1II(236967 + -273484)] = l1II(-991130 - (-954750)),
                    [l1II(-1045248 + 1008893)] = true,
                    [l1II(-950981 - (-914684))] = l1II(-718646 + 682450),
                    [l1II(656105 - 692341)] = l1II(-1006079 + 969658),
                    [l1II(-874171 + 837746)] = 305774 - 305769,
                    [l1II(-130771 - (-94243))] = 222397 - 222375,
                    [l1II(-357215 - (-321194))] = -728503 + 728478,
                    [l1II(-489281 - (-452910))] = true,
                    [l1II(-575602 + 539190)] = l1II(-426349 + 389986),
                    [l1II(-874939 + 839148)] = l1II(-389249 - (-352811))
                }, {
                    [l1II(720438 + -756523)] = l1II(874378 - 910524),
                    [l1II(396616 - 433133)] = l1II(-937661 + 901539),
                    [l1II(-754815 - (-718518))] = l1II(-79330 + 42957),
                    [l1II(-573490 + 537634)] = l1II(132836 + -169038),
                    [l1II(929021 + -965257)] = l1II(786424 + -822732),
                    [l1II(299562 - 335978)] = 942497 - 942397,
                    [l1II(-958590 + 922447)] = -207718 + 207743,
                    [l1II(-419957 - (-383532))] = 673452 - 673397,
                    [l1II(-987839 + 951468)] = false,
                    [l1II(-617843 + 581431)] = l1II(-726263 + 689900),
                    [l1II(558065 + -593856)] = l1II(-939858 - (-903420)),
                    [l1II(-540761 - (-504752))] = function(lIII)
                        local I1II = II1I(l1II(563993 - 600115))
                        if I1II then
                            lIII:SetText(I1II)
                        else
                            lIII:SetText(l1II(718822 - 754871))
                        end
                    end,
                    [l1II(-981886 + 945933)] = function(I1II)
                        local Il1I = GetRaidUnit(l1II(588274 + -624784))
                        if Il1I ~= nil then
                            ll1I(l1II(-120612 + 84490), Il1I[l1II(816313 + -852171)])
                            for lIII, I1II in pairs(HEAL_RAID) do
                                if I1II[l1II(-301737 + 265879)] == Il1I[l1II(-763785 - (-727927))] then
                                    I1II[l1II(284649 + -320754)] = true
                                else
                                    I1II[l1II(-116964 + 80859)] = false
                                end
                            end
                            lIII[l1II(431169 - 467182)](l1II(448936 - 485103) .. Il1I[l1II(710390 + -746248)])
                        else
                            ll1I(l1II(40456 - 76578), l1II(-935677 + 899628))
                            for lIII, I1II in pairs(HEAL_RAID) do
                                I1II[l1II(-133732 + 97627)] = false
                            end
                            lIII[l1II(891600 - 927613)](l1II(835706 + -871686))
                        end
                    end
                }, {
                    [l1II(784888 + -820973)] = l1II(98403 + -134549),
                    [l1II(582642 + -619159)] = l1II(253032 + -289376),
                    [l1II(137892 + -174189)] = l1II(203814 + -239747),
                    [l1II(-66225 - (-30369))] = l1II(-454766 + 418344),
                    [l1II(57815 - 94051)] = l1II(590386 + -626842),
                    [l1II(-1064704 - (-1028288))] = -550321 + 550361,
                    [l1II(793585 - 830010)] = 580274 - 580274,
                    [l1II(-31795 - 4576)] = true,
                    [l1II(-675056 - (-638644))] = l1II(-21729 + -14634),
                    [l1II(-274230 - (-238439))] = l1II(870907 + -907345),
                    [l1II(586738 + -622691)] = function(I1II)
                        lIII[l1II(-794169 + 757740)](l1II(830061 - 866427))
                    end
                }, {
                    [l1II(100655 - 136740)] = l1II(-675366 - (-639220)),
                    [l1II(409325 + -445842)] = l1II(313758 - 349611),
                    [l1II(902900 - 939197)] = l1II(365803 + -401692),
                    [l1II(993392 - 1029248)] = l1II(24865 + -60832),
                    [l1II(147034 - 183270)] = l1II(745271 + -781595),
                    [l1II(-965054 + 928638)] = 764000 - 763960,
                    [l1II(-666557 - (-630132))] = 517720 - 517680,
                    [l1II(270167 - 306538)] = false,
                    [l1II(-1001466 - (-965054))] = l1II(944765 + -981128),
                    [l1II(-165683 - (-129892))] = l1II(-919697 - (-883259)),
                    [l1II(-285929 + 249976)] = function(I1II)
                        lIII[l1II(-854202 + 817773)](l1II(-646898 - (-610931)))
                    end
                }, {
                    [l1II(-97047 - (-60962))] = l1II(897291 - 933437),
                    [l1II(506636 - 543153)] = l1II(-638900 + 602401),
                    [l1II(916661 - 952958)] = l1II(15860 - 52194),
                    [l1II(-637236 + 601380)] = l1II(-515935 - (-479663)),
                    [l1II(-953928 - (-917692))] = l1II(-453225 - (-416941)),
                    [l1II(-589170 + 552754)] = -430085 - (-430125),
                    [l1II(-144868 + 108443)] = -754727 - (-754807),
                    [l1II(-734921 - (-698550))] = false,
                    [l1II(-280036 - (-243624))] = l1II(-393526 - (-357163)),
                    [l1II(-887163 + 851372)] = l1II(-749751 + 713313),
                    [l1II(-271144 + 235191)] = function(I1II)
                        lIII[l1II(-969162 - (-932733))](l1II(33057 + -69449))
                    end
                }, {
                    [l1II(627200 - 663285)] = l1II(-845818 + 809672),
                    [l1II(416649 - 453166)] = l1II(-1020141 - (-983806)),
                    [l1II(158501 + -194798)] = l1II(381334 - 417709),
                    [l1II(-122276 + 86420)] = l1II(-707973 - (-671733)),
                    [l1II(-452793 - (-416557))] = l1II(104483 + -140713),
                    [l1II(61859 - 98275)] = -565170 + 565210,
                    [l1II(110947 + -147372)] = 1047552 + -1047432,
                    [l1II(381996 + -418367)] = false,
                    [l1II(-601779 + 565367)] = l1II(-122276 + 85913),
                    [l1II(144087 - 179878)] = l1II(-32374 - 4064),
                    [l1II(-670821 - (-634868))] = function(I1II)
                        lIII[l1II(999423 + -1035852)](l1II(718001 - 754487))
                    end
                }, {
                    [l1II(763780 - 799865)] = l1II(-613875 + 577789),
                    [l1II(-712566 + 676049)] = l1II(-60612 - (-24609)),
                    [l1II(-600883 + 564528)] = false,
                    [l1II(332726 - 368747)] = 250816 - 250856,
                    [l1II(566890 - 603187)] = l1II(665269 + -701079),
                    [l1II(690219 - 726455)] = l1II(-943613 + 907674),
                    [l1II(-324394 + 287969)] = 1024709 - 1024704,
                    [l1II(-1024978 - (-988607))] = true,
                    [l1II(-549164 - (-512752))] = l1II(773166 - 809529),
                    [l1II(436862 - 472815)] = function(lIII)
                        I11I(lIII)
                    end
                }, {
                    [l1II(-846382 - (-810297))] = l1II(-910780 + 874694),
                    [l1II(-1006435 - (-969918))] = l1II(293006 - 329258),
                    [l1II(-549427 - (-513072))] = false,
                    [l1II(863035 + -899056)] = -725726 - (-725686),
                    [l1II(-607603 + 571306)] = l1II(-824875 - (-788728)),
                    [l1II(-372598 - (-336362))] = l1II(736823 + -772989),
                    [l1II(91427 + -127852)] = 288937 + -288857,
                    [l1II(-564931 - (-528560))] = false,
                    [l1II(-183462 + 147050)] = l1II(-462894 + 426531),
                    [l1II(132916 - 168869)] = function(lIII)
                        local I1II = II1I(l1II(-826288 - (-789880)))
                        if I1II ~= l1II(420144 - 456046) and I1II ~= l1II(102482 - 138788) then
                            ll1I(l1II(-1030144 + 994218), lIII)
                        end
                    end
                }, {
                    [l1II(-954737 - (-918652))] = l1II(745079 + -781165),
                    [l1II(7712 + -44229)] = l1II(713553 - 749431),
                    [l1II(706740 - 743095)] = false,
                    [l1II(-929521 - (-893500))] = -87809 - (-87779),
                    [l1II(272993 - 309290)] = l1II(873147 + -909468),
                    [l1II(-614270 - (-578034))] = l1II(-448424 - (-412269)),
                    [l1II(395108 - 431533)] = -321130 + 321135,
                    [l1II(-304745 + 268374)] = true,
                    [l1II(-841525 - (-805113))] = l1II(625331 + -661694),
                    [l1II(789705 - 825658)] = function(lIII)
                        local I1II = II1I(l1II(233191 + -269599))
                        if I1II ~= l1II(-299113 + 263211) and I1II ~= l1II(182118 + -218424) then
                            ll1I(l1II(-856141 - (-820217)), lIII)
                        end
                    end
                }, {
                    [l1II(-869871 - (-833786))] = l1II(-896700 + 860614),
                    [l1II(624591 - 661108)] = l1II(-88865 - (-52386)),
                    [l1II(764982 - 801337)] = false,
                    [l1II(-794496 - (-758199))] = l1II(232603 - 268776),
                    [l1II(557542 - 593778)] = l1II(434925 + -470768),
                    [l1II(-889731 - (-853306))] = 907324 + -907269,
                    [l1II(55824 - 92195)] = false,
                    [l1II(444339 - 480751)] = l1II(154981 + -191344),
                    [l1II(-616371 + 580418)] = function(lIII)
                        local I1II = II1I(l1II(411702 - 448110))
                        if I1II ~= l1II(530740 - 566642) and I1II ~= l1II(839610 + -875916) then
                            ll1I(l1II(296085 - 331946), lIII)
                        end
                    end
                }, {
                    [l1II(32225 + -68310)] = l1II(-322026 + 285940),
                    [l1II(655888 - 692405)] = l1II(-728567 + 692427),
                    [l1II(287913 + -324268)] = false,
                    [l1II(-859003 + 822706)] = l1II(-1006591 + 970260),
                    [l1II(615987 + -652223)] = l1II(151818 - 187622),
                    [l1II(445606 - 482031)] = -580274 + 580379,
                    [l1II(183206 + -219577)] = false,
                    [l1II(-36828 - (-416))] = l1II(-461934 + 425571),
                    [l1II(498176 - 534129)] = function(lIII)
                        local I1II = II1I(l1II(-920179 - (-883771)))
                        if I1II ~= l1II(-810550 - (-774648)) and I1II ~= l1II(181205 - 217511) then
                            ll1I(l1II(-515568 + 479060), lIII)
                        end
                    end
                }, {
                    [l1II(-262376 + 226291)] = l1II(-214759 + 178426),
                    [l1II(-1048000 + 1011483)] = l1II(-459502 + 422986),
                    [l1II(-83427 + 47072)] = l1II(-689269 + 653240),
                    [l1II(988351 + -1024767)] = 562737 + -562597,
                    [l1II(-615795 + 579652)] = 301993 + -301968,
                    [l1II(651052 - 687477)] = 780285 - 780280,
                    [l1II(987053 - 1023424)] = true,
                    [l1II(-998842 - (-962430))] = l1II(-475563 - (-439406))
                }, {
                    [l1II(-578406 - (-542321))] = l1II(-404909 + 368823),
                    [l1II(929497 - 966014)] = l1II(467022 - 503536),
                    [l1II(-568884 - (-532529))] = true,
                    [l1II(-386292 - (-349995))] = l1II(-796537 + 760215),
                    [l1II(-472367 + 436131)] = l1II(-651828 + 615299),
                    [l1II(524392 - 560817)] = 616115 + -616110,
                    [l1II(-565874 + 529853)] = -969150 + 969100,
                    [l1II(908028 + -944399)] = true,
                    [l1II(422706 - 459118)] = l1II(-379948 + 343791)
                }, {
                    [l1II(389176 - 425261)] = l1II(3360 + -39552),
                    [l1II(536945 + -573462)] = l1II(-991335 - (-955006)),
                    [l1II(-251754 - (-215399))] = 546865 + -546865,
                    [l1II(-878523 + 842098)] = 103587 + -103487,
                    [l1II(-856972 - (-820601))] = false,
                    [l1II(652263 - 688245)] = l1II(-645172 + 609162),
                    [l1II(98275 + -134687)] = l1II(407281 - 443438)
                }, {
                    [l1II(461102 + -497187)] = l1II(-8277 - 27809),
                    [l1II(-34181 - 2336)] = l1II(533169 + -569235),
                    [l1II(336489 - 372844)] = true,
                    [l1II(743471 - 779768)] = l1II(430573 + -466530),
                    [l1II(-99427 + 63191)] = l1II(306992 - 343211),
                    [l1II(290473 + -326494)] = -173797 + 173767,
                    [l1II(838834 - 875259)] = -157280 - (-157285),
                    [l1II(600417 - 636788)] = true,
                    [l1II(433965 + -470377)] = l1II(-768500 - (-732343)),
                    [l1II(-1001037 - (-965246))] = l1II(577266 + -613704),
                    [l1II(-681333 + 645380)] = function(I1II)
                        if II1I(l1II(680702 - 717110)) == l1II(-324138 + 287832) or II1I(l1II(-709549 - (-673141))) ==
                            l1II(-675186 - (-639284)) then
                            if I1II then
                                if lIII[l1II(-18081 + -18145)](l1II(-713718 + 677622)) then
                                    ll1I(l1II(-159272 - (-122916)), l1II(672502 - 708598))
                                end
                                ll1I(l1II(834746 + -870925), true)
                                ll1I(l1II(378384 - 414637), true)
                            else
                                if lIII[l1II(-167910 - (-131684))](l1II(-804225 - (-768376))) then
                                    ll1I(l1II(79394 + -115750), l1II(-852666 + 816817))
                                end
                                if lIII[l1II(976637 - 1012863)](l1II(690229 + -726432)) then
                                    ll1I(l1II(733236 - 769592), l1II(-145829 + 109626))
                                end
                            end
                        end
                    end
                }, {
                    [l1II(-90083 + 53998)] = l1II(-468195 - (-432109)),
                    [l1II(-882171 + 845654)] = l1II(-652404 + 616014),
                    [l1II(-396718 - (-360363))] = true,
                    [l1II(491439 + -527736)] = l1II(-311722 + 275525),
                    [l1II(30497 + -66353)] = l1II(783032 + -818954),
                    [l1II(-310196 - (-273960))] = l1II(-831738 + 795817),
                    [l1II(-630503 - (-594482))] = 768252 - 768312,
                    [l1II(475247 + -511672)] = -397212 - (-397292),
                    [l1II(838522 + -874893)] = false,
                    [l1II(2085 - 38497)] = l1II(446574 + -482476),
                    [l1II(-223271 + 187480)] = l1II(-757687 + 721249),
                    [l1II(-101219 + 65266)] = function(lIII)
                        if lIII then
                            ll1I(l1II(209526 - 245800), true)
                            ll1I(l1II(462446 + -498253), true)
                            ll1I(l1II(-844346 + 808208), true)
                        end
                    end
                }, {
                    [l1II(1023680 + -1059765)] = l1II(384823 - 420909),
                    [l1II(-520176 + 483659)] = l1II(-26597 - 9248),
                    [l1II(68002 + -104357)] = true,
                    [l1II(66210 + -102507)] = l1II(-295529 + 259412),
                    [l1II(-273911 - (-238055))] = l1II(-384742 - (-348651)),
                    [l1II(425378 - 461614)] = l1II(-356247 - (-320298)),
                    [l1II(-65634 + 29209)] = -200614 + 200694,
                    [l1II(-644550 - (-608179))] = false,
                    [l1II(453358 + -489770)] = l1II(271128 - 307434),
                    [l1II(757290 - 793081)] = l1II(557532 - 593970)
                }, {
                    [l1II(356023 - 392108)] = l1II(-131684 + 95598),
                    [l1II(188902 + -225419)] = l1II(908988 + -945465),
                    [l1II(-988095 + 951740)] = true,
                    [l1II(623147 - 659444)] = l1II(-755542 - (-719094)),
                    [l1II(519653 - 555889)] = l1II(451438 + -487351),
                    [l1II(-344427 + 308406)] = -329746 - (-329706),
                    [l1II(-893052 + 856627)] = -122404 + 122409,
                    [l1II(977342 + -1013713)] = true,
                    [l1II(982660 - 1019072)] = l1II(-489007 + 453105),
                    [l1II(38931 - 74722)] = l1II(10080 + -46518)
                }, {
                    [l1II(-471471 + 435386)] = l1II(-478447 + 442361),
                    [l1II(-474003 - (-437486))] = l1II(-1034806 - (-998975)),
                    [l1II(279527 - 315882)] = true,
                    [l1II(-830266 + 793969)] = l1II(-542410 - (-506416)),
                    [l1II(-625406 - (-589170))] = l1II(-846834 - (-810937)),
                    [l1II(-557745 + 521724)] = 37241 - 37281,
                    [l1II(-900420 - (-863995))] = -577714 + 577794,
                    [l1II(-203320 - (-166949))] = false,
                    [l1II(-54498 + 18086)] = l1II(660152 - 696054),
                    [l1II(158501 + -194292)] = l1II(-745164 - (-708726))
                }, {
                    [l1II(-668969 - (-632884))] = l1II(-219879 + 183546),
                    [l1II(-1028480 + 991963)] = l1II(-157029 + 120972),
                    [l1II(696500 - 732855)] = l1II(58076 - 94435),
                    [l1II(-258856 + 222440)] = 633088 - 632948,
                    [l1II(-612147 + 576004)] = 835795 - 835770,
                    [l1II(-833018 + 796593)] = 539185 + -539180,
                    [l1II(701860 - 738231)] = true,
                    [l1II(598840 - 635252)] = l1II(-338086 - (-301929))
                }, {
                    [l1II(-833966 - (-797881))] = l1II(-1036096 + 999763),
                    [l1II(-86919 - (-50402))] = l1II(-864955 + 829126),
                    [l1II(-93733 - (-57378))] = l1II(166239 - 202598),
                    [l1II(-393580 + 357164)] = 487983 + -487843,
                    [l1II(215143 + -251286)] = 91491 + -91466,
                    [l1II(512872 - 549297)] = 734524 - 734519,
                    [l1II(297239 - 333610)] = true,
                    [l1II(667573 + -703985)] = l1II(355708 - 392172)
                }, {
                    [l1II(-71190 - (-35105))] = l1II(-660148 + 624062),
                    [l1II(-453202 - (-416685))] = l1II(182144 - 218407),
                    [l1II(44769 + -81124)] = false,
                    [l1II(362475 + -398772)] = l1II(985919 + -1022084),
                    [l1II(418722 - 454958)] = l1II(726199 + -762272),
                    [l1II(627827 + -663848)] = -109259 - (-109219),
                    [l1II(-778624 - (-742199))] = 88371 - 88291,
                    [l1II(-1079187 - (-1042816))] = false,
                    [l1II(-114340 + 77928)] = l1II(-496687 + 460785),
                    [l1II(909998 - 945789)] = l1II(69325 - 105763)
                }},
                [l1II(-784248 + 747803)] = {},
                [l1II(34516 - 70754)] = {{
                    [l1II(746231 + -782316)] = l1II(506043 - 542129),
                    [l1II(893820 + -930337)] = l1II(545211 - 581106),
                    [l1II(113186 - 149541)] = true,
                    [l1II(1496 - 37793)] = l1II(723444 - 759736),
                    [l1II(-565564 - (-529328))] = l1II(-614334 - (-578226)),
                    [l1II(594930 + -630951)] = 744183 + -744223,
                    [l1II(-115108 + 78683)] = -1038592 + 1038597,
                    [l1II(-703624 - (-667253))] = true,
                    [l1II(-870966 - (-834554))] = l1II(-959382 - (-923133))
                }, {
                    [l1II(354731 + -390816)] = l1II(-221991 + 185799),
                    [l1II(-980286 + 943769)] = l1II(960958 + -996982),
                    [l1II(-924927 - (-888572))] = -57919 - (-57954),
                    [l1II(740207 - 776632)] = 243980 - 243880,
                    [l1II(-967998 + 932016)] = l1II(470342 - 506352),
                    [l1II(-368445 - (-332074))] = false,
                    [l1II(852218 + -888630)] = l1II(-524296 - (-488047))
                }, {
                    [l1II(-111971 + 75886)] = l1II(117988 + -154074),
                    [l1II(264452 - 300969)] = l1II(378756 - 414701),
                    [l1II(594609 - 630964)] = true,
                    [l1II(159197 - 195494)] = l1II(589385 - 625203),
                    [l1II(984127 + -1020363)] = l1II(150546 - 186662),
                    [l1II(642092 - 678517)] = 588658 + -588633,
                    [l1II(-321130 + 284759)] = true,
                    [l1II(980420 - 1016832)] = l1II(-224 + -36025)
                }, {
                    [l1II(394168 - 430253)] = l1II(761336 + -797422),
                    [l1II(497391 + -533908)] = l1II(269231 - 305385),
                    [l1II(-1007681 - (-971326))] = true,
                    [l1II(930741 - 967038)] = l1II(-248872 + 213066),
                    [l1II(537254 - 573490)] = l1II(30796 - 66658),
                    [l1II(-199022 - (-162597))] = 278078 - 277993,
                    [l1II(-108149 - (-71778))] = false,
                    [l1II(745340 - 781752)] = l1II(713822 - 750071)
                }, {
                    [l1II(209011 - 245096)] = l1II(-319978 + 283892),
                    [l1II(858811 + -895328)] = l1II(91235 + -127056),
                    [l1II(-882749 - (-846394))] = false,
                    [l1II(-73450 - (-37153))] = l1II(855675 + -891610),
                    [l1II(775469 - 811705)] = l1II(-361078 - (-325034)),
                    [l1II(435238 - 471663)] = 454003 - 453998,
                    [l1II(-460288 - (-423917))] = true,
                    [l1II(692981 + -729393)] = l1II(-925757 + 889394)
                }, {
                    [l1II(-554021 - (-517936))] = l1II(523312 + -559504),
                    [l1II(-294505 + 257988)] = l1II(-139322 - (-102819)),
                    [l1II(-582642 + 546287)] = 654644 + -654609,
                    [l1II(682093 - 718518)] = -506572 - (-506672),
                    [l1II(-71074 + 35092)] = l1II(-169166 - (-133156)),
                    [l1II(-350507 + 314136)] = false,
                    [l1II(441518 + -477930)] = l1II(711916 - 748279)
                }, {
                    [l1II(-478831 + 442746)] = l1II(-40342 - (-4256)),
                    [l1II(-23877 - 12640)] = l1II(-764408 + 728603),
                    [l1II(586352 - 622707)] = true,
                    [l1II(-672949 + 636652)] = l1II(-977565 - (-941693)),
                    [l1II(185691 - 221927)] = l1II(-980876 - (-945021)),
                    [l1II(-677245 - (-640820))] = -270051 - (-270056),
                    [l1II(-867579 + 831208)] = true,
                    [l1II(-605422 - (-569010))] = l1II(-995593 - (-959230))
                }, {
                    [l1II(-603047 - (-566962))] = l1II(-986687 + 950495),
                    [l1II(964158 + -1000675)] = l1II(342763 + -379034),
                    [l1II(-78820 - (-42465))] = -602483 + 602533,
                    [l1II(-46889 - (-10464))] = 861883 + -861783,
                    [l1II(-656820 + 620838)] = l1II(854906 + -890916),
                    [l1II(288489 + -324860)] = false,
                    [l1II(830266 + -866678)] = l1II(64536 - 100899)
                }, {
                    [l1II(875783 - 911868)] = l1II(347947 + -384033),
                    [l1II(704850 - 741367)] = l1II(-748855 + 712555),
                    [l1II(-18018 - 18337)] = true,
                    [l1II(-960190 + 923893)] = l1II(404589 + -440492),
                    [l1II(92259 + -128495)] = l1II(-495824 - (-459886)),
                    [l1II(-697854 - (-661429))] = 806398 - 806393,
                    [l1II(638464 - 674485)] = -31841 + 31811,
                    [l1II(-868283 + 831912)] = true,
                    [l1II(716150 + -751941)] = l1II(988607 + -1025045),
                    [l1II(196582 + -232591)] = function(I1II)
                        if not lIII[l1II(-925245 + 889019)](l1II(-101731 + 65365)) then
                            I1II:Disable()
                        end
                    end
                }, {
                    [l1II(623347 + -659432)] = l1II(-265117 - (-229031)),
                    [l1II(-269964 - (-233447))] = l1II(835321 - 871163),
                    [l1II(-496433 - (-460078))] = false,
                    [l1II(763576 + -799873)] = l1II(-676853 + 640761),
                    [l1II(65431 - 101667)] = l1II(944499 - 980286),
                    [l1II(690293 + -726718)] = -721510 - (-721590),
                    [l1II(385464 - 421485)] = -202180 - (-202150),
                    [l1II(390700 + -427071)] = false,
                    [l1II(526640 + -562431)] = l1II(-132473 - (-96035)),
                    [l1II(-768160 - (-732151))] = function(I1II)
                        if not lIII[l1II(-588722 + 552496)](l1II(-664053 + 627687)) then
                            I1II:Disable()
                        end
                    end
                }, {
                    [l1II(-528880 + 492795)] = l1II(-216476 - (-180390)),
                    [l1II(714934 + -751451)] = l1II(761679 - 797561),
                    [l1II(-884541 - (-848186))] = true,
                    [l1II(650228 + -686525)] = l1II(-681822 - (-645428)),
                    [l1II(982132 - 1018368)] = l1II(93603 + -129503),
                    [l1II(-430133 - (-393708))] = 3621 - 3616,
                    [l1II(-571460 - (-535089))] = true,
                    [l1II(-1009914 - (-973502))] = l1II(835834 + -872197),
                    [l1II(230887 + -266678)] = l1II(-944125 + 907687)
                }, {
                    [l1II(635008 - 671093)] = l1II(878364 - 914556),
                    [l1II(-906492 + 869975)] = l1II(884155 + -919969),
                    [l1II(-900926 - (-864571))] = 700662 + -700592,
                    [l1II(-607091 + 570666)] = -597391 - (-597491),
                    [l1II(-102960 - (-66978))] = l1II(1002262 - 1038272),
                    [l1II(215829 - 252200)] = false,
                    [l1II(-402983 - (-366571))] = l1II(109475 + -145838),
                    [l1II(201446 + -237237)] = l1II(789368 + -825806)
                }, {
                    [l1II(-679477 + 643392)] = l1II(208742 + -244828),
                    [l1II(-563249 + 526732)] = l1II(-1038592 + 1002132),
                    [l1II(-508530 - (-472175))] = true,
                    [l1II(-914820 - (-878523))] = l1II(903926 - 939773),
                    [l1II(26966 - 63202)] = l1II(-850947 - (-814457)),
                    [l1II(-592946 + 556521)] = 429298 - 429293,
                    [l1II(79970 + -116341)] = true,
                    [l1II(-659508 + 623096)] = l1II(-737089 - (-700726)),
                    [l1II(563556 - 599347)] = l1II(321962 + -358400)
                }, {
                    [l1II(-163033 - (-126948))] = l1II(-1012799 + 976713),
                    [l1II(-624563 + 588046)] = l1II(-370330 - (-334378)),
                    [l1II(-242344 + 205989)] = false,
                    [l1II(-558969 - (-522672))] = l1II(229287 + -265228),
                    [l1II(-178928 - (-142692))] = l1II(407405 + -443647),
                    [l1II(657716 + -694141)] = 574594 - 574514,
                    [l1II(-471296 - (-434925))] = false,
                    [l1II(109987 + -146399)] = l1II(-97197 - (-60834)),
                    [l1II(-830152 - (-794361))] = l1II(50722 + -87160)
                }, {
                    [l1II(31149 - 67234)] = l1II(190950 + -227036),
                    [l1II(-260812 - (-224295))] = l1II(209422 - 245928),
                    [l1II(-475889 - (-439534))] = true,
                    [l1II(-1051080 - (-1014783))] = l1II(905715 - 941501),
                    [l1II(-127023 - (-90787))] = l1II(752887 + -789067),
                    [l1II(-673461 + 637036)] = 504821 - 504816,
                    [l1II(-902606 - (-866235))] = true,
                    [l1II(615288 - 651700)] = l1II(-836804 - (-800441)),
                    [l1II(-51759 - (-15968))] = l1II(300649 + -337087)
                }, {
                    [l1II(-905968 - (-869883))] = l1II(110755 + -146841),
                    [l1II(-804601 + 768084)] = l1II(745719 + -782028),
                    [l1II(495469 - 531824)] = true,
                    [l1II(347435 + -383732)] = l1II(796260 - 832314),
                    [l1II(-986047 + 949811)] = l1II(-28004 - 8032),
                    [l1II(545905 + -582330)] = -56866 + 56946,
                    [l1II(871419 + -907790)] = false,
                    [l1II(-779320 + 742908)] = l1II(-125156 + 88793),
                    [l1II(-768774 - (-732983))] = l1II(-286889 + 250451)
                }, {
                    [l1II(582078 - 618163)] = l1II(-95640 - (-59554)),
                    [l1II(161253 + -197770)] = l1II(-707950 - (-671861)),
                    [l1II(-250920 + 214565)] = false,
                    [l1II(1010815 + -1047112)] = l1II(-440794 - (-404909)),
                    [l1II(-867195 + 830959)] = l1II(286430 - 322282),
                    [l1II(-759167 - (-722742))] = -432941 + 432946,
                    [l1II(-689257 - (-653236))] = 171237 + -171287,
                    [l1II(-925519 - (-889148))] = true,
                    [l1II(698550 + -734962)] = l1II(714796 - 751159),
                    [l1II(96291 + -132244)] = function(lIII)
                        if lIII then
                            ll1I(l1II(796025 + -831863), false)
                        end
                    end
                }, {
                    [l1II(1042560 + -1078645)] = l1II(-157338 - (-121252)),
                    [l1II(520048 + -556565)] = l1II(769400 + -805616),
                    [l1II(-877179 + 840824)] = true,
                    [l1II(412525 + -448822)] = l1II(143206 - 179110),
                    [l1II(497263 + -533119)] = l1II(-862957 - (-826746)),
                    [l1II(-335413 - (-299177))] = l1II(-461614 + 425178),
                    [l1II(165277 - 201702)] = 816201 - 816121,
                    [l1II(524400 + -560421)] = 80739 + -80789,
                    [l1II(832058 + -868429)] = false,
                    [l1II(471284 - 507696)] = l1II(696364 - 732727)
                }, {
                    [l1II(61474 + -97559)] = l1II(977790 + -1013876),
                    [l1II(-460690 - (-424173))] = l1II(398892 + -435232),
                    [l1II(913466 - 949821)] = false,
                    [l1II(-500151 - (-463854))] = l1II(37345 + -73652),
                    [l1II(82467 + -118323)] = l1II(-55456 - (-19425)),
                    [l1II(-779960 + 743724)] = l1II(-237949 - (-201702)),
                    [l1II(451814 - 488239)] = -185249 - (-185254),
                    [l1II(710658 - 746679)] = -116654 - (-116644),
                    [l1II(143891 - 180262)] = true,
                    [l1II(210860 - 247272)] = l1II(-466168 - (-429805))
                }, {
                    [l1II(-392224 - (-356139))] = l1II(-458222 + 422136),
                    [l1II(827414 - 863931)] = l1II(166181 + -202111),
                    [l1II(981182 + -1017537)] = false,
                    [l1II(-749175 + 712878)] = l1II(555761 + -591947),
                    [l1II(972463 - 1008319)] = l1II(-405594 - (-369643)),
                    [l1II(-633972 + 597736)] = l1II(-310912 - (-274665)),
                    [l1II(861683 - 898108)] = -777690 - (-777720),
                    [l1II(-161561 - (-125540))] = -517818 - (-517808),
                    [l1II(724069 - 760440)] = false,
                    [l1II(1002943 + -1039355)] = l1II(408685 + -445048)
                }, {
                    [l1II(-534257 + 498172)] = l1II(-865083 + 828997),
                    [l1II(695954 - 732471)] = l1II(-16481 + -19625),
                    [l1II(-955647 - (-919292))] = false,
                    [l1II(-518904 - (-482607))] = l1II(171493 + -207323),
                    [l1II(715559 - 751415)] = l1II(-447950 - (-411565)),
                    [l1II(481892 - 518128)] = l1II(-373377 - (-337130)),
                    [l1II(-149477 + 113052)] = -744823 + 744883,
                    [l1II(-461410 - (-425389))] = 188188 - 188198,
                    [l1II(570464 - 606835)] = false,
                    [l1II(-62493 - (-26081))] = l1II(22679 - 59042)
                }, {
                    [l1II(248052 - 284137)] = l1II(-135193 - (-99107)),
                    [l1II(782200 + -818717)] = l1II(89379 + -125413),
                    [l1II(-619061 - (-582706))] = true,
                    [l1II(-297713 - (-261416))] = l1II(851759 - 887868),
                    [l1II(-1012942 - (-977086))] = l1II(-503600 + 467340),
                    [l1II(-199921 - (-163685))] = l1II(207398 + -243645),
                    [l1II(-96811 - (-60386))] = -657370 - (-657460),
                    [l1II(385388 + -421409)] = -942717 + 942707,
                    [l1II(18255 - 54626)] = false,
                    [l1II(-1074620 - (-1038208))] = l1II(-967496 - (-931133))
                }, {
                    [l1II(-315946 + 279861)] = l1II(-203494 + 167408),
                    [l1II(53282 + -89799)] = l1II(1010751 + -1046852),
                    [l1II(786104 + -822459)] = true,
                    [l1II(-579186 + 542889)] = l1II(721526 + -757689),
                    [l1II(527521 - 563377)] = l1II(296873 + -332696),
                    [l1II(-783608 + 747372)] = l1II(150735 - 186982),
                    [l1II(-284657 - (-248232))] = -319410 - (-319530),
                    [l1II(-562993 + 526972)] = 977982 + -977992,
                    [l1II(-824139 - (-787768))] = false,
                    [l1II(-194913 - (-158501))] = l1II(-762424 + 726061)
                }, {
                    [l1II(-768760 + 732675)] = l1II(-857327 - (-821241)),
                    [l1II(775160 + -811677)] = l1II(-862843 + 826412),
                    [l1II(916860 + -953215)] = true,
                    [l1II(882939 + -919236)] = l1II(-781007 - (-744503)),
                    [l1II(-3488 + -32368)] = l1II(52236 - 88163),
                    [l1II(-253683 - (-217447))] = l1II(843490 - 879995),
                    [l1II(897460 - 933885)] = 1013316 - 1013311,
                    [l1II(795013 - 831034)] = 922749 + -922779,
                    [l1II(-381886 - (-345515))] = true,
                    [l1II(-682805 + 646393)] = l1II(-1033216 + 996853),
                    [l1II(647348 + -683301)] = function(lIII)
                        lI1I()
                    end
                }, {
                    [l1II(-285865 + 249780)] = l1II(-240860 - (-204774)),
                    [l1II(-959394 - (-922877))] = l1II(947965 + -984039),
                    [l1II(890682 - 927037)] = true,
                    [l1II(673453 - 709750)] = l1II(-296412 - (-260136)),
                    [l1II(87636 - 123492)] = l1II(510384 + -546537),
                    [l1II(-876614 - (-840378))] = l1II(316906 + -353083),
                    [l1II(568562 + -604987)] = 48798 - 48738,
                    [l1II(-271132 - (-235111))] = -254598 - (-254568),
                    [l1II(817895 - 854266)] = false,
                    [l1II(-267944 + 231532)] = l1II(-570556 - (-534193)),
                    [l1II(425021 - 460974)] = function(lIII)
                        lI1I()
                    end
                }, {
                    [l1II(-1082357 - (-1046272))] = l1II(82414 - 118500),
                    [l1II(-114532 + 78015)] = l1II(478895 + -514768),
                    [l1II(-136484 + 100129)] = false,
                    [l1II(-834170 + 797873)] = l1II(-915516 + 879502),
                    [l1II(-347371 + 311515)] = l1II(909537 - 945853),
                    [l1II(552742 - 588978)] = l1II(-561135 - (-524848)),
                    [l1II(1036672 + -1073097)] = 671989 + -671879,
                    [l1II(315178 + -351199)] = 501458 - 501488,
                    [l1II(-218041 - (-181670))] = false,
                    [l1II(-138207 - (-101795))] = l1II(649908 + -686271),
                    [l1II(270120 + -306073)] = function(lIII)
                        lI1I()
                    end
                }, {
                    [l1II(-532272 + 496187)] = l1II(-588978 + 552892),
                    [l1II(49954 + -86471)] = l1II(-131105 - (-95267)),
                    [l1II(-702072 - (-665717))] = true,
                    [l1II(584746 - 621043)] = l1II(-272168 + 235914),
                    [l1II(-844922 + 808686)] = l1II(-405755 - (-369387)),
                    [l1II(523880 - 560305)] = 150570 - 150565,
                    [l1II(68142 - 104163)] = -509552 + 509502,
                    [l1II(609633 - 646004)] = true,
                    [l1II(-703542 + 667130)] = l1II(-884091 + 847728),
                    [l1II(450302 - 486255)] = function(lIII)
                        if lIII then
                            ll1I(l1II(-644396 - (-608307)), false)
                        end
                    end
                }, {
                    [l1II(-712374 + 676289)] = l1II(643060 + -679146),
                    [l1II(-354959 - (-318442))] = l1II(-1019455 - (-983358)),
                    [l1II(-293417 + 257062)] = false,
                    [l1II(-516848 + 480551)] = l1II(-751739 - (-715382)),
                    [l1II(327914 + -364150)] = l1II(993151 + -1029386),
                    [l1II(719278 - 755703)] = 200614 + -200529,
                    [l1II(-951229 + 915208)] = 423341 + -423391,
                    [l1II(-979774 + 943403)] = false,
                    [l1II(256872 + -293284)] = l1II(-125230 - (-88867))
                }, {
                    [l1II(-163225 - (-127140))] = l1II(453817 - 489903),
                    [l1II(15229 - 51746)] = l1II(831848 - 867771),
                    [l1II(-522480 + 486125)] = true,
                    [l1II(-762111 - (-725814))] = l1II(-585131 - (-548721)),
                    [l1II(-641667 - (-605811))] = l1II(587826 + -623614),
                    [l1II(-6112 + -30124)] = l1II(267752 + -303778),
                    [l1II(462566 - 498991)] = 519029 - 519024,
                    [l1II(-236571 - (-200550))] = 241255 + -241305,
                    [l1II(816761 + -853132)] = true,
                    [l1II(360048 - 396460)] = l1II(-969851 - (-933949))
                }, {
                    [l1II(114096 - 150181)] = l1II(-329311 - (-293225)),
                    [l1II(208934 + -245451)] = l1II(-64290 + 28107),
                    [l1II(746805 - 783160)] = false,
                    [l1II(-851194 + 814897)] = l1II(271784 + -307698),
                    [l1II(-936509 + 900653)] = l1II(-985791 + 949610),
                    [l1II(-718657 - (-682421))] = l1II(-44147 - (-8160)),
                    [l1II(811377 - 847802)] = -437790 - (-437870),
                    [l1II(-136996 + 100975)] = 551025 + -551075,
                    [l1II(878715 + -915086)] = false,
                    [l1II(-792307 - (-755895))] = l1II(-938554 - (-902652))
                }}
            }
            local I1II = {{{l1II(268095 - 304041), l1II(-561265 + 525131), true, l1II(116090 - 152165),
                            l1II(-1017070 - (-980606)), l1II(-42826 - (-6304))},
                           {l1II(-1016063 + 979885), l1II(137783 - 173925), true, l1II(-48398 - (-12256)),
                            l1II(286569 + -323033), l1II(-733509 - (-697270))},
                           {l1II(508464 + -544422), l1II(-771055 - (-735159)), true, l1II(308338 - 344555),
                            l1II(867212 - 903676), l1II(-429805 + 393379)},
                           {l1II(277186 - 313386), l1II(870560 - 906556), true, l1II(932006 - 968510),
                            l1II(349099 + -385563), l1II(892118 - 928125)},
                           {l1II(-412013 - (-375724)), l1II(775669 - 811641), true, l1II(583850 - 619891),
                            l1II(639668 + -676132), l1II(1000511 + -1037033)},
                           {l1II(756667 - 792889), l1II(-675656 - (-639668)), true, l1II(-331434 + 294925),
                            l1II(-722533 - (-686069)), l1II(-508479 - (-472495))},
                           {l1II(-743031 + 706920), l1II(467989 - 504112), false, l1II(883253 - 919549),
                            l1II(567107 - 603571), l1II(872075 - 908348)}},
                          {{l1II(-932221 + 895893), l1II(231106 - 267240), true, l1II(-389740 + 353665),
                            l1II(27684 - 63586), l1II(-432214 - (-395692))},
                           {l1II(-902780 + 866377), l1II(789608 - 825402), true, l1II(282793 + -318989),
                            l1II(377775 - 413677), l1II(-66914 + 30715)},
                           {l1II(676513 - 712758), l1II(-109456 - (-73314)), true, l1II(-752247 + 716105),
                            l1II(377583 - 413485), l1II(124950 - 161189)},
                           {l1II(-617518 - (-581362)), l1II(-997110 - (-961214)), true, l1II(-721654 + 685437),
                            l1II(-642289 - (-606387)), l1II(268712 + -305138)},
                           {l1II(-130212 + 93762), l1II(666988 - 703350), true, l1II(-271464 + 235316),
                            l1II(-141092 + 105190), l1II(-241162 - (-204710))},
                           {l1II(534641 + -570813), l1II(-323242 + 287270), true, l1II(-382316 + 346275),
                            l1II(874750 - 910652), l1II(-160229 + 123707)},
                           {l1II(-965823 - (-929533)), l1II(-910838 - (-874555)), false, l1II(-799390 - (-763320)),
                            l1II(-34977 + -925), l1II(804345 + -840690)},
                           {l1II(70306 + -106776), l1II(918941 - 954878), true, l1II(-686220 - (-650100)),
                            l1II(780731 - 816633), l1II(983934 + -1019747)},
                           {l1II(-479535 + 443216), l1II(815417 + -851734), true, l1II(-104903 - (-68450)),
                            l1II(386476 + -422378), l1II(193054 - 229543)},
                           {l1II(-791504 - (-755703)), l1II(890550 - 926397), true, l1II(-244328 + 207919),
                            l1II(-497263 + 461361), l1II(313834 + -350267)},
                           {l1II(-757582 - (-721142)), l1II(843751 - 879739), false, l1II(-828922 + 792413),
                            l1II(316397 - 352299), l1II(130197 - 166181)},
                           {l1II(-504432 + 468188), l1II(776184 + -812307), false, l1II(-1047680 + 1011384),
                            l1II(926592 - 962494), l1II(-867259 + 830986)}},
                          {{l1II(-649268 + 612919), l1II(-421805 + 385671), true, l1II(-964840 - (-928765)),
                            l1II(925629 + -961935), l1II(-747360 - (-710838))},
                           {l1II(592946 + -629096), l1II(-9824 + -26318), true, l1II(-393196 + 357054),
                            l1II(431837 - 468143), l1II(-947773 + 911534)},
                           {l1II(-574599 - (-538801)), l1II(129197 - 165093), true, l1II(296809 + -333026),
                            l1II(-831179 - (-794873)), l1II(588082 + -624508)},
                           {l1II(-640762 - (-604275)), l1II(-332355 - (-296105)), true, l1II(-185830 + 149642),
                            l1II(-73762 + 37456), l1II(-778936 - (-742583))},
                           {l1II(18401 + -54526), l1II(468271 + -504301), true, l1II(-801146 - (-765048)),
                            l1II(456558 + -492864), l1II(-312190 - (-276137))},
                           {l1II(1002687 + -1039179), l1II(-72088 - (-36001)), true, l1II(-902635 - (-866811)),
                            l1II(-1020945 - (-984639)), l1II(607863 - 643956)},
                           {l1II(-619959 - (-583922)), l1II(46270 - 82211), true, l1II(166757 + -202890),
                            l1II(354475 + -390781), l1II(184422 + -220363)},
                           {l1II(175525 + -211362), l1II(-946365 + 910377), true, l1II(277901 - 314410),
                            l1II(-660165 - (-623859)), l1II(-573825 - (-537841))},
                           {l1II(-154467 - (-118628)), l1II(173708 - 209831), false, l1II(679669 + -715965),
                            l1II(-98595 + 62289), l1II(228263 + -264536)},
                           {l1II(556849 + -593135), l1II(-1027612 - (-991295)), false, l1II(934745 - 971198),
                            l1II(-575474 + 539168), l1II(110748 - 147237)},
                           {l1II(-380473 - (-344171)), l1II(307236 - 343083), true, l1II(447022 + -483431),
                            l1II(428205 + -464511), l1II(716470 + -752903)}}}
            for I1II, Il1I in pairs(I1II) do
                local ll1I = #lIII[l1II(476399 + -512812)][l1II(-408439 - (-372076))]
                local II1I = -681461 + 681462
                for I1II, Il1I in pairs(Il1I) do
                    local lI1I, I11I, l11I, Ill1, lll1, IIl1, lIl1 = GetSpellInfo(Il1I[715896 - 715894])
                    if lI1I and lIII[l1II(-37793 + 1567)](Il1I[-628593 - (-628595)]) then
                        local I1II, lI1I
                        if II1I % (-44574 - (-44577)) == 47521 + -47520 then
                            I1II = -169312 - (-169317)
                            lI1I = true
                        elseif II1I % (426416 - 426413) == 94435 + -94433 then
                            I1II = -567227 - (-567282)
                            lI1I = false
                        else
                            I1II = -541704 - (-541809)
                            lI1I = false
                        end
                        local I11I = {
                            [l1II(485243 - 521328)] = l1II(242024 + -278110),
                            [l1II(-373391 - (-336874))] = l1II(-295593 + 259242) .. Il1I[-51234 + 51235],
                            [l1II(400875 - 437230)] = Il1I[-455150 + 455153],
                            [l1II(462310 - 498607)] = Il1I[-1037056 + 1037060],
                            [l1II(690869 + -726725)] = Il1I[498353 - 498351],
                            [l1II(19745 + -55981)] = Il1I[161959 - 161957],
                            [l1II(168165 + -204590)] = I1II,
                            [l1II(54242 + -90613)] = lI1I,
                            [l1II(-568428 - (-532016))] = Il1I[715382 + -715377]
                        }
                        if Il1I[-365035 + 365041] then
                            I11I[l1II(-523760 + 487524)] = Il1I[-401830 - (-401836)]
                        end
                        if II1I == 194662 + -194661 then
                        end
                        table[l1II(120556 - 156517)](lIII[l1II(-637364 + 600951)][l1II(-693814 + 657451)], ll1I + II1I,
                            I11I)
                        II1I = II1I + (476592 - 476591)
                    end
                end
            end
        end
        function lIII.ModeChanged(I1II)
            if I1II == l1II(437489 - 473391) then
                lIII[l1II(67874 + -104343)] = -783660 - (-783672)
            elseif I1II == l1II(372507 - 408813) then
                lIII[l1II(721654 + -758123)] = -328426 + 328438
            else
                lIII[l1II(-412717 + 376248)] = -542601 - (-542641)
            end
            local Il1I = not (I1II == l1II(207274 - 243176) or I1II == l1II(44769 + -81075))
            for ll1I, II1I in pairs(lIII[l1II(-355317 - (-319210))]) do
                if II1I[l1II(405042 - 441454)] then
                    if lIII[l1II(-786977 - (-750519))](II1I[l1II(-940221 + 903809)], I1II) or Il1I and
                        lIII[l1II(456261 - 492719)](II1I[l1II(409133 + -445545)], l1II(437796 - 474159)) or not Il1I and
                        lIII[l1II(429380 - 465838)](II1I[l1II(-919991 - (-883579))], l1II(-393580 + 357423)) then
                        II1I:Show()
                    else
                        II1I:Hide()
                    end
                end
            end
            if Il1I then
                I11I(GetStatus(l1II(-394796 + 358793)))
            end
            lIII[l1II(565652 - 601715)]()
        end
        local function lIl1(I1II)
            tInfo = GetRaidUnit(I1II[l1II(-329620 - (-293161))])
            if tInfo then
                if lIII[l1II(779377 - 815865)](tInfo, l1II(479215 + -515452)) then
                    lIII[l1II(209733 - 245928)]()
                    lIII[l1II(-45473 + 9113)](tInfo, l1II(-381240 - (-345003)), -212455 - (-212455), true)
                    lIII[l1II(738672 - 775032)](tInfo, l1II(-988927 + 952544), 1028928 + -1028928, false)
                    lIII[l1II(308798 - 344811)](lIII[l1II(-624627 + 588304)](I1II[l1II(453614 + -489441)]) ..
                                                    (tInfo[l1II(-626052 - (-590194))] ..
                                                        (l1II(-231207 + 195392) ..
                                                            lIII[l1II(-896636 + 860782)](l1II(-429433 - (-393196))))))
                end
            end
        end
        function lIII.HandlerBossEvent(I1II)
            if GetStatus(l1II(44802 - 81315)) then
                return
            end
            local Il1I
            if I1II[l1II(1037184 + -1073011)] == 304489 + -279916 or I1II[l1II(78833 - 114660)] == 147493 + -130637 then
                lIl1(I1II)
            end
            if I1II[l1II(123572 - 159653)] == l1II(-364573 - (-328554)) and I1II[l1II(809159 - 844986)] == 151781 +
                -129242 then
                Il1I = lIII[l1II(-507814 - (-471855))](I1II[l1II(-895868 + 859653)])
                if Il1I then
                    if lIII[l1II(78684 - 115172)](Il1I, l1II(756919 + -793302)) then
                        lIII[l1II(50752 - 86947)]()
                        lIII[l1II(283426 - 319786)](Il1I, l1II(267496 + -303879), 806201 - 806201, true)
                        lIII[l1II(-124112 - (-88099))](lIII[l1II(-42081 + 5758)](I1II[l1II(859899 + -895726)]) ..
                                                           (Il1I[l1II(-548785 + 512927)] ..
                                                               (l1II(577586 + -613401) ..
                                                                   lIII[l1II(976190 + -1012044)](l1II(-846906 + 810523)))))
                    elseif lIII[l1II(-244526 - (-208038))](Il1I, l1II(666037 + -702274)) then
                        lIII[l1II(518798 - 554993)]()
                        lIII[l1II(805362 - 841722)](Il1I, l1II(-63202 + 26965), 863483.5 - 863483, true)
                        lIII[l1II(-333994 + 297981)](lIII[l1II(949404 - 985727)](I1II[l1II(386476 + -422303)]) ..
                                                         (Il1I[l1II(1120 + -36978)] ..
                                                             (l1II(815481 + -851727) ..
                                                                 lIII[l1II(972849 - 1008703)](
                                        l1II(-1067085 - (-1030848))))))
                    end
                end
            end
            if I1II[l1II(156213 - 192294)] == l1II(-729207 + 693188) and I1II[l1II(746743 + -782570)] == 132836 +
                -108522 then
                Il1I = lIII[l1II(423853 + -459812)](I1II[l1II(-706614 + 670399)])
                if Il1I then
                    if lIII[l1II(-81769 - (-45281))](Il1I, l1II(-662453 + 626070)) then
                        lIII[l1II(912154 - 948349)]()
                        lIII[l1II(-167852 - (-131492))](Il1I, l1II(685557 + -721940), 809849 - 809849, true)
                        lIII[l1II(-105615 - (-69602))](lIII[l1II(292679 - 329002)](I1II[l1II(907644 + -943471)]) ..
                                                           (Il1I[l1II(6863 - 42721)] ..
                                                               (l1II(501680 + -537495) ..
                                                                   lIII[l1II(-310839 - (-274985))](l1II(99909 - 136292)))))
                    elseif lIII[l1II(-247471 - (-210983))](Il1I, l1II(-845510 - (-809273))) then
                        lIII[l1II(490287 + -526482)]()
                        lIII[l1II(-980357 - (-943997))](Il1I, l1II(-716610 - (-680373)), -952126 + 952127, true)
                        lIII[l1II(705546 - 741559)](lIII[l1II(-807259 - (-770936))](I1II[l1II(493245 - 529072)]) ..
                                                        (Il1I[l1II(-441774 + 405916)] ..
                                                            (l1II(443694 + -479794) ..
                                                                lIII[l1II(-488572 - (-452718))](l1II(19873 + -56110)))))
                    end
                end
            end
            if I1II[l1II(369963 + -406044)] == l1II(-515504 + 479485) and I1II[l1II(-282665 + 246838)] == 287138 -
                262824 then
                if UnitName(l1II(255873 - 292393)) == I1II[l1II(272639 - 309098)] then
                    lIII[l1II(-989025 - (-952830))]()
                    lIII[l1II(539413 - 575474)](-769528 + 769536,
                        GetSpellInfo(-526583 - (-550897)) .. l1II(824314 + -860287))
                end
            end
            if I1II[l1II(979662 - 1015743)] == l1II(-810425 + 774313) and I1II[l1II(-528560 + 492733)] == 67682 + -41069 then
                lIl1(I1II)
            end
            if I1II[l1II(869579 - 905660)] == l1II(-600705 - (-564593)) and I1II[l1II(515952 + -551779)] == 595058 +
                -568878 then
                Il1I = GetRaidUnit(I1II[l1II(-85219 + 48760)])
                if Il1I and Il1I[l1II(816377 + -852348)] == l1II(812464 - 848762) then
                    if lIII[l1II(-693820 - (-657332))](Il1I, l1II(196774 + -233017)) then
                        lIII[l1II(-346411 + 310216)]()
                        lIII[l1II(-844026 + 807666)](Il1I, l1II(619425 - 655668), 730807 + -730807, true)
                        lIII[l1II(886715 + -922728)](lIII[l1II(742007 + -778330)](I1II[l1II(547007 - 582834)]) ..
                                                         (Il1I[l1II(-897293 - (-861435))] ..
                                                             (l1II(-614489 - (-578674)) ..
                                                                 lIII[l1II(-652545 - (-616691))](
                                        l1II(-335420 - (-299177))))))
                    end
                end
            end
            if I1II[l1II(517552 + -553633)] == l1II(-822296 - (-785912)) and I1II[l1II(-116502 - (-80675))] == -763408 -
                (-819001) then
                lIII[l1II(290098 - 325930)](166565 + -166549, GetSpellInfo(956773 - 901180) .. l1II(839021 - 874811))
            end
            if I1II[l1II(-454878 - (-418797))] == l1II(-706294 + 669910) and I1II[l1II(245814 - 281641)] == -313962 +
                341770 then
                Il1I = GetRaidUnit(I1II[l1II(533169 + -569628)])
                if Il1I and Il1I[l1II(-881268 - (-845050))] ~= l1II(56635 - 93155) then
                    lIII[l1II(-544477 - (-508464))](lIII[l1II(-907102 - (-870779))](I1II[l1II(806329 + -842156)]) ..
                                                        Il1I[l1II(-342396 - (-306538))])
                    if lIII[l1II(1032448 + -1068936)](Il1I, l1II(29025 + -65021)) then
                        lIII[l1II(-573298 + 537103)]()
                        lIII[l1II(-370930 - (-334570))](Il1I, l1II(-707345 - (-671349)), -818233 + 818233, true)
                    elseif lIII[l1II(-311409 - (-274921))](Il1I, l1II(-377400 - (-341163))) then
                        lIII[l1II(-142116 + 105921)]()
                        lIII[l1II(-430061 + 393701)](Il1I, l1II(72802 + -109039), -323626 + 323626, true)
                    else
                        lIII[l1II(835608 - 871803)]()
                        lIII[l1II(938621 + -974981)](Il1I, l1II(182216 - 218599), 676533 + -676533, true)
                    end
                end
            end
        end
        function lIII.RegisterBossEvent()
        end
        function lIII.InstanceChanged(lIII, I1II, l1II, Il1I, ll1I, II1I, lI1I, I11I, l11I, Ill1)
        end
        local I1l1 = false
        local l1l1 = false
        function lIII.EncounterStart(I1II, Il1I, ll1I, II1I)
            if I1II == -673461 + 674106 or I1II == -246187 - (-247272) then
                if GetStatus(l1II(404589 + -440427)) and GetStatus(l1II(-722162 - (-685941))) then
                    SaveConfigValue(l1II(-741495 + 705613), false)
                    SaveConfigValue(l1II(984038 - 1020544), false)
                    SaveConfigValue(l1II(565278 - 601587), false)
                    SaveConfigValue(l1II(-45601 + 9649), false)
                    SaveConfigValue(l1II(352143 - 387948), false)
                    SaveConfigValue(l1II(593927 - 629748), false)
                    SaveConfigValue(l1II(-893298 - (-857403)), false)
                    SaveConfigValue(l1II(1033600 + -1069545), false)
                    SaveConfigValue(l1II(273904 - 310058), false)
                    SaveConfigValue(l1II(652532 + -688992), true)
                    SaveConfigValue(l1II(-529712 + 493292), false)
                    SaveConfigValue(l1II(-128228 + 92099), false)
                    lIII[l1II(638004 + -674017)](l1II(-547224 - (-511216)))
                    lIII[l1II(-924713 - (-888700))](l1II(239415 - 275625))
                    if GetStatus(l1II(124964 + -160802)) then
                        lIII[l1II(429037 + -465050)](l1II(-1080601 - (-1044608)))
                    end
                    l1l1 = true
                end
            end
        end
        function lIII.EncounterEnd(I1II, Il1I, ll1I, II1I, lI1I)
            if I1II == -73250 + 73895 or I1II == 784053 - 782968 then
                if l1l1 then
                    I1l1 = false
                    RestoreConfigValue(l1II(-654877 - (-618995)))
                    RestoreConfigValue(l1II(659956 + -696462))
                    RestoreConfigValue(l1II(577694 - 614003))
                    RestoreConfigValue(l1II(-461806 + 425854))
                    RestoreConfigValue(l1II(-500043 - (-464238)))
                    RestoreConfigValue(l1II(860047 - 895868))
                    RestoreConfigValue(l1II(-604649 - (-568754)))
                    RestoreConfigValue(l1II(-205454 - (-169509)))
                    RestoreConfigValue(l1II(-963390 + 927236))
                    RestoreConfigValue(l1II(553606 - 590066))
                    RestoreConfigValue(l1II(-195750 + 159330))
                    RestoreConfigValue(l1II(1016063 + -1052192))
                    lIII[l1II(-608223 - (-572210))](l1II(129764 + -165645))
                    l1l1 = false
                end
            end
        end
        local IlI1 = {}
        local llI1 = 468463 + -468463
        local function III1(Il1I, lI1I)
            if lIII[l1II(-19617 + -16820)] and GetStatus(l1II(-216228 - (-180390))) then
                if not I1l1 then
                    I1l1 = true
                    lIII[l1II(745419 - 781432)](l1II(-872560 - (-836218)))
                    lIII[l1II(534853 - 570866)](l1II(-618611 + 582176))
                    ll1I(l1II(67362 + -103822), false)
                    lIII[l1II(626355 + -662368)](l1II(206810 - 242728))
                    if GetStatus(l1II(362347 + -398444)) then
                        IlI1 = {}
                        llI1 = -745399 + 745399
                        for I1II, Il1I in pairs(HEAL_RAID_TANKS) do
                            print(Il1I[l1II(630644 + -666502)])
                            local ll1I = lIII[l1II(-139556 + 103105)](Il1I[l1II(696630 + -732848)], 214695 + -161132)
                            local lI1I = II1I(l1II(637348 - 673845))
                            print(lI1I, Il1I[l1II(-279738 - (-243880))])
                            if lI1I ~= Il1I[l1II(-185463 - (-149605))] and not ll1I then
                                IlI1[#IlI1 + (-678517 + 678518)] = Il1I
                                lIII[l1II(-145360 - (-109347))](l1II(724342 + -760689) .. Il1I[l1II(675957 + -711815)])
                            end
                        end
                        if #IlI1 ~= -312170 + 312172 then
                            lIII[l1II(-120400 - (-84387))](l1II(318506 + -354770) .. #IlI1)
                        end
                    end
                end
                if GetStatus(l1II(-563633 - (-527536))) then
                    if #IlI1 > -925117 + 925117 then
                        llI1 = llI1 + (737976 - 737975)
                        if llI1 > #IlI1 then
                            llI1 = 1030017 - 1030016
                        end
                        local Il1I = IlI1[llI1]
                        local ll1I = lIII[l1II(-551665 + 515214)](Il1I[l1II(-95068 - (-58850))], 251873 - 198310)
                        if lIII[l1II(-292619 - (-256104))](Il1I) and not ll1I then
                            if I1II(Il1I, l1II(-61666 + 25858)) then
                                return true
                            end
                            if Il1I and I1II(Il1I, l1II(-1069980 - (-1033984))) then
                                return true
                            end
                            if Il1I and I1II(Il1I, l1II(301341 - 337578)) then
                                return true
                            end
                            if Il1I and I1II(Il1I, l1II(219175 + -255022)) then
                                lIII[l1II(728139 - 764152)](l1II(416749 + -453206))
                                return true
                            end
                        end
                    end
                    for lIII, I1II in pairs(HEAL_RAID_TANKS) do
                    end
                end
                if not GetStatus(l1II(-343403 - (-307306))) then
                    local Il1I = lI1I
                    if Il1I and Il1I[l1II(-924587 - (-888060))] then
                        Il1I = GetTargetOrEnmysTarget()
                    end
                    if not Il1I then
                        local I1II = FindBossTargets()
                        if #I1II > -741239 - (-741239) then
                            Il1I = I1II[207399 - 207398]
                            lIII[l1II(-120080 - (-84067))](l1II(-163251 - (-127076)))
                        end
                    end
                    if not Il1I then
                        lIII[l1II(432322 - 468335)](l1II(-299881 + 263569))
                    end
                    if Il1I and I1II(Il1I, l1II(-479215 + 443407)) then
                        return true
                    end
                    if Il1I and I1II(Il1I, l1II(843130 + -879126)) then
                        return true
                    end
                    if Il1I and I1II(Il1I, l1II(-823738 + 787501)) then
                        return true
                    end
                    if Il1I and I1II(Il1I, l1II(291305 + -327152)) then
                        lIII[l1II(1033536 + -1069549)](l1II(-703734 + 667277))
                        return true
                    end
                end
            end
        end
        function lIII.SpellCastSuccess(I1II, Il1I, ll1I, II1I, lI1I, I11I)
            if ll1I == l1II(402860 + -439226) or ll1I == l1II(82851 + -119060) or ll1I == l1II(123878 - 159845) then
                if GetStatus(l1II(-340395 - (-304553))) then
                    if II1I then
                        lIII[l1II(-761401 - (-725110))](l1II(305897 + -342236) ..
                                                            ((I1II or l1II(-13636 - 22625)) ..
                                                                (l1II(766147 - 802041) ..
                                                                    ((ll1I or l1II(-534548 - (-498287))) ..
                                                                        (l1II(816877 - 853370) ..
                                                                            ((II1I or l1II(169089 - 205350)) ..
                                                                                l1II(201730 - 238119)))))),
                            IsInGroup(LE_PARTY_CATEGORY_INSTANCE) and l1II(-295169 - (-258792)) or IsInRaid() and
                                l1II(941655 - 977790) or IsInGroup() and l1II(-535921 + 499920))
                    else
                        lIII[l1II(-508402 - (-472111))](l1II(-171365 + 135026) .. ((I1II or l1II(-810169 + 773908)) ..
                                                            (l1II(-409773 + 373879) ..
                                                                ((ll1I or l1II(-51909 - (-15648))) ..
                                                                    l1II(192678 + -228470)))),
                            IsInGroup(LE_PARTY_CATEGORY_INSTANCE) and l1II(26529 + -62906) or IsInRaid() and
                                l1II(-1044736 + 1008601) or IsInGroup() and l1II(-305225 - (-269224)))
                    end
                end
            end
        end
        function lIII.OnSpellSucceeded(I1II, Il1I, ll1I)
            local II1I = GetSpellInfo(ll1I)
            if I1II == l1II(293481 + -330001) then
                if II1I == l1II(716265 - 752631) then
                    if GetStatus(l1II(969662 + -1005962)) then
                        lIII[l1II(-1036039 - (-999679))](HEAL_RAID[l1II(865339 + -901859)], l1II(-782200 + 745999),
                            819577 + -819577)
                        lIII[l1II(897808 - 933821)](l1II(-979966 + 943902))
                    end
                end
            end
        end
        function lIII.AutoCreateMacro()
            if lIII[l1II(129572 + -165798)](l1II(881339 + -917705)) then
                local I1II = lIII[l1II(303060 - 339499)](l1II(-166168 - (-130148)), nil, l1II(108529 - 144420),
                    -698806 + 698807)
            end
            if lIII[l1II(64354 + -100580)](l1II(170021 + -205988)) then
                local I1II = lIII[l1II(305364 - 341803)](l1II(7515 - 43617), nil, l1II(-795385 + 759106),
                    -902266 - (-902268))
            end
            if lIII[l1II(-815226 - (-779000))](l1II(-653796 - (-617587))) then
                local I1II = lIII[l1II(-902332 + 865893)](l1II(20592 - 57058), nil, l1II(104355 + -140757))
            end
            if lIII[l1II(-802106 - (-765880))](l1II(647172 - 683381)) then
                local I1II = lIII[l1II(-132346 - (-95907))](l1II(766840 + -802830), nil, l1II(210983 + -247132))
            end
            if lIII[l1II(-669877 + 633651)](l1II(751050 - 787128)) then
                local I1II = lIII[l1II(-823738 + 787299)](l1II(-409504 - (-373612)), nil, l1II(1009690 - 1046016))
            end
            if lIII[l1II(-983615 - (-947389))](l1II(-58402 + 22217)) then
                local I1II = lIII[l1II(-238695 + 202256)](l1II(-975268 - (-938877)), nil, l1II(-1042434 - (-1006015)))
            end
        end
        function lIII.AddNextCastAction(I1II)
            for I1II, Il1I in ipairs(I1II) do
                if Il1I == l1II(790135 - 826042) then
                    if HEAL_RAID_NAMES[UnitName(l1II(-807161 + 771284))] == l1II(-322769 - (-286249)) then
                        lIII[l1II(-396908 + 360895)](l1II(510869 - 546993))
                        return false
                    end
                    if not UnitExists(l1II(-241959 + 206082)) or not HEAL_RAID_NAMES[UnitName(l1II(974142 + -1010019))] then
                        lIII[l1II(-32333 - 3680)](l1II(892117 - 927997))
                        return false
                    end
                end
                if Il1I == l1II(-179349 - (-143140)) then
                    if HEAL_RAID_NAMES[UnitName(l1II(-80959 - (-44449)))] == l1II(-1008639 + 972119) then
                        lIII[l1II(547781 - 583794)](l1II(375724 + -412102))
                        return false
                    end
                    if not UnitExists(l1II(-179778 - (-143268))) or
                        not HEAL_RAID_NAMES[UnitName(l1II(802745 + -839255))] then
                        lIII[l1II(-658868 + 622855)](l1II(190037 - 226471))
                        return false
                    end
                end
                if Il1I == l1II(372447 - 408813) then
                    if lIII[l1II(405076 - 441518)] == 91875 + -91874 then
                        lIII[l1II(-605043 + 569030)](l1II(991871 + -1027734))
                        return false
                    end
                end
            end
            return true
        end
        function lIII.ClassInit()
            lI1I()
            lIII[l1II(496147 - 532465)](l1II(15840 + -52337), function(I1II)
                local Il1I = lIII[l1II(-924349 + 888242)][l1II(458142 - 494639)]
                if Il1I then
                    Il1I:SetText(I1II)
                end
            end)
            lIII[l1II(-526896 + 490578)](l1II(-184934 + 148812), function(I1II)
                local Il1I = lIII[l1II(-26475 - 9632)][l1II(-22778 - 13344)]
                if Il1I then
                    Il1I:SetText(I1II)
                end
            end)
            lIII[l1II(759352 + -795670)](l1II(-208745 - (-172389)), function(I1II)
                local Il1I = lIII[l1II(-947591 - (-911484))][l1II(851898 + -888371)]
                if Il1I then
                    local ll1I = lIII[l1II(31521 + -67891)](I1II)
                    local II1I = l1II(-956990 - (-921149)) ..
                                     (ll1I[l1II(-15034 - 21409)] .. (l1II(-275497 + 239110) .. I1II))
                    Il1I:SetText(II1I)
                end
            end)
            local I1II = {l1II(-320377 - (-283945)), l1II(-305961 + 269929), l1II(342740 - 378988),
                          l1II(851361 - 887868), l1II(-577330 + 541481), l1II(-825658 + 789562), l1II(171045 + -207248)}
            for I1II, Il1I in pairs(I1II) do
                if lIII[l1II(927612 - 963838)](Il1I) then
                    lIII[l1II(-612659 + 576157)][#lIII[l1II(224807 + -261309)] + (564787 - 564786)] = Il1I
                end
            end
            I1II = {l1II(-299534 - (-263400)), l1II(737448 - 773368), l1II(-336810 + 300364)}
            for I1II, Il1I in pairs(I1II) do
                if lIII[l1II(149093 + -185319)](Il1I) then
                    lIII[l1II(-1024192 + 988304)][#lIII[l1II(239609 - 275497)] + (779513 - 779512)] = Il1I
                end
            end
            lIII[l1II(-738352 - (-702518))] = lIII[l1II(625587 + -662108)]()
        end
        function lIII.ClassLoaded()
            local I1II = II1I(l1II(587186 + -623542))
            if (not I1II or I1II == l1II(188326 + -224375)) and lIII[l1II(-937597 + 901371)](l1II(-32737 + -3695)) then
                I1II = l1II(622003 + -658435)
                local Il1I = l1II(-199809 - (-163749)) .. I1II
                ll1I(l1II(958078 + -994434), l1II(-225063 + 188631))
                ll1I(l1II(-368043 + 331992), Il1I)
                lIII[l1II(-635646 - (-599539))][l1II(358123 + -394596)]:SetText(Il1I)
            end
            local Il1I = II1I(l1II(-871995 + 836076))
            if (not Il1I or Il1I == l1II(49810 - 85859)) and lIII[l1II(829369 - 865595)](l1II(836218 + -872352)) then
                Il1I = l1II(-322602 + 286468)
                local I1II = l1II(-590834 + 554670) .. Il1I
                ll1I(l1II(-609587 + 573668), l1II(195265 - 231399))
                ll1I(l1II(-228079 - (-191718)), I1II)
                lIII[l1II(-510320 + 474213)][l1II(603947 - 640116)]:SetText(I1II)
            end
        end
        function lIII.CanMoveSpell(I1II, Il1I)
            return Il1I == l1II(933565 + -969802) and
                       lIII[l1II(582598 - 619059)](l1II(945494 - 982014), l1II(945661 + -981920))
        end
        local function lII1()
            local I1II = II1I(l1II(-635060 + 598563))
            if InCombatLockdown() and
                (lIII[l1II(452718 + -488624)] > 827706 - 827706 and II1I(l1II(-209257 - (-172837)))) then
                local lIII = FindBossTargets()
                local Il1I = false
                if #lIII > 861691 - 861691 then
                    if I1II and I1II ~= l1II(-233079 - (-197030)) then
                        for lIII, l1II in pairs(lIII) do
                            if l1II == I1II then
                                Il1I = true
                            end
                        end
                    end
                    if not Il1I or not I1II or I1II == l1II(-127844 + 91795) then
                        I1II = lIII[117797 - 117796]
                    end
                end
            end
            return I1II
        end
        local I1I1 =
            {l1II(213706 - 250216), l1II(-414033 - (-378156)), l1II(-888311 - (-852410)), l1II(175339 - 211367)}
        local function l1I1(Il1I, lI1I)
            local I11I = lI1I and lI1I[l1II(-510704 + 474177)]
            local l11I = not GetStatus(l1II(136195 - 172069)) or UnitAffectingCombat(l1II(92579 + -129099)) or
                             UnitAffectingCombat(l1II(744666 - 781176))
            local Ill1, lll1 = Il1I[l1II(576114 + -612632)], Il1I[l1II(191587 - 227495)]
            local IIl1 = Il1I[l1II(-175858 - (-139812))]
            local lIl1 = lIII[l1II(-1002079 - (-965822))]() and lll1 < .9 or lIII[l1II(116196 + -152597)]() and Ill1 <
                             .9
            if GetStatus(l1II(-673461 + 637325)) and l11I then
                local Il1I = GetTargetOrEnmysTarget()
                if Il1I and (IsValidEmergency(Il1I) and not Il1I[l1II(820652 - 857147)]) then
                    if not lIII[l1II(458734 + -494908)] and GetStatus(l1II(-445616 - (-409581))) then
                        if I1II(Il1I, l1II(634518 - 670901)) then
                            lIII[l1II(-436270 + 400328)] = true
                            lIII[l1II(-231847 + 195814)] = l1II(909756 + -945555)
                            return true
                        end
                    end
                    Il1I[l1II(-278126 - (-242280))], Il1I[l1II(-701739 - (-665333))] =
                        lIII[l1II(643911 - 680117)](Il1I, lIII[l1II(233575 + -269863)])
                    if GetStatus(l1II(1033600 + -1069635)) or Il1I[l1II(-199083 - (-163237))] <=
                        GetStatusNumber(l1II(446363 - 482863)) / (223847 + -223747) then
                        if lIII[l1II(100821 - 137188)](Il1I) then
                            lIII[l1II(463022 + -498964)] = true
                            lIII[l1II(354859 - 390892)] = l1II(-179622 + 143279)
                            return true
                        end
                    end
                end
            end
            if InCombatLockdown() and (not lIII[l1II(-1076373 - (-1039936))] and
                (GetStatus(l1II(490991 + -526886)) and Ill1 <= GetStatusNumber(l1II(-105818 - (-69794))) /
                    (-167333 + 167433))) then
                if I1II(Il1I, l1II(935229 + -971539)) then
                    lIII[l1II(-922876 - (-886843))] = l1II(-925347 - (-889468))
                    return true
                end
                if I1II(Il1I, l1II(-345195 + 309359)) then
                    lIII[l1II(1037696 + -1073729)] = l1II(-958664 - (-922813))
                    return true
                end
                if I1II(Il1I, l1II(287374 - 323370)) then
                    lIII[l1II(-149477 + 113444)] = l1II(710262 + -746716)
                    return true
                end
                if lIII[l1II(-193170 - (-156709))](Il1I[l1II(855291 + -891509)], GetSpellInfo(l1II(-897694 - (-861435)))) and
                    I1II(Il1I, l1II(-718902 + 682665)) then
                    lIII[l1II(773368 + -809401)] = l1II(-621692 - (-585650))
                    return true
                end
                if GetStatus(l1II(489031 - 524976)) then
                    local ll1I = InCombatLockdown() and HEAL_RAID_ATTACKED_UNITS[l1II(439367 - 475887)]
                    if ll1I and I1II(Il1I, l1II(260904 + -296982)) then
                        lIII[l1II(-865211 - (-829178))] = l1II(432237 + -468235)
                        return true
                    end
                end
                if lIII[l1II(272104 + -308576)] then
                    if GetStatus(l1II(828794 + -864948)) and I1II(Il1I, l1II(-749111 + 712791)) then
                        lIII[l1II(701942 - 737975)] = l1II(988735 + -1024958)
                        return true
                    end
                end
            end
            if GetStatus(l1II(-222928 - (-187046))) and
                (lIII[l1II(-871291 + 834891)] <= (GetStatusNumber(l1II(760019 - 795833)) or -1014847 + 1014907) and
                    lIII[l1II(825658 + -862183)]() > -532401 - (-532401)) then
                if I1II(Il1I, l1II(962814 + -999208)) then
                    return true
                end
            end
            if InCombatLockdown() and (GetStatus(l1II(-785236 - (-749431))) and
                (Ill1 <= (GetStatusNumber(l1II(449390 + -485661)) or 786016 - 785976) / (-128676 + 128776) and
                    lIII[l1II(26835 - 63202)](Il1I))) then
                lIII[l1II(32 - 36065)] = l1II(275817 + -312235)
                return true
            end
            if InCombatLockdown() and GetStatus(l1II(192550 + -228542)) then
                local Il1I = lII1()
                if Il1I and Il1I ~= l1II(965486 - 1001535) then
                    local lI1I = HEAL_RAID_NAMES[Il1I]
                    if not lI1I then
                        ll1I(l1II(-840186 + 803689), l1II(733687 + -769736))
                    else
                        if II1I(l1II(936317 + -972814)) ~= Il1I then
                            ll1I(l1II(519392 - 555889), Il1I)
                            lIII[l1II(-411097 - (-375084))](l1II(472943 + -509212) .. Il1I)
                        end
                        if UnitLevel(lI1I) > -578678 - (-578738) and I1II(HEAL_RAID[lI1I], l1II(932063 - 968574)) then
                            lIII[l1II(-388204 - (-352171))] = l1II(-886169 - (-849914))
                            return true
                        end
                    end
                end
            end
            if GetStatus(l1II(-163749 + 127354)) then
                local ll1I = II1I(l1II(-863611 + 827255))
                if ll1I and (ll1I ~= l1II(822842 + -858891) and
                    (not lIII[l1II(956798 + -993259)](l1II(-940004 - (-903484)), ll1I) and I1II(Il1I, ll1I))) then
                    lIII[l1II(77346 + -113379)] = l1II(-899644 + 863573)
                    return true
                end
            end
            local I1l1 = battleQueueStatus() == -223396 - (-223399) or InCombatLockdown()
            if I1l1 and (GetStatus(l1II(-654516 + 618251)) and II1I(l1II(336682 + -372601))) then
                local Il1I = lIII[l1II(-868788 - (-832954))][l1II(-971162 - (-934973))] > 1028160 - 1028160
                if lIII[l1II(905404 + -941238)][l1II(349583 - 385772)] > 717366 + -717366 and
                    not lIII[l1II(720886 + -757347)](l1II(-915235 - (-878715)), l1II(-59454 - (-23265))) then
                    for Il1I, ll1I in ipairs(I1I1) do
                        if UnitExists(ll1I) and UnitCanAttack(l1II(966103 - 1002623), ll1I) then
                            if I1II(ll1I, II1I(l1II(37139 - 73058))) then
                                lIII[l1II(216103 - 252136)] = l1II(-652020 + 616002)
                                return true
                            end
                        end
                    end
                end
                local ll1I = lI1I
                if ll1I and not ll1I[l1II(-866171 + 829644)] then
                    ll1I = GetTargetsEnemy()
                end
                if ll1I and ll1I[l1II(-287529 + 251002)] then
                    if GetStatus(l1II(327850 + -363979)) and
                        not lIII[l1II(534513 + -570483)](ll1I[l1II(-108508 - (-72290))], II1I(l1II(-884425 - (-848506)))) then
                        if I1II(ll1I, II1I(l1II(-203430 + 167511))) then
                            lIII[l1II(-373996 + 337963)] = l1II(-653428 + 617481) .. II1I(l1II(-386540 + 350621))
                            return true
                        end
                    end
                end
            end
            if InCombatLockdown() then
                if GetStatus(l1II(-429293 + 392833)) and Il1I[l1II(-241194 - (-205286))] < .7 then
                    if GetStatus(l1II(-910780 + 874828)) and I1II(Il1I, l1II(240483 - 276457)) or
                        I1II(Il1I, l1II(-503798 - (-467951))) then
                        lIII[l1II(-301161 - (-265128))] = l1II(-434157 + 398140)
                        return true
                    end
                end
                if GetStatus(l1II(-4320 + -32060)) then
                    local lI1I = II1I(l1II(-332970 + 296848))
                    if (lI1I == l1II(-500095 - (-464046)) or lI1I == nil) and I1II(Il1I, l1II(324778 + -361095)) then
                        return true
                    end
                    local I11I = HEAL_RAID_NAMES[lI1I]
                    if not I11I then
                        ll1I(l1II(-938493 + 902371), l1II(463790 + -499839))
                    else
                        local Il1I = HEAL_RAID[I11I]
                        if I1II(Il1I, l1II(406317 + -442634)) then
                            lIII[l1II(1006527 - 1042560)] = l1II(-702070 + 665980)
                            return true
                        end
                    end
                end
            end
            if III1(Il1I, lI1I) then
                return true
            end
        end
        local function Il11(Il1I, ll1I)
            local lI1I = ll1I and ll1I[l1II(-32911 - 3616)]
            local I11I = not GetStatus(l1II(-752695 + 716821)) or UnitAffectingCombat(l1II(-693020 - (-656500))) or
                             UnitAffectingCombat(l1II(222282 - 258792))
            local l11I, Ill1 = Il1I[l1II(-35654 - 864)], Il1I[l1II(175267 - 211175)]
            local lll1 = Il1I[l1II(386655 - 422701)]
            local IIl1 = lIII[l1II(-521712 + 485455)]() and Ill1 < .9 or lIII[l1II(-324378 - (-287977))]() and l11I < .9
            local lIl1 = II1I(l1II(-738743 + 702335))
            if lIl1 == l1II(-808714 - (-772408)) then
                if InCombatLockdown() and
                    (GetStatus(l1II(-761400 + 725595)) and l11I <= GetStatusNumber(l1II(654278 - 690549)) /
                        (483603 - 483503)) then
                    if lIII[l1II(927037 + -963498)](l1II(-163276 - (-126756)), -441014 - (-500592)) and
                        I1II(Il1I, l1II(500400 + -536637)) then
                        lIII[l1II(809209 - 845242)] = l1II(1036480 + -1072522)
                        return true
                    end
                end
                if InCombatLockdown() and
                    (GetStatus(l1II(956734 + -992629)) and l11I <= GetStatusNumber(l1II(304937 + -340961)) /
                        (764536 + -764436)) then
                    if lIII[l1II(864059 + -900520)](l1II(121661 - 158181), -725110 + 784688) and
                        I1II(Il1I, l1II(976946 - 1013183)) then
                        lIII[l1II(863099 - 899132)] = l1II(392419 - 428461)
                        return true
                    end
                    if I1II(Il1I, l1II(832741 - 869051)) then
                        lIII[l1II(-302633 - (-266600))] = l1II(-342571 + 306692)
                        return true
                    end
                    if I1II(Il1I, l1II(-925629 + 889793)) then
                        lIII[l1II(-155045 + 119012)] = l1II(460270 + -496121)
                        return true
                    end
                    if lIII[l1II(873412 - 909884)] then
                        if GetStatus(l1II(-167589 + 131435)) and I1II(Il1I, l1II(838235 - 874555)) then
                            lIII[l1II(-1057217 - (-1021184))] = l1II(-1001663 + 965440)
                            return true
                        end
                    end
                    if GetStatus(l1II(395716 - 431661)) then
                        local ll1I = InCombatLockdown() and HEAL_RAID_ATTACKED_UNITS[l1II(-62498 + 25978)]
                        if ll1I and I1II(Il1I, l1II(-965419 - (-929341))) then
                            lIII[l1II(1020288 + -1056321)] = l1II(-881467 + 845469)
                            return true
                        end
                    end
                end
            end
            if GetStatus(l1II(-696415 - (-660020))) and
                (II1I(l1II(853690 + -890046)) and
                    (not lIII[l1II(-37153 + 692)](l1II(21857 + -58377), II1I(l1II(323370 + -359726))) and
                        I1II(Il1I, II1I(l1II(840442 + -876798))))) then
                return true
            end
        end
        function lIII.DoUrgentAction(lIII, I1II)
            if not GetStatus(l1II(565746 + -601967)) then
                return Il11(lIII, I1II)
            else
                return l1I1(lIII, I1II)
            end
        end
        function lIII.DoInterruptGCD(Il1I, ll1I, lI1I, I11I, l11I, Ill1)
            if II1I(l1II(384364 + -420772)) ~= l1II(32420 - 68322) then
                return false
            end
            if lIII[l1II(-150501 + 114595)] == -588973 - (-589618) or lIII[l1II(359979 + -395885)] == -24737 + 25822 then
                if Ill1 == -827770 + 893904 and not GetStatus(l1II(7118 - 43041)) then
                    return false
                end
                if (Ill1 == -405557 - (-472879) or GetSpellName(Ill1) == l1II(-439949 - (-403693))) and
                    not GetStatus(l1II(-31031 - 5152)) then
                    return false
                end
            end
            local lll1, IIl1 = lIII[l1II(245034 - 281193)](ll1I)
            if IIl1 <= -154469 + 154479 and
                ((UnitCreatureType(ll1I) == l1II(-122532 + 86634) or UnitCreatureType(ll1I) == l1II(-902614 - (-866299))) and
                    I1II(Il1I, l1II(-1080155 - (-1044032)))) then
                return true
            end
            if IIl1 <= 178854 + -178824 and I1II(ll1I, l1II(536055 - 572338)) then
                return true
            end
            if IIl1 <= 70762 - 70754 and I1II(Il1I, l1II(-949222 - (-912956))) then
                return true
            end
        end
        function lIII.DoCommonAction(Il1I)
            if not GetStatus(l1II(-23197 - 13024)) then
                if InCombatLockdown() then
                end
                if GetStatus(l1II(769498 - 805497)) and
                    (II1I(l1II(-954164 - (-917756))) == l1II(178729 - 214631) and I1II(Il1I, l1II(-444878 - (-408941)))) then
                    return true
                end
            else
                if InCombatLockdown() then
                    if GetStatus(l1II(229991 + -266451)) and Il1I[l1II(918266 - 954174)] < .7 then
                        if GetStatus(l1II(591171 - 627123)) and I1II(Il1I, l1II(-1027200 + 991226)) or
                            I1II(Il1I, l1II(-502069 - (-466222))) then
                            lIII[l1II(827514 + -863547)] = l1II(-519840 - (-483823))
                            return true
                        end
                    end
                    if GetStatus(l1II(-877782 - (-841402))) then
                        local lI1I = II1I(l1II(-34017 + -2105))
                        if (lI1I == l1II(-899468 - (-863419)) or lI1I == nil) and I1II(Il1I, l1II(983550 + -1019867)) then
                            return true
                        end
                        local I11I = HEAL_RAID_NAMES[lI1I]
                        if not I11I then
                            ll1I(l1II(-15200 + -20922), l1II(-81123 + 45074))
                        else
                            local Il1I = HEAL_RAID[I11I]
                            if I1II(Il1I, l1II(976482 - 1012799)) then
                                lIII[l1II(-659380 + 623347)] = l1II(-798962 - (-762872))
                                return true
                            end
                        end
                    end
                end
            end
        end
        local function ll11(lIII)
            if not GetStatus(l1II(-131620 + 95561)) then
                return false
            end
            if GetStatus(l1II(90698 - 127012)) and lIII == l1II(297321 + -333250) then
                return true
            end
            if GetStatus(l1II(511280 + -547319)) and lIII == l1II(315370 + -351775) then
                return true
            end
            if GetStatus(l1II(-175669 - (-139300))) and lIII == l1II(887163 + -923307) then
                return true
            end
            if GetStatus(l1II(-91939 + 55465)) and lIII == l1II(-845562 + 809295) then
                return true
            end
            if GetStatus(l1II(-259176 + 222875)) and lIII == l1II(-328711 - (-292521)) then
                return true
            end
            if GetStatus(l1II(828093 - 864251)) and lIII == l1II(-700622 - (-664309)) then
                return true
            end
            if GetStatus(l1II(-740231 - (-704438))) and lIII == l1II(-244244 - (-208358)) then
                return true
            end
            if GetStatus(l1II(-785780 - (-749495))) and lIII == l1II(146789 + -183147) then
                return true
            end
            if GetStatus(l1II(-301131 - (-265064))) and lIII == l1II(1031040 + -1067210) then
                return true
            end
            if GetStatus(l1II(-678233 - (-642228))) and lIII == l1II(1015871 + -1052342) then
                return true
            end
            return false
        end
        function lIII.HotTeam(Il1I, ll1I)
            if not Il1I then
                lIII[l1II(-445978 - (-409965))](l1II(-1008319 + 972534))
                return
            end
            local II1I = HEAL_RAID[l1II(768529 - 805049)]
            local lI1I, I11I = Il1I[l1II(-483316 - (-447470))], Il1I[l1II(329973 - 366379)]
            local l11I = Il1I
            if lIII[l1II(-372204 + 335753)](Il1I[l1II(214119 + -250337)], 196639 - 143076) and
                (ll1I ~= nil and Il1I ~= ll1I) then
                l11I = ll1I
            end
            if lIII[l1II(-528112 + 491651)](l1II(-375276 + 338756), l1II(77441 - 113700)) and
                I1II(l11I, l1II(100951 - 137188)) then
                return true
            end
            if GetStatus(l1II(-943101 + 906595)) then
                if lIII[l1II(560497 - 596402)](l1II(-325893 - (-289897))) and I1II(l11I, l1II(-732358 - (-696310))) then
                    return true
                end
            else
                if lIII[l1II(-397548 - (-361643))](l1II(541782 - 577778)) and I1II(l11I, l1II(-165349 + 129353)) then
                    return true
                end
            end
            local Ill1 = InCombatLockdown() and HEAL_RAID_ATTACKED_UNITS[Il1I[l1II(-408557 + 372339)]]
            if GetStatus(l1II(854394 + -890339)) and
                (Ill1 and (lI1I <= GetStatusNumber(l1II(-420269 + 383785)) / (899040 - 898940) and
                    (UnitAffectingCombat(Il1I[l1II(1027136 + -1063354)]) and
                        (ll11(Il1I[l1II(-843570 - (-807545))]) and Il1I[l1II(359977 - 395948)] ~=
                            l1II(1001471 + -1037769))))) then
                if I1II(Il1I, l1II(632244 + -668322)) then
                    return true
                end
            end
            if InCombatLockdown() and Il1I[l1II(808360 - 844218)] ~= II1I[l1II(-514544 + 478686)] then
                if GetStatus(l1II(281321 + -317630)) and
                    (lI1I < 191526 + -191525.75 and I1II(l11I, l1II(-318122 + 281802))) then
                    lIII[l1II(-546353 + 510320)] = l1II(-213351 + 177401)
                    return true
                end
                if GetStatus(l1II(393708 + -429529)) and
                    (lI1I < GetStatusNumber(l1II(-706956 - (-670453))) / (204774 + -204674) and
                        II1I[l1II(953918 + -990436)] > .6) then
                    if I1II(Il1I, l1II(-168597 - (-132388))) then
                        return true
                    end
                end
            end
            local lll1 = lIII[l1II(-985624 - (-949629))](Il1I)
            if lll1 and I1II(l11I, lll1) then
                return true
            end
        end
        function lIII.HealTeam(Il1I, ll1I)
            if not Il1I then
                lIII[l1II(-290281 + 254268)](l1II(918716 + -955139))
                return
            end
            local II1I = HEAL_RAID[l1II(53307 - 89827)]
            local lI1I, I11I = Il1I[l1II(530796 - 566642)], Il1I[l1II(80034 + -116440)]
            local l11I = Il1I
            if lIII[l1II(-789496 + 753045)](Il1I[l1II(685692 - 721910)], -500976 + 554539) and
                (ll1I ~= nil and Il1I[l1II(-437294 + 401436)] ~= ll1I[l1II(-275241 + 239383)]) then
                l11I = ll1I
            end
            local Ill1 = InCombatLockdown() and HEAL_RAID_ATTACKED_UNITS[Il1I[l1II(640123 - 676341)]]
            if GetStatus(l1II(-15840 + -20105)) and
                (Ill1 and (lI1I <= GetStatusNumber(l1II(165349 + -201833)) / (285965 - 285865) and
                    (UnitAffectingCombat(Il1I[l1II(-1038016 + 1001798)]) and
                        (ll11(Il1I[l1II(-700982 + 664957)]) and Il1I[l1II(-1003521 - (-967550))] ~=
                            l1II(714925 - 751223))))) then
                if I1II(Il1I, l1II(8179 - 44257)) then
                    return true
                end
            end
            if lIII[l1II(-459566 + 423105)](l1II(745911 + -782431), l1II(-498897 - (-462638))) and
                I1II(l11I, l1II(560421 - 596658)) then
                return true
            end
            if GetStatus(l1II(744695 + -781201)) then
                if lIII[l1II(-913578 - (-877371))](l1II(-629070 - (-593074))) and I1II(l11I, l1II(-871419 + 835371)) then
                    return true
                end
            else
                if lIII[l1II(942461 + -978668)](l1II(-121636 + 85640)) and I1II(l11I, l1II(263437 - 299433)) then
                    return true
                end
            end
            if InCombatLockdown() and Il1I[l1II(-316347 - (-280489))] ~= II1I[l1II(293592 - 329450)] then
                if GetStatus(l1II(-713014 + 676705)) and
                    (lI1I < -17697 + 17697.25 and I1II(l11I, l1II(974559 - 1010879))) then
                    lIII[l1II(-639924 - (-603891))] = l1II(692661 + -728611)
                    return true
                end
                if GetStatus(l1II(-858022 - (-822201))) and
                    (lI1I < GetStatusNumber(l1II(370134 - 406637)) / (780280 + -780180) and II1I[l1II(779576 + -816094)] >
                        .6) then
                    if I1II(Il1I, l1II(-498143 - (-461934))) then
                        return true
                    end
                end
            end
            if lIII[l1II(-909308 + 872847)](l1II(1015807 + -1052327), l1II(638402 - 674869)) and
                I1II(l11I, l1II(-824250 + 787867)) then
                return true
            end
            local lll1 = lIII[l1II(-1016576 + 980238)](Il1I)
            if lll1 and I1II(l11I, lll1) then
                return true
            end
        end
        function lIII.AutoHealTeam(I1II)
            if lIII[l1II(731498 - 767672)] then
                return lIII[l1II(-889730 - (-853754))](I1II)
            else
                return lIII[l1II(-175333 + 139283)](I1II)
            end
        end
        local function II11(Il1I)
            if GetStatus(l1II(743415 + -779689)) and (Il1I[l1II(-554001 - (-517936))] and lIII[l1II(-147173 + 111194)]) then
                local ll1I = lIII[l1II(285353 + -321353)](Il1I[l1II(184614 + -220832)], lIII[l1II(-937917 + 901500)])
                if not ll1I and I1II(Il1I, lIII[l1II(536359 - 572338)]) then
                    return true
                end
            end
            if GetStatus(l1II(-473263 + 437456)) and (Il1I[l1II(577371 - 613235)] and lIII[l1II(1037376 + -1073906)]) then
                if I1II(Il1I, lIII[l1II(-666342 - (-629812))]) then
                    return true
                end
            end
            if GetStatus(l1II(987030 - 1023168)) and (Il1I[l1II(-589170 + 552977)] and lIII[l1II(646644 + -682781)]) then
                if I1II(Il1I, lIII[l1II(408517 - 444654)]) then
                    return true
                end
            end
        end
        function lIII.DoDispelAction()
            if not GetStatus(l1II(821961 - 858235)) and
                (not GetStatus(l1II(-473583 + 437445)) and not GetStatus(l1II(-449740 - (-413933)))) then
                return false
            end
            for I1II, Il1I in pairs(HEAL_RAID) do
                if Il1I[l1II(-605548 - (-569266))] and
                    (lIII[l1II(-753399 + 716884)](Il1I) and not Il1I[l1II(-720502 + 684007)]) then
                    if Il1I[l1II(1760 + -37731)] == l1II(620586 - 656884) and II11(Il1I) then
                        lIII[l1II(636404 - 672437)] = l1II(910588 + -946631)
                        return true
                    end
                    if Il1I[l1II(-23201 + -13017)] == l1II(323139 - 359659) and II11(Il1I) then
                        lIII[l1II(351019 + -387052)] = l1II(-364154 - (-327978))
                        return true
                    end
                    if II11(Il1I) then
                        lIII[l1II(-805753 - (-769720))] = l1II(898348 - 934205)
                        return true
                    end
                end
            end
        end
        function lIII.DoAttackAction(Il1I, ll1I)
            local lI1I, I11I = Il1I[l1II(-227020 - (-190502))], Il1I[l1II(149666 - 185574)] * (-373164 + 373264)
            local l11I = Il1I[l1II(710710 + -746980)]
            local Ill1 = ll1I and ll1I[l1II(-1076262 - (-1039744))] <= .2
            local lll1 = lIII[l1II(29473 + -65568)]()
            local IIl1 = lIII[l1II(-66914 + 30986)]()
            local lIl1 = (GetStatus(l1II(-286889 + 251005)) and lll1 or GetStatus(l1II(305321 + -341601))) and
                             (GetStatus(l1II(416 + -36697)) or UnitLevel(l1II(-175682 - (-139172))) == 914811 - 914812)
            local I1l1, l1l1 = lIII[l1II(-818233 + 782074)](l1II(270156 - 306666))
            local function IlI1()
                local lI1I = I11I <= -24919 - (-24929)
                local l11I = l1l1 <= 921725 + -921723
                if GetStatus(l1II(-857339 + 821340)) and I1II(Il1I, l1II(198278 - 234215)) then
                    return true
                end
                if UnitCanAttack(l1II(-628339 + 591819), l1II(507312 + -543822)) and
                    (not UnitIsUnit(l1II(-140644 + 104124), l1II(-497834 - (-461806))) and
                        not UnitIsPVP(l1II(375980 + -412490))) then
                    if GetStatus(l1II(-146149 + 109672)) then
                        local lIII = GetRaidUnit(l1II(902268 + -938296))
                        if not lIII or lIII and lIII[l1II(-194790 + 158819)] ~= l1II(-291753 + 255455) then
                            if I1II(ll1I, l1II(4010 - 40097)) then
                                return true
                            end
                        end
                    end
                    if GetStatus(l1II(262834 - 298665)) then
                        local lIII = GetRaidUnit(l1II(838906 + -874934))
                        if lIII and lIII[l1II(-146982 - (-111011))] ~= l1II(239271 + -275569) then
                            if I1II(lIII, l1II(-831107 - (-794873))) then
                                return true
                            end
                        end
                    end
                end
                if GetStatus(l1II(-37894 - (-1504))) and (Il1I[l1II(-770289 - (-734007))] and II11(Il1I)) then
                    return true
                end
                if GetStatus(l1II(-916476 + 880213)) then
                    if GetStatus(l1II(928510 - 964862)) and
                        (not lI1I and (Ill1 and I1II(ll1I, l1II(-760686 - (-724790))))) then
                        return true
                    end
                    if GetStatus(l1II(-210151 + 174186)) and I1II(Il1I, l1II(-825301 - (-788984))) then
                        return true
                    end
                    if GetStatus(l1II(158181 + -194097)) and (l11I and I1II(Il1I, l1II(772408 + -808202))) then
                        return true
                    end
                    if GetStatus(l1II(-689077 + 653080)) and I1II(Il1I, l1II(344613 - 380460)) then
                        lIII[l1II(211495 - 247528)] = l1II(-431661 + 395644)
                        return true
                    end
                    if GetStatus(l1II(-902870 - (-866683))) and
                        ((UnitCreatureType(ll1I[l1II(-990904 - (-954686))]) == l1II(863554 - 899452) or
                            UnitCreatureType(ll1I[l1II(730238 - 766456)]) == l1II(-108195 + 71880)) and
                            (not lI1I and (l11I and I1II(Il1I, l1II(708828 - 744951))))) then
                        return true
                    end
                    if GetStatus(l1II(-160551 - (-124068))) and (not lI1I and I1II(ll1I, l1II(468021 - 504304))) then
                        return true
                    end
                    if GetStatus(l1II(-290409 + 254343)) and lIII[l1II(251484 - 287849)]() >= 910974 - 910972 then
                        if GetStatus(l1II(-330794 + 294717)) and I1II(ll1I, l1II(-839866 + 803504)) then
                            return true
                        end
                        if GetStatus(l1II(-1035666 - (-999487))) and
                            (not lI1I and (l1l1 <= -938555 - (-938557) and I1II(Il1I, l1II(542660 - 578802)))) then
                            return true
                        end
                        if GetStatus(l1II(-308180 - (-271848))) and I1II(ll1I, l1II(-698681 - (-662709))) then
                            return true
                        end
                    else
                        if GetStatus(l1II(-73421 - (-37089))) and I1II(ll1I, l1II(811574 - 847546)) then
                            return true
                        end
                        if GetStatus(l1II(292585 + -328764)) and
                            (not lI1I and (l1l1 <= -14048 + 14050 and I1II(Il1I, l1II(400960 - 437102)))) then
                            return true
                        end
                        if GetStatus(l1II(-291049 + 254972)) and I1II(ll1I, l1II(-701622 + 665260)) then
                            return true
                        end
                    end
                    if GetStatus(l1II(934771 - 971262)) and
                        (II1I(l1II(-570752 - (-534833))) and I1II(ll1I, II1I(l1II(-441518 + 405599)))) then
                        return true
                    end
                    if GetStatus(l1II(849146 + -885611)) and I1II(ll1I, l1II(-51170 + 15182)) then
                        return true
                    end
                else
                    if GetStatus(l1II(493296 - 529648)) and
                        (not lI1I and (Ill1 and I1II(ll1I, l1II(-925172 - (-889276))))) then
                        return true
                    end
                    if GetStatus(l1II(928957 + -964954)) and I1II(Il1I, l1II(-359793 - (-323946))) then
                        lIII[l1II(899324 - 935357)] = l1II(783416 + -819433)
                        return true
                    end
                    if GetStatus(l1II(220199 + -256386)) and
                        ((UnitCreatureType(ll1I[l1II(-535601 + 499383)]) == l1II(382323 - 418221) or
                            UnitCreatureType(ll1I[l1II(-695470 - (-659252))]) == l1II(816479 - 852794)) and
                            (not lI1I and (l11I and I1II(Il1I, l1II(-1047514 - (-1011391)))))) then
                        return true
                    end
                    if GetStatus(l1II(-513904 + 477421)) and (not lI1I and I1II(ll1I, l1II(-461288 - (-425005)))) then
                        return true
                    end
                    if GetStatus(l1II(-5088 + -31403)) and
                        (II1I(l1II(-196404 - (-160485))) and I1II(ll1I, II1I(l1II(889070 - 924989)))) then
                        return true
                    end
                    if GetStatus(l1II(661972 - 698038)) and lIII[l1II(536817 + -573182)]() >= -357675 + 357677 then
                        if GetStatus(l1II(-441050 - (-404973))) and I1II(ll1I, l1II(-583986 + 547624)) then
                            return true
                        end
                        if GetStatus(l1II(-687239 - (-651060))) and
                            (not lI1I and (l1l1 <= -222055 + 222057 and I1II(Il1I, l1II(-882747 + 846605)))) then
                            return true
                        end
                        if GetStatus(l1II(-343638 - (-307306))) and I1II(ll1I, l1II(591983 - 627955)) then
                            return true
                        end
                        if GetStatus(l1II(558257 + -594173)) and (l11I and I1II(Il1I, l1II(727351 + -763145))) then
                            return true
                        end
                    else
                        if GetStatus(l1II(-654367 - (-618035))) and I1II(ll1I, l1II(96160 - 132132)) then
                            return true
                        end
                        if GetStatus(l1II(697654 + -733833)) and
                            (not lI1I and (l1l1 <= 800697 + -800695 and I1II(Il1I, l1II(458158 + -494300)))) then
                            return true
                        end
                        if GetStatus(l1II(368064 - 404141)) and I1II(ll1I, l1II(98787 + -135149)) then
                            return true
                        end
                        if GetStatus(l1II(1011124 - 1047040)) and (l11I and I1II(Il1I, l1II(441134 + -476928))) then
                            return true
                        end
                    end
                    if GetStatus(l1II(647096 - 683061)) and I1II(Il1I, l1II(-274024 + 237707)) then
                        return true
                    end
                    if GetStatus(l1II(767800 + -804265)) and I1II(ll1I, l1II(-838842 + 802854)) then
                        return true
                    end
                end
            end
            local function llI1()
                local lI1I = l1l1 <= 633652 + -633650
                if GetStatus(l1II(-356341 - (-319914))) and I1II(Il1I, l1II(305482 - 341419)) then
                    return true
                end
                if GetStatus(l1II(-566898 + 530822)) and (lI1I and I1II(Il1I, l1II(-656308 + 620166))) then
                    return true
                end
                if GetStatus(l1II(-301084 - (-264616))) and
                    ((UnitCreatureType(ll1I[l1II(-26458 - 9760)]) == l1II(96234 - 132132) or
                        UnitCreatureType(ll1I[l1II(-680174 - (-643956))]) == l1II(-778130 - (-741815))) and
                        (lI1I and I1II(Il1I, l1II(62050 + -98173)))) then
                    return true
                end
                if GetStatus(l1II(51444 - 87331)) and
                    (II1I(l1II(-715446 + 679527)) and I1II(ll1I, II1I(l1II(766200 + -802119)))) then
                    return true
                end
                if GetStatus(l1II(-963731 - (-927549))) and I1II(ll1I, l1II(799865 + -835861)) then
                    return true
                end
                if GetStatus(l1II(-576075 - (-540209))) and (Ill1 and I1II(ll1I, l1II(-630708 + 594812))) then
                    return true
                end
                if GetStatus(l1II(482095 + -517978)) and I1II(ll1I, l1II(-898431 - (-862459))) then
                    return true
                end
                if GetStatus(l1II(-39905 + 4105)) and I1II(ll1I, l1II(64207 - 100195)) then
                    return true
                end
                if GetStatus(l1II(-1021032 - (-984767))) and
                    (II1I(l1II(-78448 - (-42529))) and I1II(ll1I, II1I(l1II(793209 + -829128)))) then
                    lIII[l1II(-763256 + 727223)] = l1II(-871461 - (-835514)) .. II1I(l1II(-38625 + 2706))
                    return true
                end
            end
            local function III1()
                local l11I = l1l1 <= 361323 + -361321
                if GetStatus(l1II(948946 - 985343)) and I1II(Il1I, l1II(-550481 - (-514544))) then
                    return true
                end
                if GetStatus(l1II(-1312 + -35042)) and (lIl1 and I1II(Il1I, l1II(-121956 + 86015))) then
                    return true
                end
                if GetStatus(l1II(-700159 - (-664309))) and I1II(Il1I, l1II(-906968 - (-870651))) then
                    return true
                end
                if GetStatus(l1II(-780664 + 744220)) and
                    (I11I <= -615795 + 615795.5 and I1II(Il1I, l1II(650740 + -686587))) then
                    return true
                end
                if lIII[l1II(201446 + -237907)](l1II(1027968 + -1064488), -678069 + 737647) and
                    (GetStatus(l1II(-11108 - 24737)) and (lI1I <= .4 and I1II(Il1I, l1II(747063 + -783300)))) then
                    return true
                end
                if GetStatus(l1II(36129 + -72433)) and
                    ((UnitCreatureType(ll1I[l1II(-238951 + 202733)]) == l1II(-904444 + 868546) or
                        UnitCreatureType(ll1I[l1II(238639 - 274857)]) == l1II(-200768 - (-164453))) and
                        (l11I and I1II(Il1I, l1II(442030 + -478153)))) then
                    return true
                end
                if GetStatus(l1II(-1027071 - (-991231))) and
                    (lIII[l1II(-302028 - (-265960))][864507 + -459503] and I1II(ll1I, l1II(46049 + -82136))) then
                    return true
                end
                if GetStatus(l1II(-367339 + 331430)) and (Ill1 and I1II(ll1I, l1II(-696044 - (-660148)))) then
                    return true
                end
                if GetStatus(l1II(369323 + -405107)) and
                    (l1l1 > -24673 + 24675 and
                        (II1I(l1II(-510526 - (-474607))) and I1II(ll1I, II1I(l1II(228583 + -264502))))) then
                    return true
                end
                if GetStatus(l1II(-496751 + 460546)) and I1II(ll1I, l1II(-1080602 - (-1044352))) then
                    return true
                end
                if GetStatus(l1II(362219 + -398003)) and
                    (II1I(l1II(1044544 + -1080463)) and I1II(ll1I, II1I(l1II(278171 - 314090)))) then
                    return true
                end
                if GetStatus(l1II(698277 - 734391)) and
                    (l1l1 <= 1033280 + -1033275 and I1II(Il1I, l1II(-995519 + 959489))) then
                    return true
                end
                if GetStatus(l1II(-970522 - (-934269))) and (l11I and I1II(Il1I, l1II(335082 + -371224))) then
                    return true
                end
                if GetStatus(l1II(-786832 - (-750711))) and
                    (lIII[l1II(-563633 + 527172)](l1II(564875 - 601395), -470063 + 529641) and
                        I1II(ll1I, l1II(721398 + -757386))) then
                    return true
                end
                if GetStatus(l1II(-1043215 - (-1006911))) and
                    ((UnitCreatureType(ll1I[l1II(-225440 - (-189222))]) == l1II(475503 + -511401) or
                        UnitCreatureType(ll1I[l1II(-757424 - (-721206))]) == l1II(-1032064 + 995749)) and
                        (l11I and I1II(Il1I, l1II(-1084699 - (-1048576))))) then
                    return true
                end
                if GetStatus(l1II(909500 + -945621)) and I1II(ll1I, l1II(-704630 + 668642)) then
                    return true
                end
            end
            local lII1 = II1I(l1II(-804656 - (-768248)))
            if lII1 == l1II(592370 + -628272) then
                if IlI1() then
                    return true
                end
                return
            end
            if lII1 == l1II(672885 + -709191) then
                if III1() then
                    return true
                end
                return
            end
            if llI1() then
                return true
            end
        end
    end
    if PlayerIsClass(l1II(-288925 - (-252520))) then
        AH[l1II(-141924 + 105805)] = lIII
    end
end)(...)
